//
// PlaidAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PlaidAPI {

    /**
     Retrieve real-time balance data
     
     - parameter accountsBalanceGetRequest: (body)  
     - returns: AccountsGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func accountsBalanceGet(accountsBalanceGetRequest: AccountsBalanceGetRequest) async throws -> AccountsGetResponse {
        return try await accountsBalanceGetWithRequestBuilder(accountsBalanceGetRequest: accountsBalanceGetRequest).execute().body
    }

    /**
     Retrieve real-time balance data
     - POST /accounts/balance/get
     - The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item's accounts. While other endpoints, such as `/accounts/get`, return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/balance/#accountsbalanceget
}
     - parameter accountsBalanceGetRequest: (body)  
     - returns: RequestBuilder<AccountsGetResponse> 
     */
    open class func accountsBalanceGetWithRequestBuilder(accountsBalanceGetRequest: AccountsBalanceGetRequest) -> RequestBuilder<AccountsGetResponse> {
        let localVariablePath = "/accounts/balance/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: accountsBalanceGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountsGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve accounts
     
     - parameter accountsGetRequest: (body)  
     - returns: AccountsGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func accountsGet(accountsGetRequest: AccountsGetRequest) async throws -> AccountsGetResponse {
        return try await accountsGetWithRequestBuilder(accountsGetRequest: accountsGetRequest).execute().body
    }

    /**
     Retrieve accounts
     - POST /accounts/get
     - The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link's [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  `/accounts/get` is free to use and retrieves cached information, rather than extracting fresh information from the institution. The balance returned will reflect the balance at the time of the last successful Item update. If the Item is enabled for a regularly updating product, such as Transactions, Investments, or Liabilities, the balance will typically update about once a day, as long as the Item is healthy. If the Item is enabled only for products that do not frequently update, such as Auth or Identity, balance data may be much older.  For realtime balance information, use the paid endpoint `/accounts/balance/get` instead.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/accounts/#accountsget
}
     - parameter accountsGetRequest: (body)  
     - returns: RequestBuilder<AccountsGetResponse> 
     */
    open class func accountsGetWithRequestBuilder(accountsGetRequest: AccountsGetRequest) -> RequestBuilder<AccountsGetResponse> {
        let localVariablePath = "/accounts/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: accountsGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountsGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve information about a Plaid application
     
     - parameter applicationGetRequest: (body)  
     - returns: ApplicationGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func applicationGet(applicationGetRequest: ApplicationGetRequest) async throws -> ApplicationGetResponse {
        return try await applicationGetWithRequestBuilder(applicationGetRequest: applicationGetRequest).execute().body
    }

    /**
     Retrieve information about a Plaid application
     - POST /application/get
     - Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - parameter applicationGetRequest: (body)  
     - returns: RequestBuilder<ApplicationGetResponse> 
     */
    open class func applicationGetWithRequestBuilder(applicationGetRequest: ApplicationGetRequest) -> RequestBuilder<ApplicationGetResponse> {
        let localVariablePath = "/application/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: applicationGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApplicationGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create Asset Report Audit Copy
     
     - parameter assetReportAuditCopyCreateRequest: (body)  
     - returns: AssetReportAuditCopyCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest: AssetReportAuditCopyCreateRequest) async throws -> AssetReportAuditCopyCreateResponse {
        return try await assetReportAuditCopyCreateWithRequestBuilder(assetReportAuditCopyCreateRequest: assetReportAuditCopyCreateRequest).execute().body
    }

    /**
     Create Asset Report Audit Copy
     - POST /asset_report/audit_copy/create
     - Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/assets/#asset_reportaudit_copycreate
}
     - parameter assetReportAuditCopyCreateRequest: (body)  
     - returns: RequestBuilder<AssetReportAuditCopyCreateResponse> 
     */
    open class func assetReportAuditCopyCreateWithRequestBuilder(assetReportAuditCopyCreateRequest: AssetReportAuditCopyCreateRequest) -> RequestBuilder<AssetReportAuditCopyCreateResponse> {
        let localVariablePath = "/asset_report/audit_copy/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: assetReportAuditCopyCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AssetReportAuditCopyCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve an Asset Report Audit Copy
     
     - parameter assetReportAuditCopyGetRequest: (body)  
     - returns: AssetReportGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func assetReportAuditCopyGet(assetReportAuditCopyGetRequest: AssetReportAuditCopyGetRequest) async throws -> AssetReportGetResponse {
        return try await assetReportAuditCopyGetWithRequestBuilder(assetReportAuditCopyGetRequest: assetReportAuditCopyGetRequest).execute().body
    }

    /**
     Retrieve an Asset Report Audit Copy
     - POST /asset_report/audit_copy/get
     - `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /none/
}
     - parameter assetReportAuditCopyGetRequest: (body)  
     - returns: RequestBuilder<AssetReportGetResponse> 
     */
    open class func assetReportAuditCopyGetWithRequestBuilder(assetReportAuditCopyGetRequest: AssetReportAuditCopyGetRequest) -> RequestBuilder<AssetReportGetResponse> {
        let localVariablePath = "/asset_report/audit_copy/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: assetReportAuditCopyGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AssetReportGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Remove Asset Report Audit Copy
     
     - parameter assetReportAuditCopyRemoveRequest: (body)  
     - returns: AssetReportAuditCopyRemoveResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest: AssetReportAuditCopyRemoveRequest) async throws -> AssetReportAuditCopyRemoveResponse {
        return try await assetReportAuditCopyRemoveWithRequestBuilder(assetReportAuditCopyRemoveRequest: assetReportAuditCopyRemoveRequest).execute().body
    }

    /**
     Remove Asset Report Audit Copy
     - POST /asset_report/audit_copy/remove
     - The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/assets/#asset_reportaudit_copyremove
}
     - parameter assetReportAuditCopyRemoveRequest: (body)  
     - returns: RequestBuilder<AssetReportAuditCopyRemoveResponse> 
     */
    open class func assetReportAuditCopyRemoveWithRequestBuilder(assetReportAuditCopyRemoveRequest: AssetReportAuditCopyRemoveRequest) -> RequestBuilder<AssetReportAuditCopyRemoveResponse> {
        let localVariablePath = "/asset_report/audit_copy/remove"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: assetReportAuditCopyRemoveRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AssetReportAuditCopyRemoveResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create an Asset Report
     
     - parameter assetReportCreateRequest: (body)  
     - returns: AssetReportCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func assetReportCreate(assetReportCreateRequest: AssetReportCreateRequest) async throws -> AssetReportCreateResponse {
        return try await assetReportCreateWithRequestBuilder(assetReportCreateRequest: assetReportCreateRequest).execute().body
    }

    /**
     Create an Asset Report
     - POST /asset_report/create
     - The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. The exact amount of time to create the report will vary depending on how many days of history are requested and will typically range from a few seconds to about one minute. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/assets/#asset_reportcreate
}
     - parameter assetReportCreateRequest: (body)  
     - returns: RequestBuilder<AssetReportCreateResponse> 
     */
    open class func assetReportCreateWithRequestBuilder(assetReportCreateRequest: AssetReportCreateRequest) -> RequestBuilder<AssetReportCreateResponse> {
        let localVariablePath = "/asset_report/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: assetReportCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AssetReportCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Filter Asset Report
     
     - parameter assetReportFilterRequest: (body)  
     - returns: AssetReportFilterResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func assetReportFilter(assetReportFilterRequest: AssetReportFilterRequest) async throws -> AssetReportFilterResponse {
        return try await assetReportFilterWithRequestBuilder(assetReportFilterRequest: assetReportFilterRequest).execute().body
    }

    /**
     Filter Asset Report
     - POST /asset_report/filter
     - By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report's data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/assets/#asset_reportfilter
}
     - parameter assetReportFilterRequest: (body)  
     - returns: RequestBuilder<AssetReportFilterResponse> 
     */
    open class func assetReportFilterWithRequestBuilder(assetReportFilterRequest: AssetReportFilterRequest) -> RequestBuilder<AssetReportFilterResponse> {
        let localVariablePath = "/asset_report/filter"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: assetReportFilterRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AssetReportFilterResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve an Asset Report
     
     - parameter assetReportGetRequest: (body)  
     - returns: AssetReportGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func assetReportGet(assetReportGetRequest: AssetReportGetRequest) async throws -> AssetReportGetResponse {
        return try await assetReportGetWithRequestBuilder(assetReportGetRequest: assetReportGetRequest).execute().body
    }

    /**
     Retrieve an Asset Report
     - POST /asset_report/get
     - The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report. To retrieve an Asset Report with Insights, call `/asset_report/get` endpoint with `include_insights` set to `true`.  For latency-sensitive applications, you can optionally call `/asset_report/create` with `options.add_ons` set to `[\"fast_assets\"]`. This will cause Plaid to create two versions of the Asset Report: one with only current and available balance and identity information, and then later on the complete Asset Report. You will receive separate webhooks for each version of the Asset Report.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/assets/#asset_reportget
}
     - parameter assetReportGetRequest: (body)  
     - returns: RequestBuilder<AssetReportGetResponse> 
     */
    open class func assetReportGetWithRequestBuilder(assetReportGetRequest: AssetReportGetRequest) -> RequestBuilder<AssetReportGetResponse> {
        let localVariablePath = "/asset_report/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: assetReportGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AssetReportGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve a PDF Asset Report
     
     - parameter assetReportPDFGetRequest: (body)  
     - returns: URL
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func assetReportPdfGet(assetReportPDFGetRequest: AssetReportPDFGetRequest) async throws -> URL {
        return try await assetReportPdfGetWithRequestBuilder(assetReportPDFGetRequest: assetReportPDFGetRequest).execute().body
    }

    /**
     Retrieve a PDF Asset Report
     - POST /asset_report/pdf/get
     - The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/assets/#asset_reportpdfget
}
     - parameter assetReportPDFGetRequest: (body)  
     - returns: RequestBuilder<URL> 
     */
    open class func assetReportPdfGetWithRequestBuilder(assetReportPDFGetRequest: AssetReportPDFGetRequest) -> RequestBuilder<URL> {
        let localVariablePath = "/asset_report/pdf/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: assetReportPDFGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Refresh an Asset Report
     
     - parameter assetReportRefreshRequest: (body)  
     - returns: AssetReportRefreshResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func assetReportRefresh(assetReportRefreshRequest: AssetReportRefreshRequest) async throws -> AssetReportRefreshResponse {
        return try await assetReportRefreshWithRequestBuilder(assetReportRefreshRequest: assetReportRefreshRequest).execute().body
    }

    /**
     Refresh an Asset Report
     - POST /asset_report/refresh
     - An Asset Report is an immutable snapshot of a user's assets. In order to \"refresh\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\"\") for any previously-populated fields you would like set as empty.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/assets/#asset_reportrefresh
}
     - parameter assetReportRefreshRequest: (body)  
     - returns: RequestBuilder<AssetReportRefreshResponse> 
     */
    open class func assetReportRefreshWithRequestBuilder(assetReportRefreshRequest: AssetReportRefreshRequest) -> RequestBuilder<AssetReportRefreshResponse> {
        let localVariablePath = "/asset_report/refresh"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: assetReportRefreshRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AssetReportRefreshResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete an Asset Report
     
     - parameter assetReportRemoveRequest: (body)  
     - returns: AssetReportRemoveResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func assetReportRemove(assetReportRemoveRequest: AssetReportRemoveRequest) async throws -> AssetReportRemoveResponse {
        return try await assetReportRemoveWithRequestBuilder(assetReportRemoveRequest: assetReportRemoveRequest).execute().body
    }

    /**
     Delete an Asset Report
     - POST /asset_report/remove
     - The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove access to an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/assets/#asset_reportremove
}
     - parameter assetReportRemoveRequest: (body)  
     - returns: RequestBuilder<AssetReportRemoveResponse> 
     */
    open class func assetReportRemoveWithRequestBuilder(assetReportRemoveRequest: AssetReportRemoveRequest) -> RequestBuilder<AssetReportRemoveResponse> {
        let localVariablePath = "/asset_report/remove"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: assetReportRemoveRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AssetReportRemoveResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve auth data
     
     - parameter authGetRequest: (body)  
     - returns: AuthGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func authGet(authGetRequest: AuthGetRequest) async throws -> AuthGetResponse {
        return try await authGetWithRequestBuilder(authGetRequest: authGetRequest).execute().body
    }

    /**
     Retrieve auth data
     - POST /auth/get
     - The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item's checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/auth/#authget
}
     - parameter authGetRequest: (body)  
     - returns: RequestBuilder<AuthGetResponse> 
     */
    open class func authGetWithRequestBuilder(authGetRequest: AuthGetRequest) -> RequestBuilder<AuthGetResponse> {
        let localVariablePath = "/auth/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get balance of your Bank Transfer account
     
     - parameter bankTransferBalanceGetRequest: (body)  
     - returns: BankTransferBalanceGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func bankTransferBalanceGet(bankTransferBalanceGetRequest: BankTransferBalanceGetRequest) async throws -> BankTransferBalanceGetResponse {
        return try await bankTransferBalanceGetWithRequestBuilder(bankTransferBalanceGetRequest: bankTransferBalanceGetRequest).execute().body
    }

    /**
     Get balance of your Bank Transfer account
     - POST /bank_transfer/balance/get
     - Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /bank-transfers/reference#bank_transferbalanceget
}
     - parameter bankTransferBalanceGetRequest: (body)  
     - returns: RequestBuilder<BankTransferBalanceGetResponse> 
     */
    open class func bankTransferBalanceGetWithRequestBuilder(bankTransferBalanceGetRequest: BankTransferBalanceGetRequest) -> RequestBuilder<BankTransferBalanceGetResponse> {
        let localVariablePath = "/bank_transfer/balance/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: bankTransferBalanceGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BankTransferBalanceGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Cancel a bank transfer
     
     - parameter bankTransferCancelRequest: (body)  
     - returns: BankTransferCancelResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func bankTransferCancel(bankTransferCancelRequest: BankTransferCancelRequest) async throws -> BankTransferCancelResponse {
        return try await bankTransferCancelWithRequestBuilder(bankTransferCancelRequest: bankTransferCancelRequest).execute().body
    }

    /**
     Cancel a bank transfer
     - POST /bank_transfer/cancel
     - Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /bank-transfers/reference#bank_transfercancel
}
     - parameter bankTransferCancelRequest: (body)  
     - returns: RequestBuilder<BankTransferCancelResponse> 
     */
    open class func bankTransferCancelWithRequestBuilder(bankTransferCancelRequest: BankTransferCancelRequest) -> RequestBuilder<BankTransferCancelResponse> {
        let localVariablePath = "/bank_transfer/cancel"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: bankTransferCancelRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BankTransferCancelResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a bank transfer
     
     - parameter bankTransferCreateRequest: (body)  
     - returns: BankTransferCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func bankTransferCreate(bankTransferCreateRequest: BankTransferCreateRequest) async throws -> BankTransferCreateResponse {
        return try await bankTransferCreateWithRequestBuilder(bankTransferCreateRequest: bankTransferCreateRequest).execute().body
    }

    /**
     Create a bank transfer
     - POST /bank_transfer/create
     - Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /bank-transfers/reference#bank_transfercreate
}
     - parameter bankTransferCreateRequest: (body)  
     - returns: RequestBuilder<BankTransferCreateResponse> 
     */
    open class func bankTransferCreateWithRequestBuilder(bankTransferCreateRequest: BankTransferCreateRequest) -> RequestBuilder<BankTransferCreateResponse> {
        let localVariablePath = "/bank_transfer/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: bankTransferCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BankTransferCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List bank transfer events
     
     - parameter bankTransferEventListRequest: (body)  
     - returns: BankTransferEventListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func bankTransferEventList(bankTransferEventListRequest: BankTransferEventListRequest) async throws -> BankTransferEventListResponse {
        return try await bankTransferEventListWithRequestBuilder(bankTransferEventListRequest: bankTransferEventListRequest).execute().body
    }

    /**
     List bank transfer events
     - POST /bank_transfer/event/list
     - Use the `/bank_transfer/event/list` endpoint to get a list of Plaid-initiated ACH or bank transfer events based on specified filter criteria. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://plaid.com/docs/auth/coverage/microdeposit-events/).
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/auth#bank_transfereventlist
}
     - parameter bankTransferEventListRequest: (body)  
     - returns: RequestBuilder<BankTransferEventListResponse> 
     */
    open class func bankTransferEventListWithRequestBuilder(bankTransferEventListRequest: BankTransferEventListRequest) -> RequestBuilder<BankTransferEventListResponse> {
        let localVariablePath = "/bank_transfer/event/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: bankTransferEventListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BankTransferEventListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Sync bank transfer events
     
     - parameter bankTransferEventSyncRequest: (body)  
     - returns: BankTransferEventSyncResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func bankTransferEventSync(bankTransferEventSyncRequest: BankTransferEventSyncRequest) async throws -> BankTransferEventSyncResponse {
        return try await bankTransferEventSyncWithRequestBuilder(bankTransferEventSyncRequest: bankTransferEventSyncRequest).execute().body
    }

    /**
     Sync bank transfer events
     - POST /bank_transfer/event/sync
     - `/bank_transfer/event/sync` allows you to request up to the next 25 Plaid-initiated bank transfer events that happened after a specific `event_id`. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/auth/#bank_transfereventsync
}
     - parameter bankTransferEventSyncRequest: (body)  
     - returns: RequestBuilder<BankTransferEventSyncResponse> 
     */
    open class func bankTransferEventSyncWithRequestBuilder(bankTransferEventSyncRequest: BankTransferEventSyncRequest) -> RequestBuilder<BankTransferEventSyncResponse> {
        let localVariablePath = "/bank_transfer/event/sync"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: bankTransferEventSyncRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BankTransferEventSyncResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve a bank transfer
     
     - parameter bankTransferGetRequest: (body)  
     - returns: BankTransferGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func bankTransferGet(bankTransferGetRequest: BankTransferGetRequest) async throws -> BankTransferGetResponse {
        return try await bankTransferGetWithRequestBuilder(bankTransferGetRequest: bankTransferGetRequest).execute().body
    }

    /**
     Retrieve a bank transfer
     - POST /bank_transfer/get
     - The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /bank-transfers/reference#bank_transferget
}
     - parameter bankTransferGetRequest: (body)  
     - returns: RequestBuilder<BankTransferGetResponse> 
     */
    open class func bankTransferGetWithRequestBuilder(bankTransferGetRequest: BankTransferGetRequest) -> RequestBuilder<BankTransferGetResponse> {
        let localVariablePath = "/bank_transfer/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: bankTransferGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BankTransferGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List bank transfers
     
     - parameter bankTransferListRequest: (body)  
     - returns: BankTransferListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func bankTransferList(bankTransferListRequest: BankTransferListRequest) async throws -> BankTransferListResponse {
        return try await bankTransferListWithRequestBuilder(bankTransferListRequest: bankTransferListRequest).execute().body
    }

    /**
     List bank transfers
     - POST /bank_transfer/list
     - Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers. 
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /bank-transfers/reference#bank_transferlist
}
     - parameter bankTransferListRequest: (body)  
     - returns: RequestBuilder<BankTransferListResponse> 
     */
    open class func bankTransferListWithRequestBuilder(bankTransferListRequest: BankTransferListRequest) -> RequestBuilder<BankTransferListResponse> {
        let localVariablePath = "/bank_transfer/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: bankTransferListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BankTransferListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Migrate account into Bank Transfers
     
     - parameter bankTransferMigrateAccountRequest: (body)  
     - returns: BankTransferMigrateAccountResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func bankTransferMigrateAccount(bankTransferMigrateAccountRequest: BankTransferMigrateAccountRequest) async throws -> BankTransferMigrateAccountResponse {
        return try await bankTransferMigrateAccountWithRequestBuilder(bankTransferMigrateAccountRequest: bankTransferMigrateAccountRequest).execute().body
    }

    /**
     Migrate account into Bank Transfers
     - POST /bank_transfer/migrate_account
     - As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /bank-transfers/reference#bank_transfermigrate_account
}
     - parameter bankTransferMigrateAccountRequest: (body)  
     - returns: RequestBuilder<BankTransferMigrateAccountResponse> 
     */
    open class func bankTransferMigrateAccountWithRequestBuilder(bankTransferMigrateAccountRequest: BankTransferMigrateAccountRequest) -> RequestBuilder<BankTransferMigrateAccountResponse> {
        let localVariablePath = "/bank_transfer/migrate_account"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: bankTransferMigrateAccountRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BankTransferMigrateAccountResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve a sweep
     
     - parameter bankTransferSweepGetRequest: (body)  
     - returns: BankTransferSweepGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func bankTransferSweepGet(bankTransferSweepGetRequest: BankTransferSweepGetRequest) async throws -> BankTransferSweepGetResponse {
        return try await bankTransferSweepGetWithRequestBuilder(bankTransferSweepGetRequest: bankTransferSweepGetRequest).execute().body
    }

    /**
     Retrieve a sweep
     - POST /bank_transfer/sweep/get
     - The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/#bank_transfersweepget
}
     - parameter bankTransferSweepGetRequest: (body)  
     - returns: RequestBuilder<BankTransferSweepGetResponse> 
     */
    open class func bankTransferSweepGetWithRequestBuilder(bankTransferSweepGetRequest: BankTransferSweepGetRequest) -> RequestBuilder<BankTransferSweepGetResponse> {
        let localVariablePath = "/bank_transfer/sweep/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: bankTransferSweepGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BankTransferSweepGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List sweeps
     
     - parameter bankTransferSweepListRequest: (body)  
     - returns: BankTransferSweepListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func bankTransferSweepList(bankTransferSweepListRequest: BankTransferSweepListRequest) async throws -> BankTransferSweepListResponse {
        return try await bankTransferSweepListWithRequestBuilder(bankTransferSweepListRequest: bankTransferSweepListRequest).execute().body
    }

    /**
     List sweeps
     - POST /bank_transfer/sweep/list
     - The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/#bank_transfersweeplist
}
     - parameter bankTransferSweepListRequest: (body)  
     - returns: RequestBuilder<BankTransferSweepListResponse> 
     */
    open class func bankTransferSweepListWithRequestBuilder(bankTransferSweepListRequest: BankTransferSweepListRequest) -> RequestBuilder<BankTransferSweepListResponse> {
        let localVariablePath = "/bank_transfer/sweep/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: bankTransferSweepListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BankTransferSweepListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a Base Report
     
     - parameter baseReportCreateRequest: (body)  
     - returns: BaseReportCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func baseReportCreate(baseReportCreateRequest: BaseReportCreateRequest) async throws -> BaseReportCreateResponse {
        return try await baseReportCreateWithRequestBuilder(baseReportCreateRequest: baseReportCreateRequest).execute().body
    }

    /**
     Create a Base Report
     - POST /cra/base_report/create
     - This endpoint allows the customer to create a Base Report by passing in a user token. The Base Report will be generated based on the most recently linked item from the user token.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /none/
}
     - parameter baseReportCreateRequest: (body)  
     - returns: RequestBuilder<BaseReportCreateResponse> 
     */
    open class func baseReportCreateWithRequestBuilder(baseReportCreateRequest: BaseReportCreateRequest) -> RequestBuilder<BaseReportCreateResponse> {
        let localVariablePath = "/cra/base_report/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: baseReportCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseReportCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve a Base Report
     
     - parameter baseReportGetRequest: (body)  
     - returns: BaseReportGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func baseReportGet(baseReportGetRequest: BaseReportGetRequest) async throws -> BaseReportGetResponse {
        return try await baseReportGetWithRequestBuilder(baseReportGetRequest: baseReportGetRequest).execute().body
    }

    /**
     Retrieve a Base Report
     - POST /cra/base_report/get
     - This endpoint allows the customer to retrieve a Base Report. Customers should pass in the `user_token` created in `/link/token/create`.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /none/
}
     - parameter baseReportGetRequest: (body)  
     - returns: RequestBuilder<BaseReportGetResponse> 
     */
    open class func baseReportGetWithRequestBuilder(baseReportGetRequest: BaseReportGetRequest) -> RequestBuilder<BaseReportGetResponse> {
        let localVariablePath = "/cra/base_report/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: baseReportGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseReportGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Evaluate risk of a bank account
     
     - parameter beaconAccountRiskEvaluateRequest: (body)  
     - returns: BeaconAccountRiskEvaluateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func beaconAccountRiskEvaluate(beaconAccountRiskEvaluateRequest: BeaconAccountRiskEvaluateRequest) async throws -> BeaconAccountRiskEvaluateResponse {
        return try await beaconAccountRiskEvaluateWithRequestBuilder(beaconAccountRiskEvaluateRequest: beaconAccountRiskEvaluateRequest).execute().body
    }

    /**
     Evaluate risk of a bank account
     - POST /beacon/account_risk/v1/evaluate
     - Use `/beacon/account_risk/v1/evaluate` to get risk insights for a linked account.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: none
}
     - parameter beaconAccountRiskEvaluateRequest: (body)  
     - returns: RequestBuilder<BeaconAccountRiskEvaluateResponse> 
     */
    open class func beaconAccountRiskEvaluateWithRequestBuilder(beaconAccountRiskEvaluateRequest: BeaconAccountRiskEvaluateRequest) -> RequestBuilder<BeaconAccountRiskEvaluateResponse> {
        let localVariablePath = "/beacon/account_risk/v1/evaluate"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: beaconAccountRiskEvaluateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BeaconAccountRiskEvaluateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a Beacon Duplicate
     
     - parameter beaconDuplicateGetRequest: (body)  
     - returns: BeaconDuplicateGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func beaconDuplicateGet(beaconDuplicateGetRequest: BeaconDuplicateGetRequest) async throws -> BeaconDuplicateGetResponse {
        return try await beaconDuplicateGetWithRequestBuilder(beaconDuplicateGetRequest: beaconDuplicateGetRequest).execute().body
    }

    /**
     Get a Beacon Duplicate
     - POST /beacon/duplicate/get
     - Returns a Beacon Duplicate for a given Beacon Duplicate id.  A Beacon Duplicate represents a pair of similar Beacon Users within your organization.  Two Beacon User revisions are returned for each Duplicate record in either the `beacon_user1` or `beacon_user2` response fields.  The `analysis` field in the response indicates which fields matched between `beacon_user1` and `beacon_user2`. 
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/beacon/#beaconduplicateget
}
     - parameter beaconDuplicateGetRequest: (body)  
     - returns: RequestBuilder<BeaconDuplicateGetResponse> 
     */
    open class func beaconDuplicateGetWithRequestBuilder(beaconDuplicateGetRequest: BeaconDuplicateGetRequest) -> RequestBuilder<BeaconDuplicateGetResponse> {
        let localVariablePath = "/beacon/duplicate/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: beaconDuplicateGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BeaconDuplicateGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a Beacon Report
     
     - parameter beaconReportCreateRequest: (body)  
     - returns: BeaconReportCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func beaconReportCreate(beaconReportCreateRequest: BeaconReportCreateRequest) async throws -> BeaconReportCreateResponse {
        return try await beaconReportCreateWithRequestBuilder(beaconReportCreateRequest: beaconReportCreateRequest).execute().body
    }

    /**
     Create a Beacon Report
     - POST /beacon/report/create
     - Create a fraud report for a given Beacon User.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/beacon/#beaconreportcreate
}
     - parameter beaconReportCreateRequest: (body)  
     - returns: RequestBuilder<BeaconReportCreateResponse> 
     */
    open class func beaconReportCreateWithRequestBuilder(beaconReportCreateRequest: BeaconReportCreateRequest) -> RequestBuilder<BeaconReportCreateResponse> {
        let localVariablePath = "/beacon/report/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: beaconReportCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BeaconReportCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a Beacon Report
     
     - parameter beaconReportGetRequest: (body)  
     - returns: BeaconReportGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func beaconReportGet(beaconReportGetRequest: BeaconReportGetRequest) async throws -> BeaconReportGetResponse {
        return try await beaconReportGetWithRequestBuilder(beaconReportGetRequest: beaconReportGetRequest).execute().body
    }

    /**
     Get a Beacon Report
     - POST /beacon/report/get
     - Returns a Beacon report for a given Beacon report id.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/beacon/#beaconreportget
}
     - parameter beaconReportGetRequest: (body)  
     - returns: RequestBuilder<BeaconReportGetResponse> 
     */
    open class func beaconReportGetWithRequestBuilder(beaconReportGetRequest: BeaconReportGetRequest) -> RequestBuilder<BeaconReportGetResponse> {
        let localVariablePath = "/beacon/report/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: beaconReportGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BeaconReportGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List Beacon Reports for a Beacon User
     
     - parameter beaconReportListRequest: (body)  
     - returns: BeaconReportListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func beaconReportList(beaconReportListRequest: BeaconReportListRequest) async throws -> BeaconReportListResponse {
        return try await beaconReportListWithRequestBuilder(beaconReportListRequest: beaconReportListRequest).execute().body
    }

    /**
     List Beacon Reports for a Beacon User
     - POST /beacon/report/list
     - Use the `/beacon/report/list` endpoint to view all Beacon Reports you created for a specific Beacon User. The reports returned by this endpoint are exclusively reports you created for a specific user. A Beacon User can only have one active report at a time, but a new report can be created if a previous report has been deleted. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/beacon/#beaconreportlist
}
     - parameter beaconReportListRequest: (body)  
     - returns: RequestBuilder<BeaconReportListResponse> 
     */
    open class func beaconReportListWithRequestBuilder(beaconReportListRequest: BeaconReportListRequest) -> RequestBuilder<BeaconReportListResponse> {
        let localVariablePath = "/beacon/report/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: beaconReportListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BeaconReportListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a Beacon Report Syndication
     
     - parameter beaconReportSyndicationGetRequest: (body)  
     - returns: BeaconReportSyndicationGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func beaconReportSyndicationGet(beaconReportSyndicationGetRequest: BeaconReportSyndicationGetRequest) async throws -> BeaconReportSyndicationGetResponse {
        return try await beaconReportSyndicationGetWithRequestBuilder(beaconReportSyndicationGetRequest: beaconReportSyndicationGetRequest).execute().body
    }

    /**
     Get a Beacon Report Syndication
     - POST /beacon/report_syndication/get
     - Returns a Beacon Report Syndication for a given Beacon Report Syndication id.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/beacon/#beaconreportsyndicationget
}
     - parameter beaconReportSyndicationGetRequest: (body)  
     - returns: RequestBuilder<BeaconReportSyndicationGetResponse> 
     */
    open class func beaconReportSyndicationGetWithRequestBuilder(beaconReportSyndicationGetRequest: BeaconReportSyndicationGetRequest) -> RequestBuilder<BeaconReportSyndicationGetResponse> {
        let localVariablePath = "/beacon/report_syndication/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: beaconReportSyndicationGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BeaconReportSyndicationGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List Beacon Report Syndications for a Beacon User
     
     - parameter beaconReportSyndicationListRequest: (body)  
     - returns: BeaconReportSyndicationListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func beaconReportSyndicationList(beaconReportSyndicationListRequest: BeaconReportSyndicationListRequest) async throws -> BeaconReportSyndicationListResponse {
        return try await beaconReportSyndicationListWithRequestBuilder(beaconReportSyndicationListRequest: beaconReportSyndicationListRequest).execute().body
    }

    /**
     List Beacon Report Syndications for a Beacon User
     - POST /beacon/report_syndication/list
     - Use the `/beacon/report_syndication/list` endpoint to view all Beacon Reports that have been syndicated to a specific Beacon User. This endpoint returns Beacon Report Syndications which are references to Beacon Reports created either by you, or another Beacon customer, that matched the specified Beacon User. A Beacon User can have multiple active Beacon Report Syndications at once. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/beacon/#beaconreportsyndicationlist
}
     - parameter beaconReportSyndicationListRequest: (body)  
     - returns: RequestBuilder<BeaconReportSyndicationListResponse> 
     */
    open class func beaconReportSyndicationListWithRequestBuilder(beaconReportSyndicationListRequest: BeaconReportSyndicationListRequest) -> RequestBuilder<BeaconReportSyndicationListResponse> {
        let localVariablePath = "/beacon/report_syndication/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: beaconReportSyndicationListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BeaconReportSyndicationListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a Beacon User
     
     - parameter beaconUserCreateRequest: (body)  
     - returns: BeaconUserCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func beaconUserCreate(beaconUserCreateRequest: BeaconUserCreateRequest) async throws -> BeaconUserCreateResponse {
        return try await beaconUserCreateWithRequestBuilder(beaconUserCreateRequest: beaconUserCreateRequest).execute().body
    }

    /**
     Create a Beacon User
     - POST /beacon/user/create
     - Create and scan a Beacon User against your Beacon Program, according to your program's settings.  When you submit a new user to `/beacon/user/create`, several checks are performed immediately:    - The user's PII (provided within the `user` object) is searched against all other users within the Beacon Program you specified. If a match is found that violates your program's \"Duplicate Information Filtering\" settings, the user will be returned with a status of `pending_review`.    - The user's PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user's data matches a fraud report that your team created, the user will be returned with a status of `rejected`.    - Finally, the user's PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a `pending_review` status if your program has enabled automatic flagging based on network fraud.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/beacon/#beaconusercreate
}
     - parameter beaconUserCreateRequest: (body)  
     - returns: RequestBuilder<BeaconUserCreateResponse> 
     */
    open class func beaconUserCreateWithRequestBuilder(beaconUserCreateRequest: BeaconUserCreateRequest) -> RequestBuilder<BeaconUserCreateResponse> {
        let localVariablePath = "/beacon/user/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: beaconUserCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BeaconUserCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a Beacon User
     
     - parameter beaconUserGetRequest: (body)  
     - returns: BeaconUserGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func beaconUserGet(beaconUserGetRequest: BeaconUserGetRequest) async throws -> BeaconUserGetResponse {
        return try await beaconUserGetWithRequestBuilder(beaconUserGetRequest: beaconUserGetRequest).execute().body
    }

    /**
     Get a Beacon User
     - POST /beacon/user/get
     - Fetch a Beacon User.  The Beacon User is returned with all of their associated information and a `status` based on the Beacon Network duplicate record and fraud checks. 
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/beacon/#beaconuserget
}
     - parameter beaconUserGetRequest: (body)  
     - returns: RequestBuilder<BeaconUserGetResponse> 
     */
    open class func beaconUserGetWithRequestBuilder(beaconUserGetRequest: BeaconUserGetRequest) -> RequestBuilder<BeaconUserGetResponse> {
        let localVariablePath = "/beacon/user/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: beaconUserGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BeaconUserGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List a Beacon User's history
     
     - parameter beaconUserHistoryListRequest: (body)  
     - returns: BeaconUserHistoryListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func beaconUserHistoryList(beaconUserHistoryListRequest: BeaconUserHistoryListRequest) async throws -> BeaconUserHistoryListResponse {
        return try await beaconUserHistoryListWithRequestBuilder(beaconUserHistoryListRequest: beaconUserHistoryListRequest).execute().body
    }

    /**
     List a Beacon User's history
     - POST /beacon/user/history/list
     - List all changes to the Beacon User in reverse-chronological order.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/beacon/#beaconuserhistorylist
}
     - parameter beaconUserHistoryListRequest: (body)  
     - returns: RequestBuilder<BeaconUserHistoryListResponse> 
     */
    open class func beaconUserHistoryListWithRequestBuilder(beaconUserHistoryListRequest: BeaconUserHistoryListRequest) -> RequestBuilder<BeaconUserHistoryListResponse> {
        let localVariablePath = "/beacon/user/history/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: beaconUserHistoryListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BeaconUserHistoryListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Review a Beacon User
     
     - parameter beaconUserReviewRequest: (body)  
     - returns: BeaconUserGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func beaconUserReview(beaconUserReviewRequest: BeaconUserReviewRequest) async throws -> BeaconUserGetResponse {
        return try await beaconUserReviewWithRequestBuilder(beaconUserReviewRequest: beaconUserReviewRequest).execute().body
    }

    /**
     Review a Beacon User
     - POST /beacon/user/review
     - Update the status of a Beacon User.  When updating a Beacon User's status via this endpoint, Plaid validates that the status change is consistent with the related state for this Beacon User. Specifically, we will check:  1. Whether there are any associated Beacon Reports connected to the Beacon User, and 2. Whether there are any confirmed Beacon Report Syndications connected to the Beacon User.  When updating a Beacon User's status to \"rejected\", we enforce that either a Beacon Report has been created for the Beacon User or a Beacon Report Syndication has been confirmed. When updating a Beacon User's status to \"cleared\", we enforce that there are no active Beacon Reports or confirmed Beacon Report Syndications associated with the user. If you previously created a Beacon Report for this user, you must delete it before updating the Beacon User's status to \"cleared\". There are no restrictions on updating a Beacon User's status to \"pending_review\".  If these conditions are not met, the request will be rejected with an error explaining the issue.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/beacon/#beaconuserreview
}
     - parameter beaconUserReviewRequest: (body)  
     - returns: RequestBuilder<BeaconUserGetResponse> 
     */
    open class func beaconUserReviewWithRequestBuilder(beaconUserReviewRequest: BeaconUserReviewRequest) -> RequestBuilder<BeaconUserGetResponse> {
        let localVariablePath = "/beacon/user/review"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: beaconUserReviewRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BeaconUserGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update the identity data of a Beacon User
     
     - parameter beaconUserUpdateRequest: (body)  
     - returns: BeaconUserUpdateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func beaconUserUpdate(beaconUserUpdateRequest: BeaconUserUpdateRequest) async throws -> BeaconUserUpdateResponse {
        return try await beaconUserUpdateWithRequestBuilder(beaconUserUpdateRequest: beaconUserUpdateRequest).execute().body
    }

    /**
     Update the identity data of a Beacon User
     - POST /beacon/user/update
     - Update the identity data for a Beacon User in your Beacon Program.  Similar to `/beacon/user/create`, several checks are performed immediately when you submit a change to `/beacon/user/update`:    - The user's updated PII is searched against all other users within the Beacon Program you specified. If a match is found that violates your program's \"Duplicate Information Filtering\" settings, the user will be returned with a status of `pending_review`.    - The user's updated PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user's data matches a fraud report that your team created, the user will be returned with a status of `rejected`.    - Finally, the user's PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a `pending_review` status if your program has enabled automatic flagging based on network fraud.  Plaid maintains a version history for each Beacon User, so the Beacon User's identity data before and after the update is retained as separate versions.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/beacon/#beaconuserupdate
}
     - parameter beaconUserUpdateRequest: (body)  
     - returns: RequestBuilder<BeaconUserUpdateResponse> 
     */
    open class func beaconUserUpdateWithRequestBuilder(beaconUserUpdateRequest: BeaconUserUpdateRequest) -> RequestBuilder<BeaconUserUpdateResponse> {
        let localVariablePath = "/beacon/user/update"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: beaconUserUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BeaconUserUpdateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get categories
     
     - parameter body: (body)  
     - returns: CategoriesGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func categoriesGet(body: AnyCodable) async throws -> CategoriesGetResponse {
        return try await categoriesGetWithRequestBuilder(body: body).execute().body
    }

    /**
     Get categories
     - POST /categories/get
     - Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.  All implementations are recommended to use the newer `personal_finance_category` taxonomy instead of the older `category` taxonomy supported by this endpoint. The [`personal_finance_category taxonomy` CSV file](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) is available for download and is not accessible via API.
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transactions/#categoriesget
}
     - parameter body: (body)  
     - returns: RequestBuilder<CategoriesGetResponse> 
     */
    open class func categoriesGetWithRequestBuilder(body: AnyCodable) -> RequestBuilder<CategoriesGetResponse> {
        let localVariablePath = "/categories/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CategoriesGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Retrieve a PDF Reports
     
     - parameter consumerReportPDFGetRequest: (body)  
     - returns: URL
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func consumerReportPdfGet(consumerReportPDFGetRequest: ConsumerReportPDFGetRequest) async throws -> URL {
        return try await consumerReportPdfGetWithRequestBuilder(consumerReportPDFGetRequest: consumerReportPDFGetRequest).execute().body
    }

    /**
     Retrieve a PDF Reports
     - POST /consumer_report/pdf/get
     - Retrieves all existing CRB Bank Income and Base reports for the consumer in PDF format.  Response is PDF binary data. The `request_id` is returned in the `Plaid-Request-ID` header.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /none/
}
     - parameter consumerReportPDFGetRequest: (body)  
     - returns: RequestBuilder<URL> 
     */
    open class func consumerReportPdfGetWithRequestBuilder(consumerReportPDFGetRequest: ConsumerReportPDFGetRequest) -> RequestBuilder<URL> {
        let localVariablePath = "/consumer_report/pdf/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: consumerReportPDFGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a CRA report for income verification
     
     - parameter craBankIncomeCreateRequest: (body)  
     - returns: CraBankIncomeCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func craBankIncomeCreate(craBankIncomeCreateRequest: CraBankIncomeCreateRequest) async throws -> CraBankIncomeCreateResponse {
        return try await craBankIncomeCreateWithRequestBuilder(craBankIncomeCreateRequest: craBankIncomeCreateRequest).execute().body
    }

    /**
     Create a CRA report for income verification
     - POST /cra/bank_income/create
     - `/cra/bank_income/create` creates a CRA report for income verification
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/income/#crabank_incomecreate
}
     - parameter craBankIncomeCreateRequest: (body)  
     - returns: RequestBuilder<CraBankIncomeCreateResponse> 
     */
    open class func craBankIncomeCreateWithRequestBuilder(craBankIncomeCreateRequest: CraBankIncomeCreateRequest) -> RequestBuilder<CraBankIncomeCreateResponse> {
        let localVariablePath = "/cra/bank_income/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: craBankIncomeCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CraBankIncomeCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve information from the bank accounts used for income verification
     
     - parameter craBankIncomeGetRequest: (body)  
     - returns: CraBankIncomeGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func craBankIncomeGet(craBankIncomeGetRequest: CraBankIncomeGetRequest) async throws -> CraBankIncomeGetResponse {
        return try await craBankIncomeGetWithRequestBuilder(craBankIncomeGetRequest: craBankIncomeGetRequest).execute().body
    }

    /**
     Retrieve information from the bank accounts used for income verification
     - POST /cra/bank_income/get
     - `/cra/bank_income/get` returns the bank income report(s) for a specified user.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/income/#crabank_incomeget
}
     - parameter craBankIncomeGetRequest: (body)  
     - returns: RequestBuilder<CraBankIncomeGetResponse> 
     */
    open class func craBankIncomeGetWithRequestBuilder(craBankIncomeGetRequest: CraBankIncomeGetRequest) -> RequestBuilder<CraBankIncomeGetResponse> {
        let localVariablePath = "/cra/bank_income/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: craBankIncomeGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CraBankIncomeGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Register loan applications and decisions.
     
     - parameter craLoansApplicationsRegisterRequest: (body)  
     - returns: CraLoansApplicationsRegisterResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func craLoansApplicationsRegister(craLoansApplicationsRegisterRequest: CraLoansApplicationsRegisterRequest) async throws -> CraLoansApplicationsRegisterResponse {
        return try await craLoansApplicationsRegisterWithRequestBuilder(craLoansApplicationsRegisterRequest: craLoansApplicationsRegisterRequest).execute().body
    }

    /**
     Register loan applications and decisions.
     - POST /cra/loans/applications/register
     - `/cra/loans/applications/register` registers loan applications and decisions.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /none/
}
     - parameter craLoansApplicationsRegisterRequest: (body)  
     - returns: RequestBuilder<CraLoansApplicationsRegisterResponse> 
     */
    open class func craLoansApplicationsRegisterWithRequestBuilder(craLoansApplicationsRegisterRequest: CraLoansApplicationsRegisterRequest) -> RequestBuilder<CraLoansApplicationsRegisterResponse> {
        let localVariablePath = "/cra/loans/applications/register"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: craLoansApplicationsRegisterRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CraLoansApplicationsRegisterResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Register a list of loans to their applicants.
     
     - parameter cRALoansRegisterRequest: (body)  
     - returns: CraLoansRegisterResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func craLoansRegister(cRALoansRegisterRequest: CRALoansRegisterRequest) async throws -> CraLoansRegisterResponse {
        return try await craLoansRegisterWithRequestBuilder(cRALoansRegisterRequest: cRALoansRegisterRequest).execute().body
    }

    /**
     Register a list of loans to their applicants.
     - POST /cra/loans/register
     - `/cra/loans/register` registers a list of loans to their applicants.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /none/
}
     - parameter cRALoansRegisterRequest: (body)  
     - returns: RequestBuilder<CraLoansRegisterResponse> 
     */
    open class func craLoansRegisterWithRequestBuilder(cRALoansRegisterRequest: CRALoansRegisterRequest) -> RequestBuilder<CraLoansRegisterResponse> {
        let localVariablePath = "/cra/loans/register"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: cRALoansRegisterRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CraLoansRegisterResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Unregister a list of loans.
     
     - parameter craLoansUnregisterRequest: (body)  
     - returns: CraLoanUnregisterResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func craLoansUnregister(craLoansUnregisterRequest: CraLoansUnregisterRequest) async throws -> CraLoanUnregisterResponse {
        return try await craLoansUnregisterWithRequestBuilder(craLoansUnregisterRequest: craLoansUnregisterRequest).execute().body
    }

    /**
     Unregister a list of loans.
     - POST /cra/loans/unregister
     - `/cra/loans/unregister` indicates the loans have reached a final status and no further updates are expected.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /none/
}
     - parameter craLoansUnregisterRequest: (body)  
     - returns: RequestBuilder<CraLoanUnregisterResponse> 
     */
    open class func craLoansUnregisterWithRequestBuilder(craLoansUnregisterRequest: CraLoansUnregisterRequest) -> RequestBuilder<CraLoanUnregisterResponse> {
        let localVariablePath = "/cra/loans/unregister"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: craLoansUnregisterRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CraLoanUnregisterResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Updates loan data.
     
     - parameter craLoansUpdateRequest: (body)  
     - returns: CraLoansUpdateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func craLoansUpdate(craLoansUpdateRequest: CraLoansUpdateRequest) async throws -> CraLoansUpdateResponse {
        return try await craLoansUpdateWithRequestBuilder(craLoansUpdateRequest: craLoansUpdateRequest).execute().body
    }

    /**
     Updates loan data.
     - POST /cra/loans/update
     - `/cra/loans/update` updates loan information such as the status and payment history.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /none/
}
     - parameter craLoansUpdateRequest: (body)  
     - returns: RequestBuilder<CraLoansUpdateResponse> 
     */
    open class func craLoansUpdateWithRequestBuilder(craLoansUpdateRequest: CraLoansUpdateRequest) -> RequestBuilder<CraLoansUpdateResponse> {
        let localVariablePath = "/cra/loans/update"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: craLoansUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CraLoansUpdateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve cash flow insights from the bank accounts used for income verification
     
     - parameter craPartnerInsightsGetRequest: (body)  
     - returns: CraPartnerInsightsGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func craPartnerInsightsGet(craPartnerInsightsGetRequest: CraPartnerInsightsGetRequest) async throws -> CraPartnerInsightsGetResponse {
        return try await craPartnerInsightsGetWithRequestBuilder(craPartnerInsightsGetRequest: craPartnerInsightsGetRequest).execute().body
    }

    /**
     Retrieve cash flow insights from the bank accounts used for income verification
     - POST /cra/partner_insights/get
     - `/cra/partner_insights/get` returns cash flow insights for a specified user.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/income/#crapartner_insightsget
}
     - parameter craPartnerInsightsGetRequest: (body)  
     - returns: RequestBuilder<CraPartnerInsightsGetResponse> 
     */
    open class func craPartnerInsightsGetWithRequestBuilder(craPartnerInsightsGetRequest: CraPartnerInsightsGetRequest) -> RequestBuilder<CraPartnerInsightsGetResponse> {
        let localVariablePath = "/cra/partner_insights/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: craPartnerInsightsGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CraPartnerInsightsGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create payment token
     
     - parameter paymentInitiationPaymentTokenCreateRequest: (body)  
     - returns: PaymentInitiationPaymentTokenCreateResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createPaymentToken(paymentInitiationPaymentTokenCreateRequest: PaymentInitiationPaymentTokenCreateRequest) async throws -> PaymentInitiationPaymentTokenCreateResponse {
        return try await createPaymentTokenWithRequestBuilder(paymentInitiationPaymentTokenCreateRequest: paymentInitiationPaymentTokenCreateRequest).execute().body
    }

    /**
     Create payment token
     - POST /payment_initiation/payment/token/create
     - The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /link/maintain-legacy-integration/#creating-a-payment-token
}
     - parameter paymentInitiationPaymentTokenCreateRequest: (body)  
     - returns: RequestBuilder<PaymentInitiationPaymentTokenCreateResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func createPaymentTokenWithRequestBuilder(paymentInitiationPaymentTokenCreateRequest: PaymentInitiationPaymentTokenCreateRequest) -> RequestBuilder<PaymentInitiationPaymentTokenCreateResponse> {
        let localVariablePath = "/payment_initiation/payment/token/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: paymentInitiationPaymentTokenCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaymentInitiationPaymentTokenCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint.
     
     - parameter assetReportFreddieGetRequest: (body)  
     - returns: AssetReportFreddieGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func creditAssetReportFreddieMacGet(assetReportFreddieGetRequest: AssetReportFreddieGetRequest) async throws -> AssetReportFreddieGetResponse {
        return try await creditAssetReportFreddieMacGetWithRequestBuilder(assetReportFreddieGetRequest: assetReportFreddieGetRequest).execute().body
    }

    /**
     Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint.
     - POST /credit/asset_report/freddie_mac/get
     - The `credit/asset_report/freddie_mac/get` endpoint retrieves the Asset Report in Freddie Mac's JSON format.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /none/
}
     - parameter assetReportFreddieGetRequest: (body)  
     - returns: RequestBuilder<AssetReportFreddieGetResponse> 
     */
    open class func creditAssetReportFreddieMacGetWithRequestBuilder(assetReportFreddieGetRequest: AssetReportFreddieGetRequest) -> RequestBuilder<AssetReportFreddieGetResponse> {
        let localVariablePath = "/credit/asset_report/freddie_mac/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: assetReportFreddieGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AssetReportFreddieGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create Asset or Income Report Audit Copy Token
     
     - parameter creditAuditCopyTokenCreateRequest: (body)  
     - returns: CreditAuditCopyTokenCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func creditAuditCopyTokenCreate(creditAuditCopyTokenCreateRequest: CreditAuditCopyTokenCreateRequest) async throws -> CreditAuditCopyTokenCreateResponse {
        return try await creditAuditCopyTokenCreateWithRequestBuilder(creditAuditCopyTokenCreateRequest: creditAuditCopyTokenCreateRequest).execute().body
    }

    /**
     Create Asset or Income Report Audit Copy Token
     - POST /credit/audit_copy_token/create
     - Plaid can create an Audit Copy token of an Asset Report and/or Income Report to share with participating Government Sponsored Entity (GSE). If you participate in the Day 1 Certainty™ program, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).  Use the `/credit/audit_copy_token/create` endpoint to create an `audit_copy_token` and then pass that token to the GSE who needs access.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/income/#creditaudit_copy_tokencreate
}
     - parameter creditAuditCopyTokenCreateRequest: (body)  
     - returns: RequestBuilder<CreditAuditCopyTokenCreateResponse> 
     */
    open class func creditAuditCopyTokenCreateWithRequestBuilder(creditAuditCopyTokenCreateRequest: CreditAuditCopyTokenCreateRequest) -> RequestBuilder<CreditAuditCopyTokenCreateResponse> {
        let localVariablePath = "/credit/audit_copy_token/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: creditAuditCopyTokenCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditAuditCopyTokenCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update an Audit Copy Token
     
     - parameter creditAuditCopyTokenUpdateRequest: (body)  
     - returns: CreditAuditCopyTokenUpdateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func creditAuditCopyTokenUpdate(creditAuditCopyTokenUpdateRequest: CreditAuditCopyTokenUpdateRequest) async throws -> CreditAuditCopyTokenUpdateResponse {
        return try await creditAuditCopyTokenUpdateWithRequestBuilder(creditAuditCopyTokenUpdateRequest: creditAuditCopyTokenUpdateRequest).execute().body
    }

    /**
     Update an Audit Copy Token
     - POST /credit/audit_copy_token/update
     - The `/credit/audit_copy_token/update` endpoint updates an existing  Audit Copy Token by adding the report tokens in the `report_tokens` field to the `audit_copy_token`. If the Audit Copy Token already contains a report of a certain type, it will be replaced with the token provided in the `report_tokens` field.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /none/
}
     - parameter creditAuditCopyTokenUpdateRequest: (body)  
     - returns: RequestBuilder<CreditAuditCopyTokenUpdateResponse> 
     */
    open class func creditAuditCopyTokenUpdateWithRequestBuilder(creditAuditCopyTokenUpdateRequest: CreditAuditCopyTokenUpdateRequest) -> RequestBuilder<CreditAuditCopyTokenUpdateResponse> {
        let localVariablePath = "/credit/audit_copy_token/update"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: creditAuditCopyTokenUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditAuditCopyTokenUpdateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve information from the bank accounts used for employment verification
     
     - parameter creditBankEmploymentGetRequest: (body)  
     - returns: CreditBankEmploymentGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func creditBankEmploymentGet(creditBankEmploymentGetRequest: CreditBankEmploymentGetRequest) async throws -> CreditBankEmploymentGetResponse {
        return try await creditBankEmploymentGetWithRequestBuilder(creditBankEmploymentGetRequest: creditBankEmploymentGetRequest).execute().body
    }

    /**
     Retrieve information from the bank accounts used for employment verification
     - POST /beta/credit/v1/bank_employment/get
     - `/credit/bank_employment/get` returns the employment report(s) derived from bank transaction data for a specified user.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/income/#creditbank_employmentget
}
     - parameter creditBankEmploymentGetRequest: (body)  
     - returns: RequestBuilder<CreditBankEmploymentGetResponse> 
     */
    open class func creditBankEmploymentGetWithRequestBuilder(creditBankEmploymentGetRequest: CreditBankEmploymentGetRequest) -> RequestBuilder<CreditBankEmploymentGetResponse> {
        let localVariablePath = "/beta/credit/v1/bank_employment/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: creditBankEmploymentGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditBankEmploymentGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve information from the bank accounts used for income verification
     
     - parameter creditBankIncomeGetRequest: (body)  
     - returns: CreditBankIncomeGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func creditBankIncomeGet(creditBankIncomeGetRequest: CreditBankIncomeGetRequest) async throws -> CreditBankIncomeGetResponse {
        return try await creditBankIncomeGetWithRequestBuilder(creditBankIncomeGetRequest: creditBankIncomeGetRequest).execute().body
    }

    /**
     Retrieve information from the bank accounts used for income verification
     - POST /credit/bank_income/get
     - `/credit/bank_income/get` returns the bank income report(s) for a specified user.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/income/#creditbank_incomeget
}
     - parameter creditBankIncomeGetRequest: (body)  
     - returns: RequestBuilder<CreditBankIncomeGetResponse> 
     */
    open class func creditBankIncomeGetWithRequestBuilder(creditBankIncomeGetRequest: CreditBankIncomeGetRequest) -> RequestBuilder<CreditBankIncomeGetResponse> {
        let localVariablePath = "/credit/bank_income/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: creditBankIncomeGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditBankIncomeGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve information from the bank accounts used for income verification in PDF format
     
     - parameter creditBankIncomePDFGetRequest: (body)  
     - returns: URL
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func creditBankIncomePdfGet(creditBankIncomePDFGetRequest: CreditBankIncomePDFGetRequest) async throws -> URL {
        return try await creditBankIncomePdfGetWithRequestBuilder(creditBankIncomePDFGetRequest: creditBankIncomePDFGetRequest).execute().body
    }

    /**
     Retrieve information from the bank accounts used for income verification in PDF format
     - POST /credit/bank_income/pdf/get
     - `/credit/bank_income/pdf/get` returns the most recent bank income report for a specified user in PDF format.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/income/#creditbank_incomepdfget
}
     - parameter creditBankIncomePDFGetRequest: (body)  
     - returns: RequestBuilder<URL> 
     */
    open class func creditBankIncomePdfGetWithRequestBuilder(creditBankIncomePDFGetRequest: CreditBankIncomePDFGetRequest) -> RequestBuilder<URL> {
        let localVariablePath = "/credit/bank_income/pdf/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: creditBankIncomePDFGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Refresh a user's bank income information
     
     - parameter creditBankIncomeRefreshRequest: (body)  
     - returns: CreditBankIncomeRefreshResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func creditBankIncomeRefresh(creditBankIncomeRefreshRequest: CreditBankIncomeRefreshRequest) async throws -> CreditBankIncomeRefreshResponse {
        return try await creditBankIncomeRefreshWithRequestBuilder(creditBankIncomeRefreshRequest: creditBankIncomeRefreshRequest).execute().body
    }

    /**
     Refresh a user's bank income information
     - POST /credit/bank_income/refresh
     - `/credit/bank_income/refresh` refreshes the bank income report data for a specific user.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/income/#creditbank_incomerefresh
}
     - parameter creditBankIncomeRefreshRequest: (body)  
     - returns: RequestBuilder<CreditBankIncomeRefreshResponse> 
     */
    open class func creditBankIncomeRefreshWithRequestBuilder(creditBankIncomeRefreshRequest: CreditBankIncomeRefreshRequest) -> RequestBuilder<CreditBankIncomeRefreshResponse> {
        let localVariablePath = "/credit/bank_income/refresh"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: creditBankIncomeRefreshRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditBankIncomeRefreshResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Subscribe and unsubscribe to proactive notifications for a user's income profile
     
     - parameter creditBankIncomeWebhookUpdateRequest: (body)  
     - returns: CreditBankIncomeWebhookUpdateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func creditBankIncomeWebhookUpdate(creditBankIncomeWebhookUpdateRequest: CreditBankIncomeWebhookUpdateRequest) async throws -> CreditBankIncomeWebhookUpdateResponse {
        return try await creditBankIncomeWebhookUpdateWithRequestBuilder(creditBankIncomeWebhookUpdateRequest: creditBankIncomeWebhookUpdateRequest).execute().body
    }

    /**
     Subscribe and unsubscribe to proactive notifications for a user's income profile
     - POST /credit/bank_income/webhook/update
     - `/credit/bank_income/webhook/update` allows you to subscribe or unsubscribe a user for income webhook notifications. By default, all users start out unsubscribed.  If a user is subscribed, on significant changes to the user's income profile, you will receive a `BANK_INCOME_REFRESH_UPDATE` webhook, prompting you to refresh bank income data for the user.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/income/#creditbank_incomewebhookupdate
}
     - parameter creditBankIncomeWebhookUpdateRequest: (body)  
     - returns: RequestBuilder<CreditBankIncomeWebhookUpdateResponse> 
     */
    open class func creditBankIncomeWebhookUpdateWithRequestBuilder(creditBankIncomeWebhookUpdateRequest: CreditBankIncomeWebhookUpdateRequest) -> RequestBuilder<CreditBankIncomeWebhookUpdateResponse> {
        let localVariablePath = "/credit/bank_income/webhook/update"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: creditBankIncomeWebhookUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditBankIncomeWebhookUpdateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve data for a user's uploaded bank statements
     
     - parameter creditBankStatementsUploadsGetRequest: (body)  
     - returns: CreditBankStatementsUploadsGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func creditBankStatementsUploadsGet(creditBankStatementsUploadsGetRequest: CreditBankStatementsUploadsGetRequest) async throws -> CreditBankStatementsUploadsGetResponse {
        return try await creditBankStatementsUploadsGetWithRequestBuilder(creditBankStatementsUploadsGetRequest: creditBankStatementsUploadsGetRequest).execute().body
    }

    /**
     Retrieve data for a user's uploaded bank statements
     - POST /credit/bank_statements/uploads/get
     - `/credit/bank_statements/uploads/get` returns parsed data from bank statements uploaded by users as part of the Document Income flow. If your account is not enabled for Document Parsing, contact your account manager to request access.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/income/#creditbank_statementsuploadsget
}
     - parameter creditBankStatementsUploadsGetRequest: (body)  
     - returns: RequestBuilder<CreditBankStatementsUploadsGetResponse> 
     */
    open class func creditBankStatementsUploadsGetWithRequestBuilder(creditBankStatementsUploadsGetRequest: CreditBankStatementsUploadsGetRequest) -> RequestBuilder<CreditBankStatementsUploadsGetResponse> {
        let localVariablePath = "/credit/bank_statements/uploads/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: creditBankStatementsUploadsGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditBankStatementsUploadsGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve a summary of an individual's employment information
     
     - parameter creditEmploymentGetRequest: (body)  
     - returns: CreditEmploymentGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func creditEmploymentGet(creditEmploymentGetRequest: CreditEmploymentGetRequest) async throws -> CreditEmploymentGetResponse {
        return try await creditEmploymentGetWithRequestBuilder(creditEmploymentGetRequest: creditEmploymentGetRequest).execute().body
    }

    /**
     Retrieve a summary of an individual's employment information
     - POST /credit/employment/get
     - `/credit/employment/get` returns a list of items with employment information from a user's payroll provider that was verified by an end user.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/income/#creditemploymentget
}
     - parameter creditEmploymentGetRequest: (body)  
     - returns: RequestBuilder<CreditEmploymentGetResponse> 
     */
    open class func creditEmploymentGetWithRequestBuilder(creditEmploymentGetRequest: CreditEmploymentGetRequest) -> RequestBuilder<CreditEmploymentGetResponse> {
        let localVariablePath = "/credit/employment/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: creditEmploymentGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditEmploymentGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint.
     
     - parameter creditFreddieMacReportsGetRequest: (body)  
     - returns: CreditFreddieMacReportsGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func creditFreddieMacReportsGet(creditFreddieMacReportsGetRequest: CreditFreddieMacReportsGetRequest) async throws -> CreditFreddieMacReportsGetResponse {
        return try await creditFreddieMacReportsGetWithRequestBuilder(creditFreddieMacReportsGetRequest: creditFreddieMacReportsGetRequest).execute().body
    }

    /**
     Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint.
     - POST /credit/freddie_mac/reports/get
     - The `credit/asset_report/freddie_mac/get` endpoint retrieves the Verification of Assets and Verification of Employment reports.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /none/
}
     - parameter creditFreddieMacReportsGetRequest: (body)  
     - returns: RequestBuilder<CreditFreddieMacReportsGetResponse> 
     */
    open class func creditFreddieMacReportsGetWithRequestBuilder(creditFreddieMacReportsGetRequest: CreditFreddieMacReportsGetRequest) -> RequestBuilder<CreditFreddieMacReportsGetResponse> {
        let localVariablePath = "/credit/freddie_mac/reports/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: creditFreddieMacReportsGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditFreddieMacReportsGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve a user's payroll information
     
     - parameter creditPayrollIncomeGetRequest: (body)  
     - returns: CreditPayrollIncomeGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func creditPayrollIncomeGet(creditPayrollIncomeGetRequest: CreditPayrollIncomeGetRequest) async throws -> CreditPayrollIncomeGetResponse {
        return try await creditPayrollIncomeGetWithRequestBuilder(creditPayrollIncomeGetRequest: creditPayrollIncomeGetRequest).execute().body
    }

    /**
     Retrieve a user's payroll information
     - POST /credit/payroll_income/get
     - This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/income/#creditpayroll_incomeget
}
     - parameter creditPayrollIncomeGetRequest: (body)  
     - returns: RequestBuilder<CreditPayrollIncomeGetResponse> 
     */
    open class func creditPayrollIncomeGetWithRequestBuilder(creditPayrollIncomeGetRequest: CreditPayrollIncomeGetRequest) -> RequestBuilder<CreditPayrollIncomeGetResponse> {
        let localVariablePath = "/credit/payroll_income/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: creditPayrollIncomeGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditPayrollIncomeGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update the parsing configuration for a document income verification
     
     - parameter creditPayrollIncomeParsingConfigUpdateRequest: (body)  
     - returns: CreditPayrollIncomeParsingConfigUpdateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func creditPayrollIncomeParsingConfigUpdate(creditPayrollIncomeParsingConfigUpdateRequest: CreditPayrollIncomeParsingConfigUpdateRequest) async throws -> CreditPayrollIncomeParsingConfigUpdateResponse {
        return try await creditPayrollIncomeParsingConfigUpdateWithRequestBuilder(creditPayrollIncomeParsingConfigUpdateRequest: creditPayrollIncomeParsingConfigUpdateRequest).execute().body
    }

    /**
     Update the parsing configuration for a document income verification
     - POST /credit/payroll_income/parsing_config/update
     - `/credit/payroll_income/parsing_config/update` updates the parsing configuration for a document income verification.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/income/#creditpayroll_incomeparsing_configupdate
}
     - parameter creditPayrollIncomeParsingConfigUpdateRequest: (body)  
     - returns: RequestBuilder<CreditPayrollIncomeParsingConfigUpdateResponse> 
     */
    open class func creditPayrollIncomeParsingConfigUpdateWithRequestBuilder(creditPayrollIncomeParsingConfigUpdateRequest: CreditPayrollIncomeParsingConfigUpdateRequest) -> RequestBuilder<CreditPayrollIncomeParsingConfigUpdateResponse> {
        let localVariablePath = "/credit/payroll_income/parsing_config/update"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: creditPayrollIncomeParsingConfigUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditPayrollIncomeParsingConfigUpdateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Check income verification eligibility and optimize conversion
     
     - parameter creditPayrollIncomePrecheckRequest: (body)  
     - returns: CreditPayrollIncomePrecheckResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func creditPayrollIncomePrecheck(creditPayrollIncomePrecheckRequest: CreditPayrollIncomePrecheckRequest) async throws -> CreditPayrollIncomePrecheckResponse {
        return try await creditPayrollIncomePrecheckWithRequestBuilder(creditPayrollIncomePrecheckRequest: creditPayrollIncomePrecheckRequest).execute().body
    }

    /**
     Check income verification eligibility and optimize conversion
     - POST /credit/payroll_income/precheck
     - `/credit/payroll_income/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing `employer` data will increase the chance of receiving a useful result.  When testing in Sandbox, you can control the results by providing special test values in the `employer` and `access_tokens` fields. `employer_good` and `employer_bad` will result in `HIGH` and `LOW` confidence values, respectively. `employer_multi` will result in a `HIGH` confidence with multiple payroll options. Likewise, `access_good` and `access_bad` will result in `HIGH` and `LOW` confidence values, respectively. Any other value for `employer` and `access_tokens` in Sandbox will result in `UNKNOWN` confidence.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/income/#creditpayroll_incomeprecheck
}
     - parameter creditPayrollIncomePrecheckRequest: (body)  
     - returns: RequestBuilder<CreditPayrollIncomePrecheckResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func creditPayrollIncomePrecheckWithRequestBuilder(creditPayrollIncomePrecheckRequest: CreditPayrollIncomePrecheckRequest) -> RequestBuilder<CreditPayrollIncomePrecheckResponse> {
        let localVariablePath = "/credit/payroll_income/precheck"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: creditPayrollIncomePrecheckRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditPayrollIncomePrecheckResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Refresh a digital payroll income verification
     
     - parameter creditPayrollIncomeRefreshRequest: (body)  
     - returns: CreditPayrollIncomeRefreshResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func creditPayrollIncomeRefresh(creditPayrollIncomeRefreshRequest: CreditPayrollIncomeRefreshRequest) async throws -> CreditPayrollIncomeRefreshResponse {
        return try await creditPayrollIncomeRefreshWithRequestBuilder(creditPayrollIncomeRefreshRequest: creditPayrollIncomeRefreshRequest).execute().body
    }

    /**
     Refresh a digital payroll income verification
     - POST /credit/payroll_income/refresh
     - `/credit/payroll_income/refresh` refreshes a given digital payroll income verification.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/income/#creditpayroll_incomerefresh
}
     - parameter creditPayrollIncomeRefreshRequest: (body)  
     - returns: RequestBuilder<CreditPayrollIncomeRefreshResponse> 
     */
    open class func creditPayrollIncomeRefreshWithRequestBuilder(creditPayrollIncomeRefreshRequest: CreditPayrollIncomeRefreshRequest) -> RequestBuilder<CreditPayrollIncomeRefreshResponse> {
        let localVariablePath = "/credit/payroll_income/refresh"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: creditPayrollIncomeRefreshRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditPayrollIncomeRefreshResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve fraud insights for a user's manually uploaded document(s).
     
     - parameter creditPayrollIncomeRiskSignalsGetRequest: (body)  
     - returns: CreditPayrollIncomeRiskSignalsGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func creditPayrollIncomeRiskSignalsGet(creditPayrollIncomeRiskSignalsGetRequest: CreditPayrollIncomeRiskSignalsGetRequest) async throws -> CreditPayrollIncomeRiskSignalsGetResponse {
        return try await creditPayrollIncomeRiskSignalsGetWithRequestBuilder(creditPayrollIncomeRiskSignalsGetRequest: creditPayrollIncomeRiskSignalsGetRequest).execute().body
    }

    /**
     Retrieve fraud insights for a user's manually uploaded document(s).
     - POST /credit/payroll_income/risk_signals/get
     - `/credit/payroll_income/risk_signals/get` can be used as part of the Document Income flow to assess a user-uploaded document for signs of potential fraud or tampering. It returns a risk score for each uploaded document that indicates the likelihood of the document being fraudulent, in addition to details on the individual risk signals contributing to the score.  To trigger risk signal generation for an Item, call `/link/token/create` with `parsing_config` set to include `risk_signals`, or call `/credit/payroll_income/parsing_config/update`. Once risk signal generation has been triggered, `/credit/payroll_income/risk_signals/get` can be called at any time after the `INCOME_VERIFICATION_RISK_SIGNALS` webhook has been fired.  `/credit/payroll_income/risk_signals/get` is offered as an add-on to Document Income and is billed separately. To request access to this endpoint, submit a product access request or contact your Plaid account manager.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/income/#creditpayroll_incomerisk_signalsget
}
     - parameter creditPayrollIncomeRiskSignalsGetRequest: (body)  
     - returns: RequestBuilder<CreditPayrollIncomeRiskSignalsGetResponse> 
     */
    open class func creditPayrollIncomeRiskSignalsGetWithRequestBuilder(creditPayrollIncomeRiskSignalsGetRequest: CreditPayrollIncomeRiskSignalsGetRequest) -> RequestBuilder<CreditPayrollIncomeRiskSignalsGetResponse> {
        let localVariablePath = "/credit/payroll_income/risk_signals/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: creditPayrollIncomeRiskSignalsGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditPayrollIncomeRiskSignalsGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a relay token to share an Asset Report with a partner client
     
     - parameter creditRelayCreateRequest: (body)  
     - returns: CreditRelayCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func creditRelayCreate(creditRelayCreateRequest: CreditRelayCreateRequest) async throws -> CreditRelayCreateResponse {
        return try await creditRelayCreateWithRequestBuilder(creditRelayCreateRequest: creditRelayCreateRequest).execute().body
    }

    /**
     Create a relay token to share an Asset Report with a partner client
     - POST /credit/relay/create
     - Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.  To grant a third party access to an Asset Report, use the `/credit/relay/create` endpoint to create a `relay_token` and then pass that token to your third party. Each third party has its own `secondary_client_id`; for example, `ce5bd328dcd34123456`. You'll need to create a separate `relay_token` for each third party that needs access to the report on your behalf.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/assets/#creditrelaycreate
}
     - parameter creditRelayCreateRequest: (body)  
     - returns: RequestBuilder<CreditRelayCreateResponse> 
     */
    open class func creditRelayCreateWithRequestBuilder(creditRelayCreateRequest: CreditRelayCreateRequest) -> RequestBuilder<CreditRelayCreateResponse> {
        let localVariablePath = "/credit/relay/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: creditRelayCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditRelayCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve the reports associated with a relay token that was shared with you
     
     - parameter creditRelayGetRequest: (body)  
     - returns: AssetReportGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func creditRelayGet(creditRelayGetRequest: CreditRelayGetRequest) async throws -> AssetReportGetResponse {
        return try await creditRelayGetWithRequestBuilder(creditRelayGetRequest: creditRelayGetRequest).execute().body
    }

    /**
     Retrieve the reports associated with a relay token that was shared with you
     - POST /credit/relay/get
     - `/credit/relay/get` allows third parties to receive a report that was shared with them, using a `relay_token` that was created by the report owner.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/assets/#creditrelayget
}
     - parameter creditRelayGetRequest: (body)  
     - returns: RequestBuilder<AssetReportGetResponse> 
     */
    open class func creditRelayGetWithRequestBuilder(creditRelayGetRequest: CreditRelayGetRequest) -> RequestBuilder<AssetReportGetResponse> {
        let localVariablePath = "/credit/relay/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: creditRelayGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AssetReportGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve the pdf reports associated with a relay token that was shared with you (beta)
     
     - parameter creditRelayPDFGetRequest: (body)  
     - returns: URL
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func creditRelayPdfGet(creditRelayPDFGetRequest: CreditRelayPDFGetRequest) async throws -> URL {
        return try await creditRelayPdfGetWithRequestBuilder(creditRelayPDFGetRequest: creditRelayPDFGetRequest).execute().body
    }

    /**
     Retrieve the pdf reports associated with a relay token that was shared with you (beta)
     - POST /credit/relay/pdf/get
     - `/credit/relay/pdf/get` allows third parties to receive a pdf report that was shared with them, using a `relay_token` that was created by the report owner.  The `/credit/relay/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/credit/relay/pdf/get`, you must first create the Asset Report using `/credit/relay/create` and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/credit/relay/pdf/get` is the PDF binary data. The `request_id` is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/assets/#creditrelaypdfget
}
     - parameter creditRelayPDFGetRequest: (body)  
     - returns: RequestBuilder<URL> 
     */
    open class func creditRelayPdfGetWithRequestBuilder(creditRelayPDFGetRequest: CreditRelayPDFGetRequest) -> RequestBuilder<URL> {
        let localVariablePath = "/credit/relay/pdf/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: creditRelayPDFGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Refresh a report of a relay token
     
     - parameter creditRelayRefreshRequest: (body)  
     - returns: CreditRelayRefreshResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func creditRelayRefresh(creditRelayRefreshRequest: CreditRelayRefreshRequest) async throws -> CreditRelayRefreshResponse {
        return try await creditRelayRefreshWithRequestBuilder(creditRelayRefreshRequest: creditRelayRefreshRequest).execute().body
    }

    /**
     Refresh a report of a relay token
     - POST /credit/relay/refresh
     - The `/credit/relay/refresh` endpoint allows third parties to refresh a report that was relayed to them, using a `relay_token` that was created by the report owner. A new report will be created with the original report parameters, but with the most recent data available based on the `days_requested` value of the original report.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/assets/#creditrelayrefresh
}
     - parameter creditRelayRefreshRequest: (body)  
     - returns: RequestBuilder<CreditRelayRefreshResponse> 
     */
    open class func creditRelayRefreshWithRequestBuilder(creditRelayRefreshRequest: CreditRelayRefreshRequest) -> RequestBuilder<CreditRelayRefreshResponse> {
        let localVariablePath = "/credit/relay/refresh"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: creditRelayRefreshRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditRelayRefreshResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Remove relay token
     
     - parameter creditRelayRemoveRequest: (body)  
     - returns: CreditRelayRemoveResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func creditRelayRemove(creditRelayRemoveRequest: CreditRelayRemoveRequest) async throws -> CreditRelayRemoveResponse {
        return try await creditRelayRemoveWithRequestBuilder(creditRelayRemoveRequest: creditRelayRemoveRequest).execute().body
    }

    /**
     Remove relay token
     - POST /credit/relay/remove
     - The `/credit/relay/remove` endpoint allows you to invalidate a `relay_token`. The third party holding the token will no longer be able to access or refresh the reports which the `relay_token` gives access to. The original report, associated Items, and other relay tokens that provide access to the same report are not affected and will remain accessible after removing the given `relay_token`.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/assets/#creditrelayremove
}
     - parameter creditRelayRemoveRequest: (body)  
     - returns: RequestBuilder<CreditRelayRemoveResponse> 
     */
    open class func creditRelayRemoveWithRequestBuilder(creditRelayRemoveRequest: CreditRelayRemoveRequest) -> RequestBuilder<CreditRelayRemoveResponse> {
        let localVariablePath = "/credit/relay/remove"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: creditRelayRemoveRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditRelayRemoveResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Remove an Audit Copy token
     
     - parameter creditAuditCopyTokenRemoveRequest: (body)  
     - returns: CreditAuditCopyTokenRemoveResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func creditReportAuditCopyRemove(creditAuditCopyTokenRemoveRequest: CreditAuditCopyTokenRemoveRequest) async throws -> CreditAuditCopyTokenRemoveResponse {
        return try await creditReportAuditCopyRemoveWithRequestBuilder(creditAuditCopyTokenRemoveRequest: creditAuditCopyTokenRemoveRequest).execute().body
    }

    /**
     Remove an Audit Copy token
     - POST /credit/audit_copy_token/remove
     - The `/credit/audit_copy_token/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/income/#creditaudit_copy_tokenremove
}
     - parameter creditAuditCopyTokenRemoveRequest: (body)  
     - returns: RequestBuilder<CreditAuditCopyTokenRemoveResponse> 
     */
    open class func creditReportAuditCopyRemoveWithRequestBuilder(creditAuditCopyTokenRemoveRequest: CreditAuditCopyTokenRemoveRequest) -> RequestBuilder<CreditAuditCopyTokenRemoveResponse> {
        let localVariablePath = "/credit/audit_copy_token/remove"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: creditAuditCopyTokenRemoveRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditAuditCopyTokenRemoveResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve Link sessions for your user
     
     - parameter creditSessionsGetRequest: (body)  
     - returns: CreditSessionsGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func creditSessionsGet(creditSessionsGetRequest: CreditSessionsGetRequest) async throws -> CreditSessionsGetResponse {
        return try await creditSessionsGetWithRequestBuilder(creditSessionsGetRequest: creditSessionsGetRequest).execute().body
    }

    /**
     Retrieve Link sessions for your user
     - POST /credit/sessions/get
     - This endpoint can be used for your end users after they complete the Link flow. This endpoint returns a list of Link sessions that your user completed, where each session includes the results from the Link flow.  These results include details about the Item that was created and some product related metadata (showing, for example, whether the user finished the bank income verification step).
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/income/#creditsessionsget
}
     - parameter creditSessionsGetRequest: (body)  
     - returns: RequestBuilder<CreditSessionsGetResponse> 
     */
    open class func creditSessionsGetWithRequestBuilder(creditSessionsGetRequest: CreditSessionsGetRequest) -> RequestBuilder<CreditSessionsGetResponse> {
        let localVariablePath = "/credit/sessions/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: creditSessionsGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditSessionsGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve a dashboard user
     
     - parameter dashboardUserGetRequest: (body)  
     - returns: DashboardUserGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func dashboardUserGet(dashboardUserGetRequest: DashboardUserGetRequest) async throws -> DashboardUserGetResponse {
        return try await dashboardUserGetWithRequestBuilder(dashboardUserGetRequest: dashboardUserGetRequest).execute().body
    }

    /**
     Retrieve a dashboard user
     - POST /dashboard_user/get
     - Retrieve information about a dashboard user.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/monitor/#dashboard_userget
}
     - parameter dashboardUserGetRequest: (body)  
     - returns: RequestBuilder<DashboardUserGetResponse> 
     */
    open class func dashboardUserGetWithRequestBuilder(dashboardUserGetRequest: DashboardUserGetRequest) -> RequestBuilder<DashboardUserGetResponse> {
        let localVariablePath = "/dashboard_user/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dashboardUserGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DashboardUserGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List dashboard users
     
     - parameter dashboardUserListRequest: (body)  
     - returns: DashboardUserListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func dashboardUserList(dashboardUserListRequest: DashboardUserListRequest) async throws -> DashboardUserListResponse {
        return try await dashboardUserListWithRequestBuilder(dashboardUserListRequest: dashboardUserListRequest).execute().body
    }

    /**
     List dashboard users
     - POST /dashboard_user/list
     - List all dashboard users associated with your account.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/monitor/#dashboard_userlist
}
     - parameter dashboardUserListRequest: (body)  
     - returns: RequestBuilder<DashboardUserListResponse> 
     */
    open class func dashboardUserListWithRequestBuilder(dashboardUserListRequest: DashboardUserListRequest) -> RequestBuilder<DashboardUserListResponse> {
        let localVariablePath = "/dashboard_user/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dashboardUserListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DashboardUserListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a deposit switch without using Plaid Exchange
     
     - parameter depositSwitchAltCreateRequest: (body)  
     - returns: DepositSwitchAltCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func depositSwitchAltCreate(depositSwitchAltCreateRequest: DepositSwitchAltCreateRequest) async throws -> DepositSwitchAltCreateResponse {
        return try await depositSwitchAltCreateWithRequestBuilder(depositSwitchAltCreateRequest: depositSwitchAltCreateRequest).execute().body
    }

    /**
     Create a deposit switch without using Plaid Exchange
     - POST /deposit_switch/alt/create
     - This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /deposit-switch/reference#deposit_switchaltcreate
}
     - parameter depositSwitchAltCreateRequest: (body)  
     - returns: RequestBuilder<DepositSwitchAltCreateResponse> 
     */
    open class func depositSwitchAltCreateWithRequestBuilder(depositSwitchAltCreateRequest: DepositSwitchAltCreateRequest) -> RequestBuilder<DepositSwitchAltCreateResponse> {
        let localVariablePath = "/deposit_switch/alt/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: depositSwitchAltCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DepositSwitchAltCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a deposit switch
     
     - parameter depositSwitchCreateRequest: (body)  
     - returns: DepositSwitchCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func depositSwitchCreate(depositSwitchCreateRequest: DepositSwitchCreateRequest) async throws -> DepositSwitchCreateResponse {
        return try await depositSwitchCreateWithRequestBuilder(depositSwitchCreateRequest: depositSwitchCreateRequest).execute().body
    }

    /**
     Create a deposit switch
     - POST /deposit_switch/create
     - This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /deposit-switch/reference#deposit_switchcreate
}
     - parameter depositSwitchCreateRequest: (body)  
     - returns: RequestBuilder<DepositSwitchCreateResponse> 
     */
    open class func depositSwitchCreateWithRequestBuilder(depositSwitchCreateRequest: DepositSwitchCreateRequest) -> RequestBuilder<DepositSwitchCreateResponse> {
        let localVariablePath = "/deposit_switch/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: depositSwitchCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DepositSwitchCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve a deposit switch
     
     - parameter depositSwitchGetRequest: (body)  
     - returns: DepositSwitchGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func depositSwitchGet(depositSwitchGetRequest: DepositSwitchGetRequest) async throws -> DepositSwitchGetResponse {
        return try await depositSwitchGetWithRequestBuilder(depositSwitchGetRequest: depositSwitchGetRequest).execute().body
    }

    /**
     Retrieve a deposit switch
     - POST /deposit_switch/get
     - This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user's direct deposit allocation preferences.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /deposit-switch/reference#deposit_switchget
}
     - parameter depositSwitchGetRequest: (body)  
     - returns: RequestBuilder<DepositSwitchGetResponse> 
     */
    open class func depositSwitchGetWithRequestBuilder(depositSwitchGetRequest: DepositSwitchGetRequest) -> RequestBuilder<DepositSwitchGetResponse> {
        let localVariablePath = "/deposit_switch/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: depositSwitchGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DepositSwitchGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a deposit switch token
     
     - parameter depositSwitchTokenCreateRequest: (body)  
     - returns: DepositSwitchTokenCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func depositSwitchTokenCreate(depositSwitchTokenCreateRequest: DepositSwitchTokenCreateRequest) async throws -> DepositSwitchTokenCreateResponse {
        return try await depositSwitchTokenCreateWithRequestBuilder(depositSwitchTokenCreateRequest: depositSwitchTokenCreateRequest).execute().body
    }

    /**
     Create a deposit switch token
     - POST /deposit_switch/token/create
     - In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. 
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /deposit-switch/reference#deposit_switchtokencreate
}
     - parameter depositSwitchTokenCreateRequest: (body)  
     - returns: RequestBuilder<DepositSwitchTokenCreateResponse> 
     */
    open class func depositSwitchTokenCreateWithRequestBuilder(depositSwitchTokenCreateRequest: DepositSwitchTokenCreateRequest) -> RequestBuilder<DepositSwitchTokenCreateResponse> {
        let localVariablePath = "/deposit_switch/token/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: depositSwitchTokenCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DepositSwitchTokenCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Search employer database
     
     - parameter employersSearchRequest: (body)  
     - returns: EmployersSearchResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func employersSearch(employersSearchRequest: EmployersSearchRequest) async throws -> EmployersSearchResponse {
        return try await employersSearchWithRequestBuilder(employersSearchRequest: employersSearchRequest).execute().body
    }

    /**
     Search employer database
     - POST /employers/search
     - `/employers/search` allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user's employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/employers/#employerssearch
}
     - parameter employersSearchRequest: (body)  
     - returns: RequestBuilder<EmployersSearchResponse> 
     */
    open class func employersSearchWithRequestBuilder(employersSearchRequest: EmployersSearchRequest) -> RequestBuilder<EmployersSearchResponse> {
        let localVariablePath = "/employers/search"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: employersSearchRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmployersSearchResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     (Deprecated) Retrieve a summary of an individual's employment information
     
     - parameter employmentVerificationGetRequest: (body)  
     - returns: EmploymentVerificationGetResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func employmentVerificationGet(employmentVerificationGetRequest: EmploymentVerificationGetRequest) async throws -> EmploymentVerificationGetResponse {
        return try await employmentVerificationGetWithRequestBuilder(employmentVerificationGetRequest: employmentVerificationGetRequest).execute().body
    }

    /**
     (Deprecated) Retrieve a summary of an individual's employment information
     - POST /employment/verification/get
     - `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use `/credit/employment/get` instead.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/income/#employmentverificationget
}
     - parameter employmentVerificationGetRequest: (body)  
     - returns: RequestBuilder<EmploymentVerificationGetResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func employmentVerificationGetWithRequestBuilder(employmentVerificationGetRequest: EmploymentVerificationGetRequest) -> RequestBuilder<EmploymentVerificationGetResponse> {
        let localVariablePath = "/employment/verification/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: employmentVerificationGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmploymentVerificationGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Webhook receiver for fdx notifications
     
     - parameter fDXNotification: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func fdxNotifications(fDXNotification: FDXNotification) async throws {
        return try await fdxNotificationsWithRequestBuilder(fDXNotification: fDXNotification).execute().body
    }

    /**
     Webhook receiver for fdx notifications
     - POST /fdx/notifications
     - A generic webhook receiver endpoint for FDX Event Notifications
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/fdx/notifications/#post
}
     - parameter fDXNotification: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func fdxNotificationsWithRequestBuilder(fDXNotification: FDXNotification) -> RequestBuilder<Void> {
        let localVariablePath = "/fdx/notifications"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: fDXNotification)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = PlaidAPIConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Returns uploaded document identity
     
     - parameter identityDocumentsUploadsGetRequest: (body)  
     - returns: IdentityDocumentsUploadsGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func identityDocumentsUploadsGet(identityDocumentsUploadsGetRequest: IdentityDocumentsUploadsGetRequest) async throws -> IdentityDocumentsUploadsGetResponse {
        return try await identityDocumentsUploadsGetWithRequestBuilder(identityDocumentsUploadsGetRequest: identityDocumentsUploadsGetRequest).execute().body
    }

    /**
     Returns uploaded document identity
     - POST /identity/documents/uploads/get
     - Use `/identity/documents/uploads/get` to retrieve document uploaded identity.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: none
}
     - parameter identityDocumentsUploadsGetRequest: (body)  
     - returns: RequestBuilder<IdentityDocumentsUploadsGetResponse> 
     */
    open class func identityDocumentsUploadsGetWithRequestBuilder(identityDocumentsUploadsGetRequest: IdentityDocumentsUploadsGetRequest) -> RequestBuilder<IdentityDocumentsUploadsGetResponse> {
        let localVariablePath = "/identity/documents/uploads/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: identityDocumentsUploadsGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IdentityDocumentsUploadsGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve identity data
     
     - parameter identityGetRequest: (body)  
     - returns: IdentityGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func identityGet(identityGetRequest: IdentityGetRequest) async throws -> IdentityGetResponse {
        return try await identityGetWithRequestBuilder(identityGetRequest: identityGetRequest).execute().body
    }

    /**
     Retrieve identity data
     - POST /identity/get
     - The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/identity/#identityget
}
     - parameter identityGetRequest: (body)  
     - returns: RequestBuilder<IdentityGetResponse> 
     */
    open class func identityGetWithRequestBuilder(identityGetRequest: IdentityGetRequest) -> RequestBuilder<IdentityGetResponse> {
        let localVariablePath = "/identity/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: identityGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IdentityGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve identity match score
     
     - parameter identityMatchRequest: (body)  
     - returns: IdentityMatchResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func identityMatch(identityMatchRequest: IdentityMatchRequest) async throws -> IdentityMatchResponse {
        return try await identityMatchWithRequestBuilder(identityMatchRequest: identityMatchRequest).execute().body
    }

    /**
     Retrieve identity match score
     - POST /identity/match
     - The `/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder's financial institution.  Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.  This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/identity/#identitymatch
}
     - parameter identityMatchRequest: (body)  
     - returns: RequestBuilder<IdentityMatchResponse> 
     */
    open class func identityMatchWithRequestBuilder(identityMatchRequest: IdentityMatchRequest) -> RequestBuilder<IdentityMatchResponse> {
        let localVariablePath = "/identity/match"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: identityMatchRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IdentityMatchResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Refresh identity data
     
     - parameter identityRefreshRequest: (body)  
     - returns: IdentityRefreshResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func identityRefresh(identityRefreshRequest: IdentityRefreshRequest) async throws -> IdentityRefreshResponse {
        return try await identityRefreshWithRequestBuilder(identityRefreshRequest: identityRefreshRequest).execute().body
    }

    /**
     Refresh identity data
     - POST /identity/refresh
     - `/identity/refresh` is an optional endpoint for users of the Identity product. It initiates an on-demand extraction to fetch the most up to date Identity information from the Financial Institution. This on-demand extraction takes place in addition to the periodic extractions that automatically occur for any Identity-enabled Item. If changes to Identity are discovered after calling `/identity/refresh`, Plaid will fire a webhook [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/identity/#default_update).  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/identity/refresh` is offered as an add-on to Identity and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/identity/#identityrefresh
}
     - parameter identityRefreshRequest: (body)  
     - returns: RequestBuilder<IdentityRefreshResponse> 
     */
    open class func identityRefreshWithRequestBuilder(identityRefreshRequest: IdentityRefreshRequest) -> RequestBuilder<IdentityRefreshResponse> {
        let localVariablePath = "/identity/refresh"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: identityRefreshRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IdentityRefreshResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create autofill for an Identity Verification
     
     - parameter identityVerificationAutofillCreateRequest: (body)  
     - returns: IdentityVerificationAutofillCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func identityVerificationAutofillCreate(identityVerificationAutofillCreateRequest: IdentityVerificationAutofillCreateRequest) async throws -> IdentityVerificationAutofillCreateResponse {
        return try await identityVerificationAutofillCreateWithRequestBuilder(identityVerificationAutofillCreateRequest: identityVerificationAutofillCreateRequest).execute().body
    }

    /**
     Create autofill for an Identity Verification
     - POST /identity_verification/autofill/create
     - Try to autofill an Identity Verification based of the provided phone number, date of birth and country of residence.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/identity-verification/#identity_verificationautofillcreate
}
     - parameter identityVerificationAutofillCreateRequest: (body)  
     - returns: RequestBuilder<IdentityVerificationAutofillCreateResponse> 
     */
    open class func identityVerificationAutofillCreateWithRequestBuilder(identityVerificationAutofillCreateRequest: IdentityVerificationAutofillCreateRequest) -> RequestBuilder<IdentityVerificationAutofillCreateResponse> {
        let localVariablePath = "/identity_verification/autofill/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: identityVerificationAutofillCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IdentityVerificationAutofillCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a new Identity Verification
     
     - parameter identityVerificationCreateRequest: (body)  
     - returns: IdentityVerificationCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func identityVerificationCreate(identityVerificationCreateRequest: IdentityVerificationCreateRequest) async throws -> IdentityVerificationCreateResponse {
        return try await identityVerificationCreateWithRequestBuilder(identityVerificationCreateRequest: identityVerificationCreateRequest).execute().body
    }

    /**
     Create a new Identity Verification
     - POST /identity_verification/create
     - Create a new Identity Verification for the user specified by the `client_user_id` field. The requirements and behavior of the verification are determined by the `template_id` provided. If you don't know whether the associated user already has an active Identity Verification, you can specify `\"is_idempotent\": true` in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated `client_user_id` and `template_id`. If an Identity Verification is found, it will be returned unmodified with an `200 OK` HTTP status code.  You can also use this endpoint to supply information you already have collected about the user; if any of these fields are specified, the screens prompting the user to enter them will be skipped during the Link flow. 
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/identity-verification/#identity_verificationcreate
}
     - parameter identityVerificationCreateRequest: (body)  
     - returns: RequestBuilder<IdentityVerificationCreateResponse> 
     */
    open class func identityVerificationCreateWithRequestBuilder(identityVerificationCreateRequest: IdentityVerificationCreateRequest) -> RequestBuilder<IdentityVerificationCreateResponse> {
        let localVariablePath = "/identity_verification/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: identityVerificationCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IdentityVerificationCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve Identity Verification
     
     - parameter identityVerificationGetRequest: (body)  
     - returns: IdentityVerificationGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func identityVerificationGet(identityVerificationGetRequest: IdentityVerificationGetRequest) async throws -> IdentityVerificationGetResponse {
        return try await identityVerificationGetWithRequestBuilder(identityVerificationGetRequest: identityVerificationGetRequest).execute().body
    }

    /**
     Retrieve Identity Verification
     - POST /identity_verification/get
     - Retrieve a previously created Identity Verification.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/identity-verification/#identity_verificationget
}
     - parameter identityVerificationGetRequest: (body)  
     - returns: RequestBuilder<IdentityVerificationGetResponse> 
     */
    open class func identityVerificationGetWithRequestBuilder(identityVerificationGetRequest: IdentityVerificationGetRequest) -> RequestBuilder<IdentityVerificationGetResponse> {
        let localVariablePath = "/identity_verification/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: identityVerificationGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IdentityVerificationGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List Identity Verifications
     
     - parameter identityVerificationListRequest: (body)  
     - returns: IdentityVerificationListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func identityVerificationList(identityVerificationListRequest: IdentityVerificationListRequest) async throws -> IdentityVerificationListResponse {
        return try await identityVerificationListWithRequestBuilder(identityVerificationListRequest: identityVerificationListRequest).execute().body
    }

    /**
     List Identity Verifications
     - POST /identity_verification/list
     - Filter and list Identity Verifications created by your account
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/identity-verification/#identity_verificationlist
}
     - parameter identityVerificationListRequest: (body)  
     - returns: RequestBuilder<IdentityVerificationListResponse> 
     */
    open class func identityVerificationListWithRequestBuilder(identityVerificationListRequest: IdentityVerificationListRequest) -> RequestBuilder<IdentityVerificationListResponse> {
        let localVariablePath = "/identity_verification/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: identityVerificationListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IdentityVerificationListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retry an Identity Verification
     
     - parameter identityVerificationRetryRequest: (body)  
     - returns: IdentityVerificationRetryResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func identityVerificationRetry(identityVerificationRetryRequest: IdentityVerificationRetryRequest) async throws -> IdentityVerificationRetryResponse {
        return try await identityVerificationRetryWithRequestBuilder(identityVerificationRetryRequest: identityVerificationRetryRequest).execute().body
    }

    /**
     Retry an Identity Verification
     - POST /identity_verification/retry
     - Allow a customer to retry their Identity Verification
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/identity-verification/#identity_verificationretry
}
     - parameter identityVerificationRetryRequest: (body)  
     - returns: RequestBuilder<IdentityVerificationRetryResponse> 
     */
    open class func identityVerificationRetryWithRequestBuilder(identityVerificationRetryRequest: IdentityVerificationRetryRequest) -> RequestBuilder<IdentityVerificationRetryResponse> {
        let localVariablePath = "/identity_verification/retry"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: identityVerificationRetryRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IdentityVerificationRetryResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     (Deprecated) Create an income verification instance
     
     - parameter incomeVerificationCreateRequest: (body)  
     - returns: IncomeVerificationCreateResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func incomeVerificationCreate(incomeVerificationCreateRequest: IncomeVerificationCreateRequest) async throws -> IncomeVerificationCreateResponse {
        return try await incomeVerificationCreateWithRequestBuilder(incomeVerificationCreateRequest: incomeVerificationCreateRequest).execute().body
    }

    /**
     (Deprecated) Create an income verification instance
     - POST /income/verification/create
     - `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. 
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/income/#incomeverificationcreate
}
     - parameter incomeVerificationCreateRequest: (body)  
     - returns: RequestBuilder<IncomeVerificationCreateResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func incomeVerificationCreateWithRequestBuilder(incomeVerificationCreateRequest: IncomeVerificationCreateRequest) -> RequestBuilder<IncomeVerificationCreateResponse> {
        let localVariablePath = "/income/verification/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: incomeVerificationCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IncomeVerificationCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     (Deprecated) Download the original documents used for income verification
     
     - parameter incomeVerificationDocumentsDownloadRequest: (body)  
     - returns: URL
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest: IncomeVerificationDocumentsDownloadRequest) async throws -> URL {
        return try await incomeVerificationDocumentsDownloadWithRequestBuilder(incomeVerificationDocumentsDownloadRequest: incomeVerificationDocumentsDownloadRequest).execute().body
    }

    /**
     (Deprecated) Download the original documents used for income verification
     - POST /income/verification/documents/download
     - `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/income/#incomeverificationdocumentsdownload
}
     - parameter incomeVerificationDocumentsDownloadRequest: (body)  
     - returns: RequestBuilder<URL> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func incomeVerificationDocumentsDownloadWithRequestBuilder(incomeVerificationDocumentsDownloadRequest: IncomeVerificationDocumentsDownloadRequest) -> RequestBuilder<URL> {
        let localVariablePath = "/income/verification/documents/download"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: incomeVerificationDocumentsDownloadRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     (Deprecated) Retrieve information from the paystubs used for income verification
     
     - parameter incomeVerificationPaystubsGetRequest: (body)  
     - returns: IncomeVerificationPaystubsGetResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest: IncomeVerificationPaystubsGetRequest) async throws -> IncomeVerificationPaystubsGetResponse {
        return try await incomeVerificationPaystubsGetWithRequestBuilder(incomeVerificationPaystubsGetRequest: incomeVerificationPaystubsGetRequest).execute().body
    }

    /**
     (Deprecated) Retrieve information from the paystubs used for income verification
     - POST /income/verification/paystubs/get
     - `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user's income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/income/#incomeverificationpaystubsget
}
     - parameter incomeVerificationPaystubsGetRequest: (body)  
     - returns: RequestBuilder<IncomeVerificationPaystubsGetResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func incomeVerificationPaystubsGetWithRequestBuilder(incomeVerificationPaystubsGetRequest: IncomeVerificationPaystubsGetRequest) -> RequestBuilder<IncomeVerificationPaystubsGetResponse> {
        let localVariablePath = "/income/verification/paystubs/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: incomeVerificationPaystubsGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IncomeVerificationPaystubsGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     (Deprecated) Check digital income verification eligibility and optimize conversion
     
     - parameter incomeVerificationPrecheckRequest: (body)  
     - returns: IncomeVerificationPrecheckResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func incomeVerificationPrecheck(incomeVerificationPrecheckRequest: IncomeVerificationPrecheckRequest) async throws -> IncomeVerificationPrecheckResponse {
        return try await incomeVerificationPrecheckWithRequestBuilder(incomeVerificationPrecheckRequest: incomeVerificationPrecheckRequest).execute().body
    }

    /**
     (Deprecated) Check digital income verification eligibility and optimize conversion
     - POST /income/verification/precheck
     - `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/precheck` instead.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/income/#incomeverificationprecheck
}
     - parameter incomeVerificationPrecheckRequest: (body)  
     - returns: RequestBuilder<IncomeVerificationPrecheckResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func incomeVerificationPrecheckWithRequestBuilder(incomeVerificationPrecheckRequest: IncomeVerificationPrecheckRequest) -> RequestBuilder<IncomeVerificationPrecheckResponse> {
        let localVariablePath = "/income/verification/precheck"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: incomeVerificationPrecheckRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IncomeVerificationPrecheckResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     (Deprecated) Retrieve information from the tax documents used for income verification
     
     - parameter incomeVerificationTaxformsGetRequest: (body)  
     - returns: IncomeVerificationTaxformsGetResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func incomeVerificationTaxformsGet(incomeVerificationTaxformsGetRequest: IncomeVerificationTaxformsGetRequest) async throws -> IncomeVerificationTaxformsGetResponse {
        return try await incomeVerificationTaxformsGetWithRequestBuilder(incomeVerificationTaxformsGetRequest: incomeVerificationTaxformsGetRequest).execute().body
    }

    /**
     (Deprecated) Retrieve information from the tax documents used for income verification
     - POST /income/verification/taxforms/get
     - `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user''s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/income/#incomeverificationtaxformsget
}
     - parameter incomeVerificationTaxformsGetRequest: (body)  
     - returns: RequestBuilder<IncomeVerificationTaxformsGetResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func incomeVerificationTaxformsGetWithRequestBuilder(incomeVerificationTaxformsGetRequest: IncomeVerificationTaxformsGetRequest) -> RequestBuilder<IncomeVerificationTaxformsGetResponse> {
        let localVariablePath = "/income/verification/taxforms/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: incomeVerificationTaxformsGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IncomeVerificationTaxformsGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get details of all supported institutions
     
     - parameter institutionsGetRequest: (body)  
     - returns: InstitutionsGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func institutionsGet(institutionsGetRequest: InstitutionsGetRequest) async throws -> InstitutionsGetResponse {
        return try await institutionsGetWithRequestBuilder(institutionsGetRequest: institutionsGetRequest).execute().body
    }

    /**
     Get details of all supported institutions
     - POST /institutions/get
     - Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/institutions/#institutionsget
}
     - parameter institutionsGetRequest: (body)  
     - returns: RequestBuilder<InstitutionsGetResponse> 
     */
    open class func institutionsGetWithRequestBuilder(institutionsGetRequest: InstitutionsGetRequest) -> RequestBuilder<InstitutionsGetResponse> {
        let localVariablePath = "/institutions/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: institutionsGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InstitutionsGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get details of an institution
     
     - parameter institutionsGetByIdRequest: (body)  
     - returns: InstitutionsGetByIdResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func institutionsGetById(institutionsGetByIdRequest: InstitutionsGetByIdRequest) async throws -> InstitutionsGetByIdResponse {
        return try await institutionsGetByIdWithRequestBuilder(institutionsGetByIdRequest: institutionsGetByIdRequest).execute().body
    }

    /**
     Get details of an institution
     - POST /institutions/get_by_id
     - Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead. 
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/institutions/#institutionsget_by_id
}
     - parameter institutionsGetByIdRequest: (body)  
     - returns: RequestBuilder<InstitutionsGetByIdResponse> 
     */
    open class func institutionsGetByIdWithRequestBuilder(institutionsGetByIdRequest: InstitutionsGetByIdRequest) -> RequestBuilder<InstitutionsGetByIdResponse> {
        let localVariablePath = "/institutions/get_by_id"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: institutionsGetByIdRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InstitutionsGetByIdResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Search institutions
     
     - parameter institutionsSearchRequest: (body)  
     - returns: InstitutionsSearchResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func institutionsSearch(institutionsSearchRequest: InstitutionsSearchRequest) async throws -> InstitutionsSearchResponse {
        return try await institutionsSearchWithRequestBuilder(institutionsSearchRequest: institutionsSearchRequest).execute().body
    }

    /**
     Search institutions
     - POST /institutions/search
     - Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead. 
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/institutions/#institutionssearch
}
     - parameter institutionsSearchRequest: (body)  
     - returns: RequestBuilder<InstitutionsSearchResponse> 
     */
    open class func institutionsSearchWithRequestBuilder(institutionsSearchRequest: InstitutionsSearchRequest) -> RequestBuilder<InstitutionsSearchResponse> {
        let localVariablePath = "/institutions/search"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: institutionsSearchRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InstitutionsSearchResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get data needed to authorize an investments transfer
     
     - parameter investmentsAuthGetRequest: (body)  
     - returns: InvestmentsAuthGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func investmentsAuthGet(investmentsAuthGetRequest: InvestmentsAuthGetRequest) async throws -> InvestmentsAuthGetResponse {
        return try await investmentsAuthGetWithRequestBuilder(investmentsAuthGetRequest: investmentsAuthGetRequest).execute().body
    }

    /**
     Get data needed to authorize an investments transfer
     - POST /investments/auth/get
     - The `/investments/auth/get` endpoint allows developers to receive user-authorized data to facilitate the transfer of holdings
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/investments/#investmentsauth
}
     - parameter investmentsAuthGetRequest: (body)  
     - returns: RequestBuilder<InvestmentsAuthGetResponse> 
     */
    open class func investmentsAuthGetWithRequestBuilder(investmentsAuthGetRequest: InvestmentsAuthGetRequest) -> RequestBuilder<InvestmentsAuthGetResponse> {
        let localVariablePath = "/investments/auth/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: investmentsAuthGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvestmentsAuthGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Investment holdings
     
     - parameter investmentsHoldingsGetRequest: (body)  
     - returns: InvestmentsHoldingsGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func investmentsHoldingsGet(investmentsHoldingsGetRequest: InvestmentsHoldingsGetRequest) async throws -> InvestmentsHoldingsGetResponse {
        return try await investmentsHoldingsGetWithRequestBuilder(investmentsHoldingsGetRequest: investmentsHoldingsGetRequest).execute().body
    }

    /**
     Get Investment holdings
     - POST /investments/holdings/get
     - The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/investments/#investmentsholdingsget
}
     - parameter investmentsHoldingsGetRequest: (body)  
     - returns: RequestBuilder<InvestmentsHoldingsGetResponse> 
     */
    open class func investmentsHoldingsGetWithRequestBuilder(investmentsHoldingsGetRequest: InvestmentsHoldingsGetRequest) -> RequestBuilder<InvestmentsHoldingsGetResponse> {
        let localVariablePath = "/investments/holdings/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: investmentsHoldingsGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvestmentsHoldingsGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Refresh investment data
     
     - parameter investmentsRefreshRequest: (body)  
     - returns: InvestmentsRefreshResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func investmentsRefresh(investmentsRefreshRequest: InvestmentsRefreshRequest) async throws -> InvestmentsRefreshResponse {
        return try await investmentsRefreshWithRequestBuilder(investmentsRefreshRequest: investmentsRefreshRequest).execute().body
    }

    /**
     Refresh investment data
     - POST /investments/refresh
     - `/investments/refresh` is an optional endpoint for users of the Investments product. It initiates an on-demand extraction to fetch the newest investments, holdings and investment transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Investments-enabled Item. If changes to investments are discovered after calling `/investments/refresh`, Plaid will fire webhooks: [`HOLDINGS: DEFAULT_UPDATE`](https://plaid.com/docs/api/products/investments/#holdings-default_update) if any new holdings are detected, and [INVESTMENTS_TRANSACTIONS: DEFAULT_UPDATE](https://plaid.com/docs/api/products/investments/#investments_transactions-default_update) if any new investment transactions are detected. Updated holdings and investment transactions can be fetched by calling `/investments/holdings/get` and `/investments/transactions/get`. \"Note that the `/investments/refresh` endpoint is not supported by all institutions. If called on an Item from an institution that does not support this functionality, it will return a `PRODUCT_NOT_SUPPORTED` error.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/investments/refresh` is offered as an add-on to Investments and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/investments/#investmentsrefresh
}
     - parameter investmentsRefreshRequest: (body)  
     - returns: RequestBuilder<InvestmentsRefreshResponse> 
     */
    open class func investmentsRefreshWithRequestBuilder(investmentsRefreshRequest: InvestmentsRefreshRequest) -> RequestBuilder<InvestmentsRefreshResponse> {
        let localVariablePath = "/investments/refresh"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: investmentsRefreshRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvestmentsRefreshResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get investment transactions
     
     - parameter investmentsTransactionsGetRequest: (body)  
     - returns: InvestmentsTransactionsGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func investmentsTransactionsGet(investmentsTransactionsGetRequest: InvestmentsTransactionsGetRequest) async throws -> InvestmentsTransactionsGetResponse {
        return try await investmentsTransactionsGetWithRequestBuilder(investmentsTransactionsGetRequest: investmentsTransactionsGetRequest).execute().body
    }

    /**
     Get investment transactions
     - POST /investments/transactions/get
     - The `/investments/transactions/get` endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.  Note that Investments does not have a webhook to indicate when initial transaction data has loaded (unless you use the `async_update` option). Instead, if transactions data is not ready when `/investments/transactions/get` is first called, Plaid will wait for the data. For this reason, calling `/investments/transactions/get` immediately after Link may take up to one to two minutes to return.  Data returned by the asynchronous investments extraction flow (when `async_update` is set to true) may not be immediately available to `/investments/transactions/get`. To be alerted when the data is ready to be fetched, listen for the `HISTORICAL_UPDATE` webhook. If no investments history is ready when `/investments/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/investments/#investmentstransactionsget
}
     - parameter investmentsTransactionsGetRequest: (body)  
     - returns: RequestBuilder<InvestmentsTransactionsGetResponse> 
     */
    open class func investmentsTransactionsGetWithRequestBuilder(investmentsTransactionsGetRequest: InvestmentsTransactionsGetRequest) -> RequestBuilder<InvestmentsTransactionsGetResponse> {
        let localVariablePath = "/investments/transactions/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: investmentsTransactionsGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvestmentsTransactionsGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Invalidate access_token
     
     - parameter itemAccessTokenInvalidateRequest: (body)  
     - returns: ItemAccessTokenInvalidateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest: ItemAccessTokenInvalidateRequest) async throws -> ItemAccessTokenInvalidateResponse {
        return try await itemAccessTokenInvalidateWithRequestBuilder(itemAccessTokenInvalidateRequest: itemAccessTokenInvalidateRequest).execute().body
    }

    /**
     Invalidate access_token
     - POST /item/access_token/invalidate
     - By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`. 
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/tokens/#itemaccess_tokeninvalidate
}
     - parameter itemAccessTokenInvalidateRequest: (body)  
     - returns: RequestBuilder<ItemAccessTokenInvalidateResponse> 
     */
    open class func itemAccessTokenInvalidateWithRequestBuilder(itemAccessTokenInvalidateRequest: ItemAccessTokenInvalidateRequest) -> RequestBuilder<ItemAccessTokenInvalidateResponse> {
        let localVariablePath = "/item/access_token/invalidate"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: itemAccessTokenInvalidateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ItemAccessTokenInvalidateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List a historical log of user consent events
     
     - parameter itemActivityListRequest: (body)  
     - returns: ItemActivityListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func itemActivityList(itemActivityListRequest: ItemActivityListRequest) async throws -> ItemActivityListResponse {
        return try await itemActivityListWithRequestBuilder(itemActivityListRequest: itemActivityListRequest).execute().body
    }

    /**
     List a historical log of user consent events
     - POST /item/activity/list
     - List a historical log of user consent events
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - parameter itemActivityListRequest: (body)  
     - returns: RequestBuilder<ItemActivityListResponse> 
     */
    open class func itemActivityListWithRequestBuilder(itemActivityListRequest: ItemActivityListRequest) -> RequestBuilder<ItemActivityListResponse> {
        let localVariablePath = "/item/activity/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: itemActivityListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ItemActivityListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List a user’s connected applications
     
     - parameter itemApplicationListRequest: (body)  
     - returns: ItemApplicationListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func itemApplicationList(itemApplicationListRequest: ItemApplicationListRequest) async throws -> ItemApplicationListResponse {
        return try await itemApplicationListWithRequestBuilder(itemApplicationListRequest: itemApplicationListRequest).execute().body
    }

    /**
     List a user’s connected applications
     - POST /item/application/list
     - List a user’s connected applications
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - parameter itemApplicationListRequest: (body)  
     - returns: RequestBuilder<ItemApplicationListResponse> 
     */
    open class func itemApplicationListWithRequestBuilder(itemApplicationListRequest: ItemApplicationListRequest) -> RequestBuilder<ItemApplicationListResponse> {
        let localVariablePath = "/item/application/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: itemApplicationListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ItemApplicationListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update the scopes of access for a particular application
     
     - parameter itemApplicationScopesUpdateRequest: (body)  
     - returns: ItemApplicationScopesUpdateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest: ItemApplicationScopesUpdateRequest) async throws -> ItemApplicationScopesUpdateResponse {
        return try await itemApplicationScopesUpdateWithRequestBuilder(itemApplicationScopesUpdateRequest: itemApplicationScopesUpdateRequest).execute().body
    }

    /**
     Update the scopes of access for a particular application
     - POST /item/application/scopes/update
     - Enable consumers to update product access on selected accounts for an application.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - parameter itemApplicationScopesUpdateRequest: (body)  
     - returns: RequestBuilder<ItemApplicationScopesUpdateResponse> 
     */
    open class func itemApplicationScopesUpdateWithRequestBuilder(itemApplicationScopesUpdateRequest: ItemApplicationScopesUpdateRequest) -> RequestBuilder<ItemApplicationScopesUpdateResponse> {
        let localVariablePath = "/item/application/scopes/update"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: itemApplicationScopesUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ItemApplicationScopesUpdateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Unlink a user’s connected application
     
     - parameter itemApplicationUnlinkRequest: (body)  
     - returns: ItemApplicationUnlinkResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func itemApplicationUnlink(itemApplicationUnlinkRequest: ItemApplicationUnlinkRequest) async throws -> ItemApplicationUnlinkResponse {
        return try await itemApplicationUnlinkWithRequestBuilder(itemApplicationUnlinkRequest: itemApplicationUnlinkRequest).execute().body
    }

    /**
     Unlink a user’s connected application
     - POST /item/application/unlink
     - Unlink a user’s connected application. On an unlink request, Plaid will immediately revoke the Application’s access to the User’s data.  The User will have to redo the OAuth authentication process in order to restore functionality.  This endpoint only removes ongoing data access permissions, therefore the User will need to reach out to the Application itself in order to disable and delete their account and delete any data that the Application already received (if the Application does not do so by default).  This endpoint should be called in real time as the User is unlinking an Application, and should not be batched in order to ensure that the change is reflected as soon as possible.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: none
}
     - parameter itemApplicationUnlinkRequest: (body)  
     - returns: RequestBuilder<ItemApplicationUnlinkResponse> 
     */
    open class func itemApplicationUnlinkWithRequestBuilder(itemApplicationUnlinkRequest: ItemApplicationUnlinkRequest) -> RequestBuilder<ItemApplicationUnlinkResponse> {
        let localVariablePath = "/item/application/unlink"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: itemApplicationUnlinkRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ItemApplicationUnlinkResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create public token
     
     - parameter itemPublicTokenCreateRequest: (body)  
     - returns: ItemPublicTokenCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func itemCreatePublicToken(itemPublicTokenCreateRequest: ItemPublicTokenCreateRequest) async throws -> ItemPublicTokenCreateResponse {
        return try await itemCreatePublicTokenWithRequestBuilder(itemPublicTokenCreateRequest: itemPublicTokenCreateRequest).execute().body
    }

    /**
     Create public token
     - POST /item/public_token/create
     - Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/tokens/#itempublic_tokencreate
}
     - parameter itemPublicTokenCreateRequest: (body)  
     - returns: RequestBuilder<ItemPublicTokenCreateResponse> 
     */
    open class func itemCreatePublicTokenWithRequestBuilder(itemPublicTokenCreateRequest: ItemPublicTokenCreateRequest) -> RequestBuilder<ItemPublicTokenCreateResponse> {
        let localVariablePath = "/item/public_token/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: itemPublicTokenCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ItemPublicTokenCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve an Item
     
     - parameter itemGetRequest: (body)  
     - returns: ItemGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func itemGet(itemGetRequest: ItemGetRequest) async throws -> ItemGetResponse {
        return try await itemGetWithRequestBuilder(itemGetRequest: itemGetRequest).execute().body
    }

    /**
     Retrieve an Item
     - POST /item/get
     - Returns information about the status of an Item.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/items/#itemget
}
     - parameter itemGetRequest: (body)  
     - returns: RequestBuilder<ItemGetResponse> 
     */
    open class func itemGetWithRequestBuilder(itemGetRequest: ItemGetRequest) -> RequestBuilder<ItemGetResponse> {
        let localVariablePath = "/item/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: itemGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ItemGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Import Item
     
     - parameter itemImportRequest: (body)  
     - returns: ItemImportResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func itemImport(itemImportRequest: ItemImportRequest) async throws -> ItemImportResponse {
        return try await itemImportWithRequestBuilder(itemImportRequest: itemImportRequest).execute().body
    }

    /**
     Import Item
     - POST /item/import
     - `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - parameter itemImportRequest: (body)  
     - returns: RequestBuilder<ItemImportResponse> 
     */
    open class func itemImportWithRequestBuilder(itemImportRequest: ItemImportRequest) -> RequestBuilder<ItemImportResponse> {
        let localVariablePath = "/item/import"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: itemImportRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ItemImportResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Exchange public token for an access token
     
     - parameter itemPublicTokenExchangeRequest: (body)  
     - returns: ItemPublicTokenExchangeResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func itemPublicTokenExchange(itemPublicTokenExchangeRequest: ItemPublicTokenExchangeRequest) async throws -> ItemPublicTokenExchangeResponse {
        return try await itemPublicTokenExchangeWithRequestBuilder(itemPublicTokenExchangeRequest: itemPublicTokenExchangeRequest).execute().body
    }

    /**
     Exchange public token for an access token
     - POST /item/public_token/exchange
     - Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/tokens/#itempublic_tokenexchange
}
     - parameter itemPublicTokenExchangeRequest: (body)  
     - returns: RequestBuilder<ItemPublicTokenExchangeResponse> 
     */
    open class func itemPublicTokenExchangeWithRequestBuilder(itemPublicTokenExchangeRequest: ItemPublicTokenExchangeRequest) -> RequestBuilder<ItemPublicTokenExchangeResponse> {
        let localVariablePath = "/item/public_token/exchange"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: itemPublicTokenExchangeRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ItemPublicTokenExchangeResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Remove an Item
     
     - parameter itemRemoveRequest: (body)  
     - returns: ItemRemoveResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func itemRemove(itemRemoveRequest: ItemRemoveRequest) async throws -> ItemRemoveResponse {
        return try await itemRemoveWithRequestBuilder(itemRemoveRequest: itemRemoveRequest).execute().body
    }

    /**
     Remove an Item
     - POST /item/remove
     - The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.  Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove access to them specifically using the `/asset_report/remove` endpoint.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution's OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/items/#itemremove
}
     - parameter itemRemoveRequest: (body)  
     - returns: RequestBuilder<ItemRemoveResponse> 
     */
    open class func itemRemoveWithRequestBuilder(itemRemoveRequest: ItemRemoveRequest) -> RequestBuilder<ItemRemoveResponse> {
        let localVariablePath = "/item/remove"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: itemRemoveRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ItemRemoveResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update Webhook URL
     
     - parameter itemWebhookUpdateRequest: (body)  
     - returns: ItemWebhookUpdateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func itemWebhookUpdate(itemWebhookUpdateRequest: ItemWebhookUpdateRequest) async throws -> ItemWebhookUpdateResponse {
        return try await itemWebhookUpdateWithRequestBuilder(itemWebhookUpdateRequest: itemWebhookUpdateRequest).execute().body
    }

    /**
     Update Webhook URL
     - POST /item/webhook/update
     - The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/items/#itemwebhookupdate
}
     - parameter itemWebhookUpdateRequest: (body)  
     - returns: RequestBuilder<ItemWebhookUpdateResponse> 
     */
    open class func itemWebhookUpdateWithRequestBuilder(itemWebhookUpdateRequest: ItemWebhookUpdateRequest) -> RequestBuilder<ItemWebhookUpdateResponse> {
        let localVariablePath = "/item/webhook/update"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: itemWebhookUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ItemWebhookUpdateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve Liabilities data
     
     - parameter liabilitiesGetRequest: (body)  
     - returns: LiabilitiesGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func liabilitiesGet(liabilitiesGetRequest: LiabilitiesGetRequest) async throws -> LiabilitiesGetResponse {
        return try await liabilitiesGetWithRequestBuilder(liabilitiesGetRequest: liabilitiesGetRequest).execute().body
    }

    /**
     Retrieve Liabilities data
     - POST /liabilities/get
     - The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/liabilities/#liabilitiesget
}
     - parameter liabilitiesGetRequest: (body)  
     - returns: RequestBuilder<LiabilitiesGetResponse> 
     */
    open class func liabilitiesGetWithRequestBuilder(liabilitiesGetRequest: LiabilitiesGetRequest) -> RequestBuilder<LiabilitiesGetResponse> {
        let localVariablePath = "/liabilities/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: liabilitiesGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LiabilitiesGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create Hosted Link session
     
     - parameter linkDeliveryCreateRequest: (body)  
     - returns: LinkDeliveryCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func linkDeliveryCreate(linkDeliveryCreateRequest: LinkDeliveryCreateRequest) async throws -> LinkDeliveryCreateResponse {
        return try await linkDeliveryCreateWithRequestBuilder(linkDeliveryCreateRequest: linkDeliveryCreateRequest).execute().body
    }

    /**
     Create Hosted Link session
     - POST /link_delivery/create
     - Use the `/link_delivery/create` endpoint to create a Hosted Link session.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /assets/waitlist/hosted-link/
}
     - parameter linkDeliveryCreateRequest: (body)  
     - returns: RequestBuilder<LinkDeliveryCreateResponse> 
     */
    open class func linkDeliveryCreateWithRequestBuilder(linkDeliveryCreateRequest: LinkDeliveryCreateRequest) -> RequestBuilder<LinkDeliveryCreateResponse> {
        let localVariablePath = "/link_delivery/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: linkDeliveryCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LinkDeliveryCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Hosted Link session
     
     - parameter linkDeliveryGetRequest: (body)  
     - returns: LinkDeliveryGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func linkDeliveryGet(linkDeliveryGetRequest: LinkDeliveryGetRequest) async throws -> LinkDeliveryGetResponse {
        return try await linkDeliveryGetWithRequestBuilder(linkDeliveryGetRequest: linkDeliveryGetRequest).execute().body
    }

    /**
     Get Hosted Link session
     - POST /link_delivery/get
     - Use the `/link_delivery/get` endpoint to get the status of a Hosted Link session.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /assets/waitlist/hosted-link/
}
     - parameter linkDeliveryGetRequest: (body)  
     - returns: RequestBuilder<LinkDeliveryGetResponse> 
     */
    open class func linkDeliveryGetWithRequestBuilder(linkDeliveryGetRequest: LinkDeliveryGetRequest) -> RequestBuilder<LinkDeliveryGetResponse> {
        let localVariablePath = "/link_delivery/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: linkDeliveryGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LinkDeliveryGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Exchange the Link Correlation Id for a Link Token
     
     - parameter linkOAuthCorrelationIdExchangeRequest: (body)  
     - returns: LinkOAuthCorrelationIdExchangeResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func linkOauthCorrelationIdExchange(linkOAuthCorrelationIdExchangeRequest: LinkOAuthCorrelationIdExchangeRequest) async throws -> LinkOAuthCorrelationIdExchangeResponse {
        return try await linkOauthCorrelationIdExchangeWithRequestBuilder(linkOAuthCorrelationIdExchangeRequest: linkOAuthCorrelationIdExchangeRequest).execute().body
    }

    /**
     Exchange the Link Correlation Id for a Link Token
     - POST /link/oauth/correlation_id/exchange
     - Exchange an OAuth `link_correlation_id` for the corresponding `link_token`. The `link_correlation_id` is only available for 'payment_initiation' products and is provided to the client via the OAuth `redirect_uri` as a query parameter. The `link_correlation_id` is ephemeral and expires in a brief period, after which it can no longer be exchanged for the 'link_token'.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/oauth/#linkcorrelationid
}
     - parameter linkOAuthCorrelationIdExchangeRequest: (body)  
     - returns: RequestBuilder<LinkOAuthCorrelationIdExchangeResponse> 
     */
    open class func linkOauthCorrelationIdExchangeWithRequestBuilder(linkOAuthCorrelationIdExchangeRequest: LinkOAuthCorrelationIdExchangeRequest) -> RequestBuilder<LinkOAuthCorrelationIdExchangeResponse> {
        let localVariablePath = "/link/oauth/correlation_id/exchange"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: linkOAuthCorrelationIdExchangeRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LinkOAuthCorrelationIdExchangeResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Check profile eligibility
     
     - parameter linkProfileEligibilityCheckRequest: (body)  
     - returns: LinkProfileEligibilityCheckResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func linkProfileEligibilityCheck(linkProfileEligibilityCheckRequest: LinkProfileEligibilityCheckRequest) async throws -> LinkProfileEligibilityCheckResponse {
        return try await linkProfileEligibilityCheckWithRequestBuilder(linkProfileEligibilityCheckRequest: linkProfileEligibilityCheckRequest).execute().body
    }

    /**
     Check profile eligibility
     - POST /link/profile/eligibility/check
     - The `/link/profile/eligibility/check` endpoint can be used to check whether a user with the supplied phone number has a saved profile that satisfies customer-defined eligibility requirements.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/link/#profileeligibilitycheck
}
     - parameter linkProfileEligibilityCheckRequest: (body)  
     - returns: RequestBuilder<LinkProfileEligibilityCheckResponse> 
     */
    open class func linkProfileEligibilityCheckWithRequestBuilder(linkProfileEligibilityCheckRequest: LinkProfileEligibilityCheckRequest) -> RequestBuilder<LinkProfileEligibilityCheckResponse> {
        let localVariablePath = "/link/profile/eligibility/check"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: linkProfileEligibilityCheckRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LinkProfileEligibilityCheckResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create Link Token
     
     - parameter linkTokenCreateRequest: (body)  
     - returns: LinkTokenCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func linkTokenCreate(linkTokenCreateRequest: LinkTokenCreateRequest) async throws -> LinkTokenCreateResponse {
        return try await linkTokenCreateWithRequestBuilder(linkTokenCreateRequest: linkTokenCreateRequest).execute().body
    }

    /**
     Create Link Token
     - POST /link/token/create
     - The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/tokens/#linktokencreate
}
     - parameter linkTokenCreateRequest: (body)  
     - returns: RequestBuilder<LinkTokenCreateResponse> 
     */
    open class func linkTokenCreateWithRequestBuilder(linkTokenCreateRequest: LinkTokenCreateRequest) -> RequestBuilder<LinkTokenCreateResponse> {
        let localVariablePath = "/link/token/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: linkTokenCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LinkTokenCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Link Token
     
     - parameter linkTokenGetRequest: (body)  
     - returns: LinkTokenGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func linkTokenGet(linkTokenGetRequest: LinkTokenGetRequest) async throws -> LinkTokenGetResponse {
        return try await linkTokenGetWithRequestBuilder(linkTokenGetRequest: linkTokenGetRequest).execute().body
    }

    /**
     Get Link Token
     - POST /link/token/get
     - The `/link/token/get` endpoint gets information about a previously-created `link_token` using the `/link/token/create` endpoint. It can be useful for debugging purposes.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/tokens/#linktokenget
}
     - parameter linkTokenGetRequest: (body)  
     - returns: RequestBuilder<LinkTokenGetResponse> 
     */
    open class func linkTokenGetWithRequestBuilder(linkTokenGetRequest: LinkTokenGetRequest) -> RequestBuilder<LinkTokenGetResponse> {
        let localVariablePath = "/link/token/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: linkTokenGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LinkTokenGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Creates a new end customer for a Plaid reseller.
     
     - parameter partnerCustomerCreateRequest: (body)  
     - returns: PartnerCustomerCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func partnerCustomerCreate(partnerCustomerCreateRequest: PartnerCustomerCreateRequest) async throws -> PartnerCustomerCreateResponse {
        return try await partnerCustomerCreateWithRequestBuilder(partnerCustomerCreateRequest: partnerCustomerCreateRequest).execute().body
    }

    /**
     Creates a new end customer for a Plaid reseller.
     - POST /partner/customer/create
     - The `/partner/customer/create` endpoint is used by reseller partners to create end customers.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/partner/#partnercustomercreate
}
     - parameter partnerCustomerCreateRequest: (body)  
     - returns: RequestBuilder<PartnerCustomerCreateResponse> 
     */
    open class func partnerCustomerCreateWithRequestBuilder(partnerCustomerCreateRequest: PartnerCustomerCreateRequest) -> RequestBuilder<PartnerCustomerCreateResponse> {
        let localVariablePath = "/partner/customer/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: partnerCustomerCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PartnerCustomerCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Enables a Plaid reseller's end customer in the Production environment.
     
     - parameter partnerCustomerEnableRequest: (body)  
     - returns: PartnerCustomerEnableResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func partnerCustomerEnable(partnerCustomerEnableRequest: PartnerCustomerEnableRequest) async throws -> PartnerCustomerEnableResponse {
        return try await partnerCustomerEnableWithRequestBuilder(partnerCustomerEnableRequest: partnerCustomerEnableRequest).execute().body
    }

    /**
     Enables a Plaid reseller's end customer in the Production environment.
     - POST /partner/customer/enable
     - The `/partner/customer/enable` endpoint is used by reseller partners to enable an end customer in the Production environment.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/partner/#partnercustomerenable
}
     - parameter partnerCustomerEnableRequest: (body)  
     - returns: RequestBuilder<PartnerCustomerEnableResponse> 
     */
    open class func partnerCustomerEnableWithRequestBuilder(partnerCustomerEnableRequest: PartnerCustomerEnableRequest) -> RequestBuilder<PartnerCustomerEnableResponse> {
        let localVariablePath = "/partner/customer/enable"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: partnerCustomerEnableRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PartnerCustomerEnableResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Returns a Plaid reseller's end customer.
     
     - parameter partnerCustomerGetRequest: (body)  
     - returns: PartnerCustomerGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func partnerCustomerGet(partnerCustomerGetRequest: PartnerCustomerGetRequest) async throws -> PartnerCustomerGetResponse {
        return try await partnerCustomerGetWithRequestBuilder(partnerCustomerGetRequest: partnerCustomerGetRequest).execute().body
    }

    /**
     Returns a Plaid reseller's end customer.
     - POST /partner/customer/get
     - The `/partner/customer/get` endpoint is used by reseller partners to retrieve data about a single end customer.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/partner/#partnercustomerget
}
     - parameter partnerCustomerGetRequest: (body)  
     - returns: RequestBuilder<PartnerCustomerGetResponse> 
     */
    open class func partnerCustomerGetWithRequestBuilder(partnerCustomerGetRequest: PartnerCustomerGetRequest) -> RequestBuilder<PartnerCustomerGetResponse> {
        let localVariablePath = "/partner/customer/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: partnerCustomerGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PartnerCustomerGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Returns OAuth-institution registration information for a given end customer.
     
     - parameter partnerCustomerOAuthInstitutionsGetRequest: (body)  
     - returns: PartnerCustomerOAuthInstitutionsGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func partnerCustomerOauthInstitutionsGet(partnerCustomerOAuthInstitutionsGetRequest: PartnerCustomerOAuthInstitutionsGetRequest) async throws -> PartnerCustomerOAuthInstitutionsGetResponse {
        return try await partnerCustomerOauthInstitutionsGetWithRequestBuilder(partnerCustomerOAuthInstitutionsGetRequest: partnerCustomerOAuthInstitutionsGetRequest).execute().body
    }

    /**
     Returns OAuth-institution registration information for a given end customer.
     - POST /partner/customer/oauth_institutions/get
     - The `/partner/customer/oauth_institutions/get` endpoint is used by reseller partners to retrieve OAuth-institution registration information about a single end customer. To learn how to set up a webhook to listen to status update events, visit the [reseller documentation](https://plaid.com/docs/account/resellers/#enabling-end-customers).
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/partner/#partnercustomeroauth_institutionsget
}
     - parameter partnerCustomerOAuthInstitutionsGetRequest: (body)  
     - returns: RequestBuilder<PartnerCustomerOAuthInstitutionsGetResponse> 
     */
    open class func partnerCustomerOauthInstitutionsGetWithRequestBuilder(partnerCustomerOAuthInstitutionsGetRequest: PartnerCustomerOAuthInstitutionsGetRequest) -> RequestBuilder<PartnerCustomerOAuthInstitutionsGetResponse> {
        let localVariablePath = "/partner/customer/oauth_institutions/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: partnerCustomerOAuthInstitutionsGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PartnerCustomerOAuthInstitutionsGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Removes a Plaid reseller's end customer.
     
     - parameter partnerCustomerRemoveRequest: (body)  
     - returns: PartnerCustomerRemoveResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func partnerCustomerRemove(partnerCustomerRemoveRequest: PartnerCustomerRemoveRequest) async throws -> PartnerCustomerRemoveResponse {
        return try await partnerCustomerRemoveWithRequestBuilder(partnerCustomerRemoveRequest: partnerCustomerRemoveRequest).execute().body
    }

    /**
     Removes a Plaid reseller's end customer.
     - POST /partner/customer/remove
     - The `/partner/customer/remove` endpoint is used by reseller partners to remove an end customer. Removing an end customer will remove it from view in the Plaid Dashboard and deactivate its API keys. This endpoint can only be used to remove an end customer that has not yet been enabled in Production.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/partner/#partnercustomerremove
}
     - parameter partnerCustomerRemoveRequest: (body)  
     - returns: RequestBuilder<PartnerCustomerRemoveResponse> 
     */
    open class func partnerCustomerRemoveWithRequestBuilder(partnerCustomerRemoveRequest: PartnerCustomerRemoveRequest) -> RequestBuilder<PartnerCustomerRemoveResponse> {
        let localVariablePath = "/partner/customer/remove"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: partnerCustomerRemoveRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PartnerCustomerRemoveResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create payment consent
     
     - parameter paymentInitiationConsentCreateRequest: (body)  
     - returns: PaymentInitiationConsentCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func paymentInitiationConsentCreate(paymentInitiationConsentCreateRequest: PaymentInitiationConsentCreateRequest) async throws -> PaymentInitiationConsentCreateResponse {
        return try await paymentInitiationConsentCreateWithRequestBuilder(paymentInitiationConsentCreateRequest: paymentInitiationConsentCreateRequest).execute().body
    }

    /**
     Create payment consent
     - POST /payment_initiation/consent/create
     - The `/payment_initiation/consent/create` endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with `UNAUTHORISED` status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/payment-initiation/#payment_initiationconsentcreate
}
     - parameter paymentInitiationConsentCreateRequest: (body)  
     - returns: RequestBuilder<PaymentInitiationConsentCreateResponse> 
     */
    open class func paymentInitiationConsentCreateWithRequestBuilder(paymentInitiationConsentCreateRequest: PaymentInitiationConsentCreateRequest) -> RequestBuilder<PaymentInitiationConsentCreateResponse> {
        let localVariablePath = "/payment_initiation/consent/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: paymentInitiationConsentCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaymentInitiationConsentCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get payment consent
     
     - parameter paymentInitiationConsentGetRequest: (body)  
     - returns: PaymentInitiationConsentGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func paymentInitiationConsentGet(paymentInitiationConsentGetRequest: PaymentInitiationConsentGetRequest) async throws -> PaymentInitiationConsentGetResponse {
        return try await paymentInitiationConsentGetWithRequestBuilder(paymentInitiationConsentGetRequest: paymentInitiationConsentGetRequest).execute().body
    }

    /**
     Get payment consent
     - POST /payment_initiation/consent/get
     - The `/payment_initiation/consent/get` endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/payment-initiation/#payment_initiationconsentget
}
     - parameter paymentInitiationConsentGetRequest: (body)  
     - returns: RequestBuilder<PaymentInitiationConsentGetResponse> 
     */
    open class func paymentInitiationConsentGetWithRequestBuilder(paymentInitiationConsentGetRequest: PaymentInitiationConsentGetRequest) -> RequestBuilder<PaymentInitiationConsentGetResponse> {
        let localVariablePath = "/payment_initiation/consent/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: paymentInitiationConsentGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaymentInitiationConsentGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Execute a single payment using consent
     
     - parameter paymentInitiationConsentPaymentExecuteRequest: (body)  
     - returns: PaymentInitiationConsentPaymentExecuteResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func paymentInitiationConsentPaymentExecute(paymentInitiationConsentPaymentExecuteRequest: PaymentInitiationConsentPaymentExecuteRequest) async throws -> PaymentInitiationConsentPaymentExecuteResponse {
        return try await paymentInitiationConsentPaymentExecuteWithRequestBuilder(paymentInitiationConsentPaymentExecuteRequest: paymentInitiationConsentPaymentExecuteRequest).execute().body
    }

    /**
     Execute a single payment using consent
     - POST /payment_initiation/consent/payment/execute
     - The `/payment_initiation/consent/payment/execute` endpoint can be used to execute payments using payment consent.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/payment-initiation/#payment_initiationconsentpaymentexecute
}
     - parameter paymentInitiationConsentPaymentExecuteRequest: (body)  
     - returns: RequestBuilder<PaymentInitiationConsentPaymentExecuteResponse> 
     */
    open class func paymentInitiationConsentPaymentExecuteWithRequestBuilder(paymentInitiationConsentPaymentExecuteRequest: PaymentInitiationConsentPaymentExecuteRequest) -> RequestBuilder<PaymentInitiationConsentPaymentExecuteResponse> {
        let localVariablePath = "/payment_initiation/consent/payment/execute"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: paymentInitiationConsentPaymentExecuteRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaymentInitiationConsentPaymentExecuteResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Revoke payment consent
     
     - parameter paymentInitiationConsentRevokeRequest: (body)  
     - returns: PaymentInitiationConsentRevokeResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func paymentInitiationConsentRevoke(paymentInitiationConsentRevokeRequest: PaymentInitiationConsentRevokeRequest) async throws -> PaymentInitiationConsentRevokeResponse {
        return try await paymentInitiationConsentRevokeWithRequestBuilder(paymentInitiationConsentRevokeRequest: paymentInitiationConsentRevokeRequest).execute().body
    }

    /**
     Revoke payment consent
     - POST /payment_initiation/consent/revoke
     - The `/payment_initiation/consent/revoke` endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/payment-initiation/#payment_initiationconsentrevoke
}
     - parameter paymentInitiationConsentRevokeRequest: (body)  
     - returns: RequestBuilder<PaymentInitiationConsentRevokeResponse> 
     */
    open class func paymentInitiationConsentRevokeWithRequestBuilder(paymentInitiationConsentRevokeRequest: PaymentInitiationConsentRevokeRequest) -> RequestBuilder<PaymentInitiationConsentRevokeResponse> {
        let localVariablePath = "/payment_initiation/consent/revoke"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: paymentInitiationConsentRevokeRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaymentInitiationConsentRevokeResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a payment
     
     - parameter paymentInitiationPaymentCreateRequest: (body)  
     - returns: PaymentInitiationPaymentCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest: PaymentInitiationPaymentCreateRequest) async throws -> PaymentInitiationPaymentCreateResponse {
        return try await paymentInitiationPaymentCreateWithRequestBuilder(paymentInitiationPaymentCreateRequest: paymentInitiationPaymentCreateRequest).execute().body
    }

    /**
     Create a payment
     - POST /payment_initiation/payment/create
     - After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR, GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency).  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer, GBP-denominated payments will be sent via the Faster Payments network and for non-Eurozone markets typically via the local payment scheme, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer or other local payment schemes will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency). For details on any payment limits in Production, contact your Plaid Account Manager.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/payment-initiation/#payment_initiationpaymentcreate
}
     - parameter paymentInitiationPaymentCreateRequest: (body)  
     - returns: RequestBuilder<PaymentInitiationPaymentCreateResponse> 
     */
    open class func paymentInitiationPaymentCreateWithRequestBuilder(paymentInitiationPaymentCreateRequest: PaymentInitiationPaymentCreateRequest) -> RequestBuilder<PaymentInitiationPaymentCreateResponse> {
        let localVariablePath = "/payment_initiation/payment/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: paymentInitiationPaymentCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaymentInitiationPaymentCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get payment details
     
     - parameter paymentInitiationPaymentGetRequest: (body)  
     - returns: PaymentInitiationPaymentGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest: PaymentInitiationPaymentGetRequest) async throws -> PaymentInitiationPaymentGetResponse {
        return try await paymentInitiationPaymentGetWithRequestBuilder(paymentInitiationPaymentGetRequest: paymentInitiationPaymentGetRequest).execute().body
    }

    /**
     Get payment details
     - POST /payment_initiation/payment/get
     - The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/payment-initiation/#payment_initiationpaymentget
}
     - parameter paymentInitiationPaymentGetRequest: (body)  
     - returns: RequestBuilder<PaymentInitiationPaymentGetResponse> 
     */
    open class func paymentInitiationPaymentGetWithRequestBuilder(paymentInitiationPaymentGetRequest: PaymentInitiationPaymentGetRequest) -> RequestBuilder<PaymentInitiationPaymentGetResponse> {
        let localVariablePath = "/payment_initiation/payment/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: paymentInitiationPaymentGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaymentInitiationPaymentGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List payments
     
     - parameter paymentInitiationPaymentListRequest: (body)  
     - returns: PaymentInitiationPaymentListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func paymentInitiationPaymentList(paymentInitiationPaymentListRequest: PaymentInitiationPaymentListRequest) async throws -> PaymentInitiationPaymentListResponse {
        return try await paymentInitiationPaymentListWithRequestBuilder(paymentInitiationPaymentListRequest: paymentInitiationPaymentListRequest).execute().body
    }

    /**
     List payments
     - POST /payment_initiation/payment/list
     - The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/payment-initiation/#payment_initiationpaymentlist
}
     - parameter paymentInitiationPaymentListRequest: (body)  
     - returns: RequestBuilder<PaymentInitiationPaymentListResponse> 
     */
    open class func paymentInitiationPaymentListWithRequestBuilder(paymentInitiationPaymentListRequest: PaymentInitiationPaymentListRequest) -> RequestBuilder<PaymentInitiationPaymentListResponse> {
        let localVariablePath = "/payment_initiation/payment/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: paymentInitiationPaymentListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaymentInitiationPaymentListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Reverse an existing payment
     
     - parameter paymentInitiationPaymentReverseRequest: (body)  
     - returns: PaymentInitiationPaymentReverseResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest: PaymentInitiationPaymentReverseRequest) async throws -> PaymentInitiationPaymentReverseResponse {
        return try await paymentInitiationPaymentReverseWithRequestBuilder(paymentInitiationPaymentReverseRequest: paymentInitiationPaymentReverseRequest).execute().body
    }

    /**
     Reverse an existing payment
     - POST /payment_initiation/payment/reverse
     - Reverse a settled payment from a Plaid virtual account.  The original payment must be in a settled state to be refunded. To refund partially, specify the amount as part of the request. If the amount is not specified, the refund amount will be equal to all of the remaining payment amount that has not been refunded yet.  The refund will go back to the source account that initiated the payment. The original payment must have been initiated to a Plaid virtual account so that this account can be used to initiate the refund.  Providing counterparty information such as date of birth and address increases  the likelihood of refund being successful without human intervention. 
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/payment-initiation/#payment_initiationpaymentreverse
}
     - parameter paymentInitiationPaymentReverseRequest: (body)  
     - returns: RequestBuilder<PaymentInitiationPaymentReverseResponse> 
     */
    open class func paymentInitiationPaymentReverseWithRequestBuilder(paymentInitiationPaymentReverseRequest: PaymentInitiationPaymentReverseRequest) -> RequestBuilder<PaymentInitiationPaymentReverseResponse> {
        let localVariablePath = "/payment_initiation/payment/reverse"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: paymentInitiationPaymentReverseRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaymentInitiationPaymentReverseResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create payment recipient
     
     - parameter paymentInitiationRecipientCreateRequest: (body)  
     - returns: PaymentInitiationRecipientCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest: PaymentInitiationRecipientCreateRequest) async throws -> PaymentInitiationRecipientCreateResponse {
        return try await paymentInitiationRecipientCreateWithRequestBuilder(paymentInitiationRecipientCreateRequest: paymentInitiationRecipientCreateRequest).execute().body
    }

    /**
     Create payment recipient
     - POST /payment_initiation/recipient/create
     - Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA) or a non-Eurozone country [supported](https://plaid.com/global) by Plaid. For a standing order (recurring) payment, the recipient must be in the UK.  It is recommended to use `bacs` in the UK and `iban` in EU.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`. 
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/payment-initiation/#payment_initiationrecipientcreate
}
     - parameter paymentInitiationRecipientCreateRequest: (body)  
     - returns: RequestBuilder<PaymentInitiationRecipientCreateResponse> 
     */
    open class func paymentInitiationRecipientCreateWithRequestBuilder(paymentInitiationRecipientCreateRequest: PaymentInitiationRecipientCreateRequest) -> RequestBuilder<PaymentInitiationRecipientCreateResponse> {
        let localVariablePath = "/payment_initiation/recipient/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: paymentInitiationRecipientCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaymentInitiationRecipientCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get payment recipient
     
     - parameter paymentInitiationRecipientGetRequest: (body)  
     - returns: PaymentInitiationRecipientGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest: PaymentInitiationRecipientGetRequest) async throws -> PaymentInitiationRecipientGetResponse {
        return try await paymentInitiationRecipientGetWithRequestBuilder(paymentInitiationRecipientGetRequest: paymentInitiationRecipientGetRequest).execute().body
    }

    /**
     Get payment recipient
     - POST /payment_initiation/recipient/get
     - Get details about a payment recipient you have previously created.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/payment-initiation/#payment_initiationrecipientget
}
     - parameter paymentInitiationRecipientGetRequest: (body)  
     - returns: RequestBuilder<PaymentInitiationRecipientGetResponse> 
     */
    open class func paymentInitiationRecipientGetWithRequestBuilder(paymentInitiationRecipientGetRequest: PaymentInitiationRecipientGetRequest) -> RequestBuilder<PaymentInitiationRecipientGetResponse> {
        let localVariablePath = "/payment_initiation/recipient/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: paymentInitiationRecipientGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaymentInitiationRecipientGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List payment recipients
     
     - parameter paymentInitiationRecipientListRequest: (body)  
     - returns: PaymentInitiationRecipientListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func paymentInitiationRecipientList(paymentInitiationRecipientListRequest: PaymentInitiationRecipientListRequest) async throws -> PaymentInitiationRecipientListResponse {
        return try await paymentInitiationRecipientListWithRequestBuilder(paymentInitiationRecipientListRequest: paymentInitiationRecipientListRequest).execute().body
    }

    /**
     List payment recipients
     - POST /payment_initiation/recipient/list
     - The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/payment-initiation/#payment_initiationrecipientlist
}
     - parameter paymentInitiationRecipientListRequest: (body)  
     - returns: RequestBuilder<PaymentInitiationRecipientListResponse> 
     */
    open class func paymentInitiationRecipientListWithRequestBuilder(paymentInitiationRecipientListRequest: PaymentInitiationRecipientListRequest) -> RequestBuilder<PaymentInitiationRecipientListResponse> {
        let localVariablePath = "/payment_initiation/recipient/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: paymentInitiationRecipientListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaymentInitiationRecipientListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create payment profile
     
     - parameter paymentProfileCreateRequest: (body)  
     - returns: PaymentProfileCreateResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func paymentProfileCreate(paymentProfileCreateRequest: PaymentProfileCreateRequest) async throws -> PaymentProfileCreateResponse {
        return try await paymentProfileCreateWithRequestBuilder(paymentProfileCreateRequest: paymentProfileCreateRequest).execute().body
    }

    /**
     Create payment profile
     - POST /payment_profile/create
     - Use `/payment_profile/create` endpoint to create a new payment profile. To initiate the account linking experience, call `/link/token/create` and provide the `payment_profile_token` in the `transfer.payment_profile_token` field. You can then use the `payment_profile_token` when creating transfers using `/transfer/authorization/create` and `/transfer/create`.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/#payment_profilecreate
}
     - parameter paymentProfileCreateRequest: (body)  
     - returns: RequestBuilder<PaymentProfileCreateResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func paymentProfileCreateWithRequestBuilder(paymentProfileCreateRequest: PaymentProfileCreateRequest) -> RequestBuilder<PaymentProfileCreateResponse> {
        let localVariablePath = "/payment_profile/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: paymentProfileCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaymentProfileCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get payment profile
     
     - parameter paymentProfileGetRequest: (body)  
     - returns: PaymentProfileGetResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func paymentProfileGet(paymentProfileGetRequest: PaymentProfileGetRequest) async throws -> PaymentProfileGetResponse {
        return try await paymentProfileGetWithRequestBuilder(paymentProfileGetRequest: paymentProfileGetRequest).execute().body
    }

    /**
     Get payment profile
     - POST /payment_profile/get
     - Use `/payment_profile/get` endpoint to get the status of a given Payment Profile.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/#payment_profileget
}
     - parameter paymentProfileGetRequest: (body)  
     - returns: RequestBuilder<PaymentProfileGetResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func paymentProfileGetWithRequestBuilder(paymentProfileGetRequest: PaymentProfileGetRequest) -> RequestBuilder<PaymentProfileGetResponse> {
        let localVariablePath = "/payment_profile/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: paymentProfileGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaymentProfileGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Remove payment profile
     
     - parameter paymentProfileRemoveRequest: (body)  
     - returns: PaymentProfileRemoveResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func paymentProfileRemove(paymentProfileRemoveRequest: PaymentProfileRemoveRequest) async throws -> PaymentProfileRemoveResponse {
        return try await paymentProfileRemoveWithRequestBuilder(paymentProfileRemoveRequest: paymentProfileRemoveRequest).execute().body
    }

    /**
     Remove payment profile
     - POST /payment_profile/remove
     - Use the `/payment_profile/remove` endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/#payment_profileremove
}
     - parameter paymentProfileRemoveRequest: (body)  
     - returns: RequestBuilder<PaymentProfileRemoveResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func paymentProfileRemoveWithRequestBuilder(paymentProfileRemoveRequest: PaymentProfileRemoveRequest) -> RequestBuilder<PaymentProfileRemoveResponse> {
        let localVariablePath = "/payment_profile/remove"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: paymentProfileRemoveRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaymentProfileRemoveResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve the account associated with a processor token
     
     - parameter processorAccountGetRequest: (body)  
     - returns: ProcessorAccountGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processorAccountGet(processorAccountGetRequest: ProcessorAccountGetRequest) async throws -> ProcessorAccountGetResponse {
        return try await processorAccountGetWithRequestBuilder(processorAccountGetRequest: processorAccountGetRequest).execute().body
    }

    /**
     Retrieve the account associated with a processor token
     - POST /processor/account/get
     - This endpoint returns the account associated with a given processor token.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, the account balance returned may not be up-to-date; for realtime balance information, use `/processor/balance/get` instead. Note that some information is nullable. 
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/processor-partners/#processoraccountget
}
     - parameter processorAccountGetRequest: (body)  
     - returns: RequestBuilder<ProcessorAccountGetResponse> 
     */
    open class func processorAccountGetWithRequestBuilder(processorAccountGetRequest: ProcessorAccountGetRequest) -> RequestBuilder<ProcessorAccountGetResponse> {
        let localVariablePath = "/processor/account/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: processorAccountGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessorAccountGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create Apex bank account token
     
     - parameter processorApexProcessorTokenCreateRequest: (body)  
     - returns: ProcessorTokenCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest: ProcessorApexProcessorTokenCreateRequest) async throws -> ProcessorTokenCreateResponse {
        return try await processorApexProcessorTokenCreateWithRequestBuilder(processorApexProcessorTokenCreateRequest: processorApexProcessorTokenCreateRequest).execute().body
    }

    /**
     Create Apex bank account token
     - POST /processor/apex/processor_token/create
     - Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /none/
}
     - parameter processorApexProcessorTokenCreateRequest: (body)  
     - returns: RequestBuilder<ProcessorTokenCreateResponse> 
     */
    open class func processorApexProcessorTokenCreateWithRequestBuilder(processorApexProcessorTokenCreateRequest: ProcessorApexProcessorTokenCreateRequest) -> RequestBuilder<ProcessorTokenCreateResponse> {
        let localVariablePath = "/processor/apex/processor_token/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: processorApexProcessorTokenCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessorTokenCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve Auth data
     
     - parameter processorAuthGetRequest: (body)  
     - returns: ProcessorAuthGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processorAuthGet(processorAuthGetRequest: ProcessorAuthGetRequest) async throws -> ProcessorAuthGetResponse {
        return try await processorAuthGetWithRequestBuilder(processorAuthGetRequest: processorAuthGetRequest).execute().body
    }

    /**
     Retrieve Auth data
     - POST /processor/auth/get
     - The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that''s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14). 
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/processor-partners/#processorauthget
}
     - parameter processorAuthGetRequest: (body)  
     - returns: RequestBuilder<ProcessorAuthGetResponse> 
     */
    open class func processorAuthGetWithRequestBuilder(processorAuthGetRequest: ProcessorAuthGetRequest) -> RequestBuilder<ProcessorAuthGetResponse> {
        let localVariablePath = "/processor/auth/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: processorAuthGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessorAuthGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve Balance data
     
     - parameter processorBalanceGetRequest: (body) The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;. 
     - returns: ProcessorBalanceGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processorBalanceGet(processorBalanceGetRequest: ProcessorBalanceGetRequest) async throws -> ProcessorBalanceGetResponse {
        return try await processorBalanceGetWithRequestBuilder(processorBalanceGetRequest: processorBalanceGetRequest).execute().body
    }

    /**
     Retrieve Balance data
     - POST /processor/balance/get
     - The `/processor/balance/get` endpoint returns the real-time balance for each of an Item's accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached. 
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/processor-partners/#processorbalanceget
}
     - parameter processorBalanceGetRequest: (body) The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;. 
     - returns: RequestBuilder<ProcessorBalanceGetResponse> 
     */
    open class func processorBalanceGetWithRequestBuilder(processorBalanceGetRequest: ProcessorBalanceGetRequest) -> RequestBuilder<ProcessorBalanceGetResponse> {
        let localVariablePath = "/processor/balance/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: processorBalanceGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessorBalanceGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a bank transfer as a processor
     
     - parameter processorBankTransferCreateRequest: (body)  
     - returns: ProcessorBankTransferCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processorBankTransferCreate(processorBankTransferCreateRequest: ProcessorBankTransferCreateRequest) async throws -> ProcessorBankTransferCreateResponse {
        return try await processorBankTransferCreateWithRequestBuilder(processorBankTransferCreateRequest: processorBankTransferCreateRequest).execute().body
    }

    /**
     Create a bank transfer as a processor
     - POST /processor/bank_transfer/create
     - Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/processor-partners/#bank_transfercreate
}
     - parameter processorBankTransferCreateRequest: (body)  
     - returns: RequestBuilder<ProcessorBankTransferCreateResponse> 
     */
    open class func processorBankTransferCreateWithRequestBuilder(processorBankTransferCreateRequest: ProcessorBankTransferCreateRequest) -> RequestBuilder<ProcessorBankTransferCreateResponse> {
        let localVariablePath = "/processor/bank_transfer/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: processorBankTransferCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessorBankTransferCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve Identity data
     
     - parameter processorIdentityGetRequest: (body)  
     - returns: ProcessorIdentityGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processorIdentityGet(processorIdentityGetRequest: ProcessorIdentityGetRequest) async throws -> ProcessorIdentityGetResponse {
        return try await processorIdentityGetWithRequestBuilder(processorIdentityGetRequest: processorIdentityGetRequest).execute().body
    }

    /**
     Retrieve Identity data
     - POST /processor/identity/get
     - The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/processor-partners/#processoridentityget
}
     - parameter processorIdentityGetRequest: (body)  
     - returns: RequestBuilder<ProcessorIdentityGetResponse> 
     */
    open class func processorIdentityGetWithRequestBuilder(processorIdentityGetRequest: ProcessorIdentityGetRequest) -> RequestBuilder<ProcessorIdentityGetResponse> {
        let localVariablePath = "/processor/identity/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: processorIdentityGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessorIdentityGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve identity match score
     
     - parameter processorIdentityMatchRequest: (body)  
     - returns: ProcessorIdentityMatchResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processorIdentityMatch(processorIdentityMatchRequest: ProcessorIdentityMatchRequest) async throws -> ProcessorIdentityMatchResponse {
        return try await processorIdentityMatchWithRequestBuilder(processorIdentityMatchRequest: processorIdentityMatchRequest).execute().body
    }

    /**
     Retrieve identity match score
     - POST /processor/identity/match
     - The `/processor/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder's financial institution.  Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.  This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/processor-partners/#processoridentitymatch
}
     - parameter processorIdentityMatchRequest: (body)  
     - returns: RequestBuilder<ProcessorIdentityMatchResponse> 
     */
    open class func processorIdentityMatchWithRequestBuilder(processorIdentityMatchRequest: ProcessorIdentityMatchRequest) -> RequestBuilder<ProcessorIdentityMatchResponse> {
        let localVariablePath = "/processor/identity/match"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: processorIdentityMatchRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessorIdentityMatchResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve Liabilities data
     
     - parameter processorLiabilitiesGetRequest: (body)  
     - returns: ProcessorLiabilitiesGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processorLiabilitiesGet(processorLiabilitiesGetRequest: ProcessorLiabilitiesGetRequest) async throws -> ProcessorLiabilitiesGetResponse {
        return try await processorLiabilitiesGetWithRequestBuilder(processorLiabilitiesGetRequest: processorLiabilitiesGetRequest).execute().body
    }

    /**
     Retrieve Liabilities data
     - POST /processor/liabilities/get
     - The `/processor/liabilities/get` endpoint returns various details about a loan or credit account. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`.  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/processor/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the processor token. This is because Plaid must communicate directly with the institution to retrieve the additional data.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/processor-partners/#processorliabilitiesget
}
     - parameter processorLiabilitiesGetRequest: (body)  
     - returns: RequestBuilder<ProcessorLiabilitiesGetResponse> 
     */
    open class func processorLiabilitiesGetWithRequestBuilder(processorLiabilitiesGetRequest: ProcessorLiabilitiesGetRequest) -> RequestBuilder<ProcessorLiabilitiesGetResponse> {
        let localVariablePath = "/processor/liabilities/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: processorLiabilitiesGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessorLiabilitiesGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Report whether you initiated an ACH transaction
     
     - parameter processorSignalDecisionReportRequest: (body)  
     - returns: ProcessorSignalDecisionReportResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processorSignalDecisionReport(processorSignalDecisionReportRequest: ProcessorSignalDecisionReportRequest) async throws -> ProcessorSignalDecisionReportResponse {
        return try await processorSignalDecisionReportWithRequestBuilder(processorSignalDecisionReportRequest: processorSignalDecisionReportRequest).execute().body
    }

    /**
     Report whether you initiated an ACH transaction
     - POST /processor/signal/decision/report
     - After calling `/processor/signal/evaluate`, call `/processor/signal/decision/report` to report whether the transaction was initiated.  If you are using the [Plaid Transfer product](https://www.plaid.com/docs/transfer) to create transfers, it is not necessary to use this endpoint, as Plaid already knows whether the transfer was initiated.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/processor-partners/#processorsignaldecisionreport
}
     - parameter processorSignalDecisionReportRequest: (body)  
     - returns: RequestBuilder<ProcessorSignalDecisionReportResponse> 
     */
    open class func processorSignalDecisionReportWithRequestBuilder(processorSignalDecisionReportRequest: ProcessorSignalDecisionReportRequest) -> RequestBuilder<ProcessorSignalDecisionReportResponse> {
        let localVariablePath = "/processor/signal/decision/report"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: processorSignalDecisionReportRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessorSignalDecisionReportResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Evaluate a planned ACH transaction
     
     - parameter processorSignalEvaluateRequest: (body)  
     - returns: ProcessorSignalEvaluateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processorSignalEvaluate(processorSignalEvaluateRequest: ProcessorSignalEvaluateRequest) async throws -> ProcessorSignalEvaluateResponse {
        return try await processorSignalEvaluateWithRequestBuilder(processorSignalEvaluateRequest: processorSignalEvaluateRequest).execute().body
    }

    /**
     Evaluate a planned ACH transaction
     - POST /processor/signal/evaluate
     - Use `/processor/signal/evaluate` to evaluate a planned ACH transaction as a processor to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/processor/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to our error documentation on [item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time. To reduce this latency, you can call `/signal/prepare` on the Item before you need to request Signal data.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/processor-partners/#processorsignalevaluate
}
     - parameter processorSignalEvaluateRequest: (body)  
     - returns: RequestBuilder<ProcessorSignalEvaluateResponse> 
     */
    open class func processorSignalEvaluateWithRequestBuilder(processorSignalEvaluateRequest: ProcessorSignalEvaluateRequest) -> RequestBuilder<ProcessorSignalEvaluateResponse> {
        let localVariablePath = "/processor/signal/evaluate"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: processorSignalEvaluateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessorSignalEvaluateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Opt-in a processor token to Signal
     
     - parameter processorSignalPrepareRequest: (body)  
     - returns: ProcessorSignalPrepareResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processorSignalPrepare(processorSignalPrepareRequest: ProcessorSignalPrepareRequest) async throws -> ProcessorSignalPrepareResponse {
        return try await processorSignalPrepareWithRequestBuilder(processorSignalPrepareRequest: processorSignalPrepareRequest).execute().body
    }

    /**
     Opt-in a processor token to Signal
     - POST /processor/signal/prepare
     - When a processor token is not initialized with Signal, call `/processor/signal/prepare` to opt-in that processor token to the Signal data collection process, which will improve the accuracy of the Signal score.  If this endpoint is called with a processor token that is already initialized with Signal, it will return a 200 response and will not modify the processor token.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/processor-partners/#processorsignalprepare
}
     - parameter processorSignalPrepareRequest: (body)  
     - returns: RequestBuilder<ProcessorSignalPrepareResponse> 
     */
    open class func processorSignalPrepareWithRequestBuilder(processorSignalPrepareRequest: ProcessorSignalPrepareRequest) -> RequestBuilder<ProcessorSignalPrepareResponse> {
        let localVariablePath = "/processor/signal/prepare"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: processorSignalPrepareRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessorSignalPrepareResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Report a return for an ACH transaction
     
     - parameter processorSignalReturnReportRequest: (body)  
     - returns: ProcessorSignalReturnReportResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processorSignalReturnReport(processorSignalReturnReportRequest: ProcessorSignalReturnReportRequest) async throws -> ProcessorSignalReturnReportResponse {
        return try await processorSignalReturnReportWithRequestBuilder(processorSignalReturnReportRequest: processorSignalReturnReportRequest).execute().body
    }

    /**
     Report a return for an ACH transaction
     - POST /processor/signal/return/report
     - Call the `/processor/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/processor/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.  If you are using the [Plaid Transfer product](https://www.plaid.com/docs/transfer) to create transfers, it is not necessary to use this endpoint, as Plaid already knows whether the transfer was returned.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/processor-partners/#processorsignalreturnreport
}
     - parameter processorSignalReturnReportRequest: (body)  
     - returns: RequestBuilder<ProcessorSignalReturnReportResponse> 
     */
    open class func processorSignalReturnReportWithRequestBuilder(processorSignalReturnReportRequest: ProcessorSignalReturnReportRequest) -> RequestBuilder<ProcessorSignalReturnReportResponse> {
        let localVariablePath = "/processor/signal/return/report"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: processorSignalReturnReportRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessorSignalReturnReportResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create Stripe bank account token
     
     - parameter processorStripeBankAccountTokenCreateRequest: (body)  
     - returns: ProcessorStripeBankAccountTokenCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest: ProcessorStripeBankAccountTokenCreateRequest) async throws -> ProcessorStripeBankAccountTokenCreateResponse {
        return try await processorStripeBankAccountTokenCreateWithRequestBuilder(processorStripeBankAccountTokenCreateRequest: processorStripeBankAccountTokenCreateRequest).execute().body
    }

    /**
     Create Stripe bank account token
     - POST /processor/stripe/bank_account_token/create
     -  Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).  Note that the Stripe bank account token is a one-time use token. To store bank account information for later use, you can use a Stripe customer object and create an associated bank account from the token, or you can use a Stripe Custom account and create an associated external bank account from the token. This bank account information should work indefinitely, unless the user's bank account information changes or they revoke Plaid's permissions to access their account. Stripe bank account information cannot be modified once the bank account token has been created. If you ever need to change the bank account details used by Stripe for a specific customer, have the user go through Link again and create a new bank account token from the new `access_token`.  Bank account tokens can also be revoked, using `/item/remove`.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/processors/#processorstripebank_account_tokencreate
}
     - parameter processorStripeBankAccountTokenCreateRequest: (body)  
     - returns: RequestBuilder<ProcessorStripeBankAccountTokenCreateResponse> 
     */
    open class func processorStripeBankAccountTokenCreateWithRequestBuilder(processorStripeBankAccountTokenCreateRequest: ProcessorStripeBankAccountTokenCreateRequest) -> RequestBuilder<ProcessorStripeBankAccountTokenCreateResponse> {
        let localVariablePath = "/processor/stripe/bank_account_token/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: processorStripeBankAccountTokenCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessorStripeBankAccountTokenCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create processor token
     
     - parameter processorTokenCreateRequest: (body)  
     - returns: ProcessorTokenCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processorTokenCreate(processorTokenCreateRequest: ProcessorTokenCreateRequest) async throws -> ProcessorTokenCreateResponse {
        return try await processorTokenCreateWithRequestBuilder(processorTokenCreateRequest: processorTokenCreateRequest).execute().body
    }

    /**
     Create processor token
     - POST /processor/token/create
     - Used to create a token suitable for sending to one of Plaid's partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations. Once created, a processor token for a given Item cannot be modified or updated. If the account must be linked to a new or different partner resource, create a new Item by having the user go through the Link flow again; a new processor token can then be created from the new `access_token`. Processor tokens can also be revoked, using `/item/remove`.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/processors/#processortokencreate
}
     - parameter processorTokenCreateRequest: (body)  
     - returns: RequestBuilder<ProcessorTokenCreateResponse> 
     */
    open class func processorTokenCreateWithRequestBuilder(processorTokenCreateRequest: ProcessorTokenCreateRequest) -> RequestBuilder<ProcessorTokenCreateResponse> {
        let localVariablePath = "/processor/token/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: processorTokenCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessorTokenCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a processor token's product permissions
     
     - parameter processorTokenPermissionsGetRequest: (body)  
     - returns: ProcessorTokenPermissionsGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processorTokenPermissionsGet(processorTokenPermissionsGetRequest: ProcessorTokenPermissionsGetRequest) async throws -> ProcessorTokenPermissionsGetResponse {
        return try await processorTokenPermissionsGetWithRequestBuilder(processorTokenPermissionsGetRequest: processorTokenPermissionsGetRequest).execute().body
    }

    /**
     Get a processor token's product permissions
     - POST /processor/token/permissions/get
     - Used to get a processor token's product permissions. The `products` field will be an empty list if the processor can access all available products.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/processors/#processortokenpermissionsget
}
     - parameter processorTokenPermissionsGetRequest: (body)  
     - returns: RequestBuilder<ProcessorTokenPermissionsGetResponse> 
     */
    open class func processorTokenPermissionsGetWithRequestBuilder(processorTokenPermissionsGetRequest: ProcessorTokenPermissionsGetRequest) -> RequestBuilder<ProcessorTokenPermissionsGetResponse> {
        let localVariablePath = "/processor/token/permissions/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: processorTokenPermissionsGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessorTokenPermissionsGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Control a processor's access to products
     
     - parameter processorTokenPermissionsSetRequest: (body)  
     - returns: ProcessorTokenPermissionsSetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processorTokenPermissionsSet(processorTokenPermissionsSetRequest: ProcessorTokenPermissionsSetRequest) async throws -> ProcessorTokenPermissionsSetResponse {
        return try await processorTokenPermissionsSetWithRequestBuilder(processorTokenPermissionsSetRequest: processorTokenPermissionsSetRequest).execute().body
    }

    /**
     Control a processor's access to products
     - POST /processor/token/permissions/set
     - Used to control a processor's access to products on the given processor token. By default, a processor will have access to all available products on the corresponding item. To restrict access to a particular set of products, call this endpoint with the desired products. To restore access to all available products, call this endpoint with an empty list. This endpoint can be called multiple times as your needs and your processor's needs change.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/processors/#processortokenpermissionsset
}
     - parameter processorTokenPermissionsSetRequest: (body)  
     - returns: RequestBuilder<ProcessorTokenPermissionsSetResponse> 
     */
    open class func processorTokenPermissionsSetWithRequestBuilder(processorTokenPermissionsSetRequest: ProcessorTokenPermissionsSetRequest) -> RequestBuilder<ProcessorTokenPermissionsSetResponse> {
        let localVariablePath = "/processor/token/permissions/set"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: processorTokenPermissionsSetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessorTokenPermissionsSetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update a processor token's webhook URL
     
     - parameter processorTokenWebhookUpdateRequest: (body)  
     - returns: ProcessorTokenWebhookUpdateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processorTokenWebhookUpdate(processorTokenWebhookUpdateRequest: ProcessorTokenWebhookUpdateRequest) async throws -> ProcessorTokenWebhookUpdateResponse {
        return try await processorTokenWebhookUpdateWithRequestBuilder(processorTokenWebhookUpdateRequest: processorTokenWebhookUpdateRequest).execute().body
    }

    /**
     Update a processor token's webhook URL
     - POST /processor/token/webhook/update
     - This endpoint allows you, the processor, to update the webhook URL associated with a processor token. This request triggers a `WEBHOOK_UPDATE_ACKNOWLEDGED` webhook to the newly specified webhook URL.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/processor-partners/#processortokenwebhookupdate
}
     - parameter processorTokenWebhookUpdateRequest: (body)  
     - returns: RequestBuilder<ProcessorTokenWebhookUpdateResponse> 
     */
    open class func processorTokenWebhookUpdateWithRequestBuilder(processorTokenWebhookUpdateRequest: ProcessorTokenWebhookUpdateRequest) -> RequestBuilder<ProcessorTokenWebhookUpdateResponse> {
        let localVariablePath = "/processor/token/webhook/update"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: processorTokenWebhookUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessorTokenWebhookUpdateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get transaction data
     
     - parameter processorTransactionsGetRequest: (body)  
     - returns: ProcessorTransactionsGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processorTransactionsGet(processorTransactionsGetRequest: ProcessorTransactionsGetRequest) async throws -> ProcessorTransactionsGetResponse {
        return try await processorTransactionsGetWithRequestBuilder(processorTransactionsGetRequest: processorTransactionsGetRequest).execute().body
    }

    /**
     Get transaction data
     - POST /processor/transactions/get
     - The `/processor/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/processor/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with a processor token, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/processor/transactions/get` will be the data available for the processor token as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, you can use the `/processor/transactions/refresh` endpoint.  Note that data may not be immediately available to `/processor/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/processor/transactions/get`, if it wasn't. If no transaction history is ready when `/processor/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/processor-partners/#processortransactionsget
}
     - parameter processorTransactionsGetRequest: (body)  
     - returns: RequestBuilder<ProcessorTransactionsGetResponse> 
     */
    open class func processorTransactionsGetWithRequestBuilder(processorTransactionsGetRequest: ProcessorTransactionsGetRequest) -> RequestBuilder<ProcessorTransactionsGetResponse> {
        let localVariablePath = "/processor/transactions/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: processorTransactionsGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessorTransactionsGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Fetch recurring transaction streams
     
     - parameter processorTransactionsRecurringGetRequest: (body)  
     - returns: ProcessorTransactionsRecurringGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processorTransactionsRecurringGet(processorTransactionsRecurringGetRequest: ProcessorTransactionsRecurringGetRequest) async throws -> ProcessorTransactionsRecurringGetResponse {
        return try await processorTransactionsRecurringGetWithRequestBuilder(processorTransactionsRecurringGetRequest: processorTransactionsRecurringGetRequest).execute().body
    }

    /**
     Fetch recurring transaction streams
     - POST /processor/transactions/recurring/get
     - The `/processor/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on a processor token that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/processor/transactions/get` or `/processor/transactions/sync`). Once all historical transactions have been fetched, call `/processor/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/processor/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/processor/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/processor/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/processor-partners/#processortransactionsrecurringget
}
     - parameter processorTransactionsRecurringGetRequest: (body)  
     - returns: RequestBuilder<ProcessorTransactionsRecurringGetResponse> 
     */
    open class func processorTransactionsRecurringGetWithRequestBuilder(processorTransactionsRecurringGetRequest: ProcessorTransactionsRecurringGetRequest) -> RequestBuilder<ProcessorTransactionsRecurringGetResponse> {
        let localVariablePath = "/processor/transactions/recurring/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: processorTransactionsRecurringGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessorTransactionsRecurringGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Refresh transaction data
     
     - parameter processorTransactionsRefreshRequest: (body)  
     - returns: ProcessorTransactionsRefreshResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processorTransactionsRefresh(processorTransactionsRefreshRequest: ProcessorTransactionsRefreshRequest) async throws -> ProcessorTransactionsRefreshResponse {
        return try await processorTransactionsRefreshWithRequestBuilder(processorTransactionsRefreshRequest: processorTransactionsRefreshRequest).execute().body
    }

    /**
     Refresh transaction data
     - POST /processor/transactions/refresh
     - `/processor/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for a processor token. This on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Transactions-enabled processor token. If changes to transactions are discovered after calling `/processor/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/processor/transactions/sync` and `/processor/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/processor/transactions/get` or `/processor/transactions/sync`. Note that the `/processor/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on a processor token from that institution.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/processor/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/processor-partners/#processortransactionsrefresh
}
     - parameter processorTransactionsRefreshRequest: (body)  
     - returns: RequestBuilder<ProcessorTransactionsRefreshResponse> 
     */
    open class func processorTransactionsRefreshWithRequestBuilder(processorTransactionsRefreshRequest: ProcessorTransactionsRefreshRequest) -> RequestBuilder<ProcessorTransactionsRefreshResponse> {
        let localVariablePath = "/processor/transactions/refresh"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: processorTransactionsRefreshRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessorTransactionsRefreshResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get incremental transaction updates on a processor token
     
     - parameter processorTransactionsSyncRequest: (body)  
     - returns: ProcessorTransactionsSyncResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processorTransactionsSync(processorTransactionsSyncRequest: ProcessorTransactionsSyncRequest) async throws -> ProcessorTransactionsSyncResponse {
        return try await processorTransactionsSyncWithRequestBuilder(processorTransactionsSyncRequest: processorTransactionsSyncRequest).execute().body
    }

    /**
     Get incremental transaction updates on a processor token
     - POST /processor/transactions/sync
     - This endpoint replaces `/processor/transactions/get` and its associated webhooks for most common use-cases.  The `/processor/transactions/sync` endpoint allows developers to subscribe to all transactions associated with a processor token and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. `/processor/transactions/sync` provides the same functionality as `/processor/transactions/get` and can be used instead of `/processor/transactions/get` to simplify the process of tracking transactions updates.  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/processor/transactions/sync` for a processor token, the endpoint will return all historical transactions data associated with that processor token up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that processor token. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with a processor token, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/processor/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/processor/transactions/sync` fails when retrieving a paginated update, which can occur as a result of the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, `/processor/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, use the `/processor/transactions/refresh` endpoint.  Note that for newly created processor tokens, data may not be immediately available to `/processor/transactions/sync`. Plaid begins preparing transactions data when the corresponding Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/processor-partners/#processortransactionssync
}
     - parameter processorTransactionsSyncRequest: (body)  
     - returns: RequestBuilder<ProcessorTransactionsSyncResponse> 
     */
    open class func processorTransactionsSyncWithRequestBuilder(processorTransactionsSyncRequest: ProcessorTransactionsSyncRequest) -> RequestBuilder<ProcessorTransactionsSyncResponse> {
        let localVariablePath = "/processor/transactions/sync"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: processorTransactionsSyncRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessorTransactionsSyncResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve a Profile
     
     - parameter profileGetRequest: (body)  
     - returns: ProfileGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func profileGet(profileGetRequest: ProfileGetRequest) async throws -> ProfileGetResponse {
        return try await profileGetWithRequestBuilder(profileGetRequest: profileGetRequest).execute().body
    }

    /**
     Retrieve a Profile
     - POST /profile/get
     - Returns user permissioned profile data including identity and item access tokens.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/profile/#profileget
}
     - parameter profileGetRequest: (body)  
     - returns: RequestBuilder<ProfileGetResponse> 
     */
    open class func profileGetWithRequestBuilder(profileGetRequest: ProfileGetRequest) -> RequestBuilder<ProfileGetResponse> {
        let localVariablePath = "/profile/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: profileGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProfileGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Manually fire a bank income webhook in sandbox
     
     - parameter sandboxBankIncomeFireWebhookRequest: (body)  
     - returns: SandboxBankIncomeFireWebhookResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sandboxBankIncomeFireWebhook(sandboxBankIncomeFireWebhookRequest: SandboxBankIncomeFireWebhookRequest) async throws -> SandboxBankIncomeFireWebhookResponse {
        return try await sandboxBankIncomeFireWebhookWithRequestBuilder(sandboxBankIncomeFireWebhookRequest: sandboxBankIncomeFireWebhookRequest).execute().body
    }

    /**
     Manually fire a bank income webhook in sandbox
     - POST /sandbox/bank_income/fire_webhook
     - Use the `/sandbox/bank_income/fire_webhook` endpoint to manually trigger a Bank Income webhook in the Sandbox environment.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/sandbox/#sandboxbankincomefire_webhook
}
     - parameter sandboxBankIncomeFireWebhookRequest: (body)  
     - returns: RequestBuilder<SandboxBankIncomeFireWebhookResponse> 
     */
    open class func sandboxBankIncomeFireWebhookWithRequestBuilder(sandboxBankIncomeFireWebhookRequest: SandboxBankIncomeFireWebhookRequest) -> RequestBuilder<SandboxBankIncomeFireWebhookResponse> {
        let localVariablePath = "/sandbox/bank_income/fire_webhook"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sandboxBankIncomeFireWebhookRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SandboxBankIncomeFireWebhookResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Manually fire a Bank Transfer webhook
     
     - parameter sandboxBankTransferFireWebhookRequest: (body)  
     - returns: SandboxBankTransferFireWebhookResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest: SandboxBankTransferFireWebhookRequest) async throws -> SandboxBankTransferFireWebhookResponse {
        return try await sandboxBankTransferFireWebhookWithRequestBuilder(sandboxBankTransferFireWebhookRequest: sandboxBankTransferFireWebhookRequest).execute().body
    }

    /**
     Manually fire a Bank Transfer webhook
     - POST /sandbox/bank_transfer/fire_webhook
     - Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /bank-transfers/reference/#sandboxbank_transferfire_webhook
}
     - parameter sandboxBankTransferFireWebhookRequest: (body)  
     - returns: RequestBuilder<SandboxBankTransferFireWebhookResponse> 
     */
    open class func sandboxBankTransferFireWebhookWithRequestBuilder(sandboxBankTransferFireWebhookRequest: SandboxBankTransferFireWebhookRequest) -> RequestBuilder<SandboxBankTransferFireWebhookResponse> {
        let localVariablePath = "/sandbox/bank_transfer/fire_webhook"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sandboxBankTransferFireWebhookRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SandboxBankTransferFireWebhookResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Simulate a bank transfer event in Sandbox
     
     - parameter sandboxBankTransferSimulateRequest: (body)  
     - returns: SandboxBankTransferSimulateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest: SandboxBankTransferSimulateRequest) async throws -> SandboxBankTransferSimulateResponse {
        return try await sandboxBankTransferSimulateWithRequestBuilder(sandboxBankTransferSimulateRequest: sandboxBankTransferSimulateRequest).execute().body
    }

    /**
     Simulate a bank transfer event in Sandbox
     - POST /sandbox/bank_transfer/simulate
     - Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /bank-transfers/reference/#sandboxbank_transfersimulate
}
     - parameter sandboxBankTransferSimulateRequest: (body)  
     - returns: RequestBuilder<SandboxBankTransferSimulateResponse> 
     */
    open class func sandboxBankTransferSimulateWithRequestBuilder(sandboxBankTransferSimulateRequest: SandboxBankTransferSimulateRequest) -> RequestBuilder<SandboxBankTransferSimulateResponse> {
        let localVariablePath = "/sandbox/bank_transfer/simulate"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sandboxBankTransferSimulateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SandboxBankTransferSimulateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Manually fire an Income webhook
     
     - parameter sandboxIncomeFireWebhookRequest: (body)  
     - returns: SandboxIncomeFireWebhookResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest: SandboxIncomeFireWebhookRequest) async throws -> SandboxIncomeFireWebhookResponse {
        return try await sandboxIncomeFireWebhookWithRequestBuilder(sandboxIncomeFireWebhookRequest: sandboxIncomeFireWebhookRequest).execute().body
    }

    /**
     Manually fire an Income webhook
     - POST /sandbox/income/fire_webhook
     - Use the `/sandbox/income/fire_webhook` endpoint to manually trigger a Payroll or Document Income webhook in the Sandbox environment.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/sandbox/#sandboxincomefire_webhook
}
     - parameter sandboxIncomeFireWebhookRequest: (body)  
     - returns: RequestBuilder<SandboxIncomeFireWebhookResponse> 
     */
    open class func sandboxIncomeFireWebhookWithRequestBuilder(sandboxIncomeFireWebhookRequest: SandboxIncomeFireWebhookRequest) -> RequestBuilder<SandboxIncomeFireWebhookResponse> {
        let localVariablePath = "/sandbox/income/fire_webhook"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sandboxIncomeFireWebhookRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SandboxIncomeFireWebhookResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Fire a test webhook
     
     - parameter sandboxItemFireWebhookRequest: (body)  
     - returns: SandboxItemFireWebhookResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sandboxItemFireWebhook(sandboxItemFireWebhookRequest: SandboxItemFireWebhookRequest) async throws -> SandboxItemFireWebhookResponse {
        return try await sandboxItemFireWebhookWithRequestBuilder(sandboxItemFireWebhookRequest: sandboxItemFireWebhookRequest).execute().body
    }

    /**
     Fire a test webhook
     - POST /sandbox/item/fire_webhook
     - The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:  `DEFAULT_UPDATE`: Transactions update webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `NEW_ACCOUNTS_AVAILABLE`: Webhook to be fired for a given Sandbox Item created with Account Select v2.  `AUTH_DATA_UPDATE`: Webhook to be fired for a given Sandbox Item created with Auth as an enabled product.  `SMS_MICRODEPOSITS_VERIFICATION`: Fired when a given same day micro-deposit item is verified via SMS verification.  `LOGIN_REPAIRED`: Fired when an Item recovers from the `ITEM_LOGIN_REQUIRED` without the user going through update mode in your app.  `RECURRING_TRANSACTIONS_UPDATE`: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `SYNC_UPDATES_AVAILABLE`: Transactions webhook to be fired for a given Sandbox Item.  If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `PRODUCT_READY`: Assets webhook to be fired when a given asset report has been successfully generated. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `ERROR`: Assets webhook to be fired when asset report generation has failed. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development (except for webhooks of type `TRANSFER`).
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/sandbox/#sandboxitemfire_webhook
}
     - parameter sandboxItemFireWebhookRequest: (body)  
     - returns: RequestBuilder<SandboxItemFireWebhookResponse> 
     */
    open class func sandboxItemFireWebhookWithRequestBuilder(sandboxItemFireWebhookRequest: SandboxItemFireWebhookRequest) -> RequestBuilder<SandboxItemFireWebhookResponse> {
        let localVariablePath = "/sandbox/item/fire_webhook"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sandboxItemFireWebhookRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SandboxItemFireWebhookResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Force a Sandbox Item into an error state
     
     - parameter sandboxItemResetLoginRequest: (body)  
     - returns: SandboxItemResetLoginResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sandboxItemResetLogin(sandboxItemResetLoginRequest: SandboxItemResetLoginRequest) async throws -> SandboxItemResetLoginResponse {
        return try await sandboxItemResetLoginWithRequestBuilder(sandboxItemResetLoginRequest: sandboxItemResetLoginRequest).execute().body
    }

    /**
     Force a Sandbox Item into an error state
     - POST /sandbox/item/reset_login
     - `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link's [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/sandbox/#sandboxitemreset_login
}
     - parameter sandboxItemResetLoginRequest: (body)  
     - returns: RequestBuilder<SandboxItemResetLoginResponse> 
     */
    open class func sandboxItemResetLoginWithRequestBuilder(sandboxItemResetLoginRequest: SandboxItemResetLoginRequest) -> RequestBuilder<SandboxItemResetLoginResponse> {
        let localVariablePath = "/sandbox/item/reset_login"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sandboxItemResetLoginRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SandboxItemResetLoginResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Set verification status for Sandbox account
     
     - parameter sandboxItemSetVerificationStatusRequest: (body)  
     - returns: SandboxItemSetVerificationStatusResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest: SandboxItemSetVerificationStatusRequest) async throws -> SandboxItemSetVerificationStatusResponse {
        return try await sandboxItemSetVerificationStatusWithRequestBuilder(sandboxItemSetVerificationStatusRequest: sandboxItemSetVerificationStatusRequest).execute().body
    }

    /**
     Set verification status for Sandbox account
     - POST /sandbox/item/set_verification_status
     - The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/sandbox/#sandboxitemset_verification_status
}
     - parameter sandboxItemSetVerificationStatusRequest: (body)  
     - returns: RequestBuilder<SandboxItemSetVerificationStatusResponse> 
     */
    open class func sandboxItemSetVerificationStatusWithRequestBuilder(sandboxItemSetVerificationStatusRequest: SandboxItemSetVerificationStatusRequest) -> RequestBuilder<SandboxItemSetVerificationStatusResponse> {
        let localVariablePath = "/sandbox/item/set_verification_status"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sandboxItemSetVerificationStatusRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SandboxItemSetVerificationStatusResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Save the selected accounts when connecting to the Platypus Oauth institution
     
     - parameter sandboxOauthSelectAccountsRequest: (body)  
     - returns: [String: AnyCodable]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest: SandboxOauthSelectAccountsRequest) async throws -> [String: AnyCodable] {
        return try await sandboxOauthSelectAccountsWithRequestBuilder(sandboxOauthSelectAccountsRequest: sandboxOauthSelectAccountsRequest).execute().body
    }

    /**
     Save the selected accounts when connecting to the Platypus Oauth institution
     - POST /sandbox/oauth/select_accounts
     - Save the selected accounts when connecting to the Platypus Oauth institution
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - parameter sandboxOauthSelectAccountsRequest: (body)  
     - returns: RequestBuilder<[String: AnyCodable]> 
     */
    open class func sandboxOauthSelectAccountsWithRequestBuilder(sandboxOauthSelectAccountsRequest: SandboxOauthSelectAccountsRequest) -> RequestBuilder<[String: AnyCodable]> {
        let localVariablePath = "/sandbox/oauth/select_accounts"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sandboxOauthSelectAccountsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String: AnyCodable]>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Reset the login of a Payment Profile
     
     - parameter sandboxPaymentProfileResetLoginRequest: (body)  
     - returns: SandboxPaymentProfileResetLoginResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sandboxPaymentProfileResetLogin(sandboxPaymentProfileResetLoginRequest: SandboxPaymentProfileResetLoginRequest) async throws -> SandboxPaymentProfileResetLoginResponse {
        return try await sandboxPaymentProfileResetLoginWithRequestBuilder(sandboxPaymentProfileResetLoginRequest: sandboxPaymentProfileResetLoginRequest).execute().body
    }

    /**
     Reset the login of a Payment Profile
     - POST /sandbox/payment_profile/reset_login
     - `/sandbox/payment_profile/reset_login/` forces a Payment Profile into a state where the login is no longer valid. This makes it easy to test update mode for Payment Profile in the Sandbox environment.   After calling `/sandbox/payment_profile/reset_login`, calls to the `/transfer/authorization/create` with the Payment Profile will result in a `decision_rationale` `PAYMENT_PROFILE_LOGIN_REQUIRED`. You can then use update mode for Payment Profile to restore it into a good state.   In order to invoke this endpoint, you must first [create a Payment Profile](https://plaid.com/docs/transfer/add-to-app/#create-a-payment-profile-optional) and [go through the Link flow](https://plaid.com/docs/transfer/add-to-app/#create-a-link-token).
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/sandbox/#sandboxpayment_profilereset_login
}
     - parameter sandboxPaymentProfileResetLoginRequest: (body)  
     - returns: RequestBuilder<SandboxPaymentProfileResetLoginResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func sandboxPaymentProfileResetLoginWithRequestBuilder(sandboxPaymentProfileResetLoginRequest: SandboxPaymentProfileResetLoginRequest) -> RequestBuilder<SandboxPaymentProfileResetLoginResponse> {
        let localVariablePath = "/sandbox/payment_profile/reset_login"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sandboxPaymentProfileResetLoginRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SandboxPaymentProfileResetLoginResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a test Item and processor token
     
     - parameter sandboxProcessorTokenCreateRequest: (body)  
     - returns: SandboxProcessorTokenCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest: SandboxProcessorTokenCreateRequest) async throws -> SandboxProcessorTokenCreateResponse {
        return try await sandboxProcessorTokenCreateWithRequestBuilder(sandboxProcessorTokenCreateRequest: sandboxProcessorTokenCreateRequest).execute().body
    }

    /**
     Create a test Item and processor token
     - POST /sandbox/processor_token/create
     - Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/sandbox/#sandboxprocessor_tokencreate
}
     - parameter sandboxProcessorTokenCreateRequest: (body)  
     - returns: RequestBuilder<SandboxProcessorTokenCreateResponse> 
     */
    open class func sandboxProcessorTokenCreateWithRequestBuilder(sandboxProcessorTokenCreateRequest: SandboxProcessorTokenCreateRequest) -> RequestBuilder<SandboxProcessorTokenCreateResponse> {
        let localVariablePath = "/sandbox/processor_token/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sandboxProcessorTokenCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SandboxProcessorTokenCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a test Item
     
     - parameter sandboxPublicTokenCreateRequest: (body)  
     - returns: SandboxPublicTokenCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest: SandboxPublicTokenCreateRequest) async throws -> SandboxPublicTokenCreateResponse {
        return try await sandboxPublicTokenCreateWithRequestBuilder(sandboxPublicTokenCreateRequest: sandboxPublicTokenCreateRequest).execute().body
    }

    /**
     Create a test Item
     - POST /sandbox/public_token/create
     - Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/sandbox/#sandboxpublic_tokencreate
}
     - parameter sandboxPublicTokenCreateRequest: (body)  
     - returns: RequestBuilder<SandboxPublicTokenCreateResponse> 
     */
    open class func sandboxPublicTokenCreateWithRequestBuilder(sandboxPublicTokenCreateRequest: SandboxPublicTokenCreateRequest) -> RequestBuilder<SandboxPublicTokenCreateResponse> {
        let localVariablePath = "/sandbox/public_token/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sandboxPublicTokenCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SandboxPublicTokenCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Manually fire a Transfer webhook
     
     - parameter sandboxTransferFireWebhookRequest: (body)  
     - returns: SandboxTransferFireWebhookResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sandboxTransferFireWebhook(sandboxTransferFireWebhookRequest: SandboxTransferFireWebhookRequest) async throws -> SandboxTransferFireWebhookResponse {
        return try await sandboxTransferFireWebhookWithRequestBuilder(sandboxTransferFireWebhookRequest: sandboxTransferFireWebhookRequest).execute().body
    }

    /**
     Manually fire a Transfer webhook
     - POST /sandbox/transfer/fire_webhook
     - Use the `/sandbox/transfer/fire_webhook` endpoint to manually trigger a `TRANSFER_EVENTS_UPDATE` webhook in the Sandbox environment.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/sandbox/#sandboxtransferfire_webhook
}
     - parameter sandboxTransferFireWebhookRequest: (body)  
     - returns: RequestBuilder<SandboxTransferFireWebhookResponse> 
     */
    open class func sandboxTransferFireWebhookWithRequestBuilder(sandboxTransferFireWebhookRequest: SandboxTransferFireWebhookRequest) -> RequestBuilder<SandboxTransferFireWebhookResponse> {
        let localVariablePath = "/sandbox/transfer/fire_webhook"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sandboxTransferFireWebhookRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SandboxTransferFireWebhookResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Simulate a ledger deposit event in Sandbox
     
     - parameter sandboxTransferLedgerDepositSimulateRequest: (body)  
     - returns: SandboxTransferLedgerDepositSimulateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sandboxTransferLedgerDepositSimulate(sandboxTransferLedgerDepositSimulateRequest: SandboxTransferLedgerDepositSimulateRequest) async throws -> SandboxTransferLedgerDepositSimulateResponse {
        return try await sandboxTransferLedgerDepositSimulateWithRequestBuilder(sandboxTransferLedgerDepositSimulateRequest: sandboxTransferLedgerDepositSimulateRequest).execute().body
    }

    /**
     Simulate a ledger deposit event in Sandbox
     - POST /sandbox/transfer/ledger/deposit/simulate
     - Use the `/sandbox/transfer/ledger/deposit/simulate` endpoint to simulate a ledger deposit event in the Sandbox environment.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/sandbox/#sandboxtransferledgerdepositsimulate
}
     - parameter sandboxTransferLedgerDepositSimulateRequest: (body)  
     - returns: RequestBuilder<SandboxTransferLedgerDepositSimulateResponse> 
     */
    open class func sandboxTransferLedgerDepositSimulateWithRequestBuilder(sandboxTransferLedgerDepositSimulateRequest: SandboxTransferLedgerDepositSimulateRequest) -> RequestBuilder<SandboxTransferLedgerDepositSimulateResponse> {
        let localVariablePath = "/sandbox/transfer/ledger/deposit/simulate"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sandboxTransferLedgerDepositSimulateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SandboxTransferLedgerDepositSimulateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Simulate converting pending balance to available balance
     
     - parameter sandboxTransferLedgerSimulateAvailableRequest: (body)  
     - returns: SandboxTransferLedgerSimulateAvailableResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sandboxTransferLedgerSimulateAvailable(sandboxTransferLedgerSimulateAvailableRequest: SandboxTransferLedgerSimulateAvailableRequest) async throws -> SandboxTransferLedgerSimulateAvailableResponse {
        return try await sandboxTransferLedgerSimulateAvailableWithRequestBuilder(sandboxTransferLedgerSimulateAvailableRequest: sandboxTransferLedgerSimulateAvailableRequest).execute().body
    }

    /**
     Simulate converting pending balance to available balance
     - POST /sandbox/transfer/ledger/simulate_available
     - Use the `/sandbox/transfer/ledger/simulate_available` endpoint to simulate converting pending balance to available balance for all originators in the Sandbox environment.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/sandbox/#sandboxtransferledgersimulate_available
}
     - parameter sandboxTransferLedgerSimulateAvailableRequest: (body)  
     - returns: RequestBuilder<SandboxTransferLedgerSimulateAvailableResponse> 
     */
    open class func sandboxTransferLedgerSimulateAvailableWithRequestBuilder(sandboxTransferLedgerSimulateAvailableRequest: SandboxTransferLedgerSimulateAvailableRequest) -> RequestBuilder<SandboxTransferLedgerSimulateAvailableResponse> {
        let localVariablePath = "/sandbox/transfer/ledger/simulate_available"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sandboxTransferLedgerSimulateAvailableRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SandboxTransferLedgerSimulateAvailableResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Simulate a ledger withdraw event in Sandbox
     
     - parameter sandboxTransferLedgerWithdrawSimulateRequest: (body)  
     - returns: SandboxTransferLedgerWithdrawSimulateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sandboxTransferLedgerWithdrawSimulate(sandboxTransferLedgerWithdrawSimulateRequest: SandboxTransferLedgerWithdrawSimulateRequest) async throws -> SandboxTransferLedgerWithdrawSimulateResponse {
        return try await sandboxTransferLedgerWithdrawSimulateWithRequestBuilder(sandboxTransferLedgerWithdrawSimulateRequest: sandboxTransferLedgerWithdrawSimulateRequest).execute().body
    }

    /**
     Simulate a ledger withdraw event in Sandbox
     - POST /sandbox/transfer/ledger/withdraw/simulate
     - Use the `/sandbox/transfer/ledger/withdraw/simulate` endpoint to simulate a ledger withdraw event in the Sandbox environment.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/sandbox/#sandboxtransferledgerwithdrawsimulate
}
     - parameter sandboxTransferLedgerWithdrawSimulateRequest: (body)  
     - returns: RequestBuilder<SandboxTransferLedgerWithdrawSimulateResponse> 
     */
    open class func sandboxTransferLedgerWithdrawSimulateWithRequestBuilder(sandboxTransferLedgerWithdrawSimulateRequest: SandboxTransferLedgerWithdrawSimulateRequest) -> RequestBuilder<SandboxTransferLedgerWithdrawSimulateResponse> {
        let localVariablePath = "/sandbox/transfer/ledger/withdraw/simulate"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sandboxTransferLedgerWithdrawSimulateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SandboxTransferLedgerWithdrawSimulateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Simulate a refund event in Sandbox
     
     - parameter sandboxTransferRefundSimulateRequest: (body)  
     - returns: SandboxTransferRefundSimulateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sandboxTransferRefundSimulate(sandboxTransferRefundSimulateRequest: SandboxTransferRefundSimulateRequest) async throws -> SandboxTransferRefundSimulateResponse {
        return try await sandboxTransferRefundSimulateWithRequestBuilder(sandboxTransferRefundSimulateRequest: sandboxTransferRefundSimulateRequest).execute().body
    }

    /**
     Simulate a refund event in Sandbox
     - POST /sandbox/transfer/refund/simulate
     - Use the `/sandbox/transfer/refund/simulate` endpoint to simulate a refund event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/sandbox/#sandboxtransferrefundsimulate
}
     - parameter sandboxTransferRefundSimulateRequest: (body)  
     - returns: RequestBuilder<SandboxTransferRefundSimulateResponse> 
     */
    open class func sandboxTransferRefundSimulateWithRequestBuilder(sandboxTransferRefundSimulateRequest: SandboxTransferRefundSimulateRequest) -> RequestBuilder<SandboxTransferRefundSimulateResponse> {
        let localVariablePath = "/sandbox/transfer/refund/simulate"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sandboxTransferRefundSimulateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SandboxTransferRefundSimulateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Trigger the creation of a repayment
     
     - parameter sandboxTransferRepaymentSimulateRequest: (body)  
     - returns: SandboxTransferRepaymentSimulateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest: SandboxTransferRepaymentSimulateRequest) async throws -> SandboxTransferRepaymentSimulateResponse {
        return try await sandboxTransferRepaymentSimulateWithRequestBuilder(sandboxTransferRepaymentSimulateRequest: sandboxTransferRepaymentSimulateRequest).execute().body
    }

    /**
     Trigger the creation of a repayment
     - POST /sandbox/transfer/repayment/simulate
     - Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/sandbox/#sandboxtransferrepaymentsimulate
}
     - parameter sandboxTransferRepaymentSimulateRequest: (body)  
     - returns: RequestBuilder<SandboxTransferRepaymentSimulateResponse> 
     */
    open class func sandboxTransferRepaymentSimulateWithRequestBuilder(sandboxTransferRepaymentSimulateRequest: SandboxTransferRepaymentSimulateRequest) -> RequestBuilder<SandboxTransferRepaymentSimulateResponse> {
        let localVariablePath = "/sandbox/transfer/repayment/simulate"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sandboxTransferRepaymentSimulateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SandboxTransferRepaymentSimulateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Simulate a transfer event in Sandbox
     
     - parameter sandboxTransferSimulateRequest: (body)  
     - returns: SandboxTransferSimulateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sandboxTransferSimulate(sandboxTransferSimulateRequest: SandboxTransferSimulateRequest) async throws -> SandboxTransferSimulateResponse {
        return try await sandboxTransferSimulateWithRequestBuilder(sandboxTransferSimulateRequest: sandboxTransferSimulateRequest).execute().body
    }

    /**
     Simulate a transfer event in Sandbox
     - POST /sandbox/transfer/simulate
     - Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/sandbox/#sandboxtransfersimulate
}
     - parameter sandboxTransferSimulateRequest: (body)  
     - returns: RequestBuilder<SandboxTransferSimulateResponse> 
     */
    open class func sandboxTransferSimulateWithRequestBuilder(sandboxTransferSimulateRequest: SandboxTransferSimulateRequest) -> RequestBuilder<SandboxTransferSimulateResponse> {
        let localVariablePath = "/sandbox/transfer/simulate"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sandboxTransferSimulateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SandboxTransferSimulateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Simulate creating a sweep
     
     - parameter sandboxTransferSweepSimulateRequest: (body)  
     - returns: SandboxTransferSweepSimulateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest: SandboxTransferSweepSimulateRequest) async throws -> SandboxTransferSweepSimulateResponse {
        return try await sandboxTransferSweepSimulateWithRequestBuilder(sandboxTransferSweepSimulateRequest: sandboxTransferSweepSimulateRequest).execute().body
    }

    /**
     Simulate creating a sweep
     - POST /sandbox/transfer/sweep/simulate
     - Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all transfers with a sweep status of `swept` will become `swept_settled`, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `returned` transfers with a sweep status of `swept` will become `return_swept`.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/sandbox/#sandboxtransfersweepsimulate
}
     - parameter sandboxTransferSweepSimulateRequest: (body)  
     - returns: RequestBuilder<SandboxTransferSweepSimulateResponse> 
     */
    open class func sandboxTransferSweepSimulateWithRequestBuilder(sandboxTransferSweepSimulateRequest: SandboxTransferSweepSimulateRequest) -> RequestBuilder<SandboxTransferSweepSimulateResponse> {
        let localVariablePath = "/sandbox/transfer/sweep/simulate"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sandboxTransferSweepSimulateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SandboxTransferSweepSimulateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Advance a test clock
     
     - parameter sandboxTransferTestClockAdvanceRequest: (body)  
     - returns: SandboxTransferTestClockAdvanceResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sandboxTransferTestClockAdvance(sandboxTransferTestClockAdvanceRequest: SandboxTransferTestClockAdvanceRequest) async throws -> SandboxTransferTestClockAdvanceResponse {
        return try await sandboxTransferTestClockAdvanceWithRequestBuilder(sandboxTransferTestClockAdvanceRequest: sandboxTransferTestClockAdvanceRequest).execute().body
    }

    /**
     Advance a test clock
     - POST /sandbox/transfer/test_clock/advance
     - Use the `/sandbox/transfer/test_clock/advance` endpoint to advance a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. A test clock can be advanced by incrementing `virtual_time`, but may never go back to a lower `virtual_time`.  If a test clock is advanced, we will simulate the changes that ought to occur during the time that elapsed.  For example, a client creates a weekly recurring transfer with a test clock set at t. When the client advances the test clock by setting `virtual_time` = t + 15 days, 2 new originations should be created, along with the webhook events.  The advancement of the test clock from its current `virtual_time` should be limited such that there are no more than 20 originations resulting from the advance operation on each `recurring_transfer` associated with the `test_clock`.  For example, if the recurring transfer associated with this test clock originates once every 4 weeks, you can advance the `virtual_time` up to 80 weeks on each API call.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/sandbox/#sandboxtransfertest_clockadvance
}
     - parameter sandboxTransferTestClockAdvanceRequest: (body)  
     - returns: RequestBuilder<SandboxTransferTestClockAdvanceResponse> 
     */
    open class func sandboxTransferTestClockAdvanceWithRequestBuilder(sandboxTransferTestClockAdvanceRequest: SandboxTransferTestClockAdvanceRequest) -> RequestBuilder<SandboxTransferTestClockAdvanceResponse> {
        let localVariablePath = "/sandbox/transfer/test_clock/advance"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sandboxTransferTestClockAdvanceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SandboxTransferTestClockAdvanceResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a test clock
     
     - parameter sandboxTransferTestClockCreateRequest: (body)  
     - returns: SandboxTransferTestClockCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sandboxTransferTestClockCreate(sandboxTransferTestClockCreateRequest: SandboxTransferTestClockCreateRequest) async throws -> SandboxTransferTestClockCreateResponse {
        return try await sandboxTransferTestClockCreateWithRequestBuilder(sandboxTransferTestClockCreateRequest: sandboxTransferTestClockCreateRequest).execute().body
    }

    /**
     Create a test clock
     - POST /sandbox/transfer/test_clock/create
     - Use the `/sandbox/transfer/test_clock/create` endpoint to create a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. Test clocks are used for testing recurring transfers in Sandbox.  A test clock can be associated with up to 5 recurring transfers.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/sandbox/#sandboxtransfertest_clockcreate
}
     - parameter sandboxTransferTestClockCreateRequest: (body)  
     - returns: RequestBuilder<SandboxTransferTestClockCreateResponse> 
     */
    open class func sandboxTransferTestClockCreateWithRequestBuilder(sandboxTransferTestClockCreateRequest: SandboxTransferTestClockCreateRequest) -> RequestBuilder<SandboxTransferTestClockCreateResponse> {
        let localVariablePath = "/sandbox/transfer/test_clock/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sandboxTransferTestClockCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SandboxTransferTestClockCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a test clock
     
     - parameter sandboxTransferTestClockGetRequest: (body)  
     - returns: SandboxTransferTestClockGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sandboxTransferTestClockGet(sandboxTransferTestClockGetRequest: SandboxTransferTestClockGetRequest) async throws -> SandboxTransferTestClockGetResponse {
        return try await sandboxTransferTestClockGetWithRequestBuilder(sandboxTransferTestClockGetRequest: sandboxTransferTestClockGetRequest).execute().body
    }

    /**
     Get a test clock
     - POST /sandbox/transfer/test_clock/get
     - Use the `/sandbox/transfer/test_clock/get` endpoint to get a `test_clock` in the Sandbox environment.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/sandbox/#sandboxtransfertest_clockget
}
     - parameter sandboxTransferTestClockGetRequest: (body)  
     - returns: RequestBuilder<SandboxTransferTestClockGetResponse> 
     */
    open class func sandboxTransferTestClockGetWithRequestBuilder(sandboxTransferTestClockGetRequest: SandboxTransferTestClockGetRequest) -> RequestBuilder<SandboxTransferTestClockGetResponse> {
        let localVariablePath = "/sandbox/transfer/test_clock/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sandboxTransferTestClockGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SandboxTransferTestClockGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List test clocks
     
     - parameter sandboxTransferTestClockListRequest: (body)  
     - returns: SandboxTransferTestClockListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sandboxTransferTestClockList(sandboxTransferTestClockListRequest: SandboxTransferTestClockListRequest) async throws -> SandboxTransferTestClockListResponse {
        return try await sandboxTransferTestClockListWithRequestBuilder(sandboxTransferTestClockListRequest: sandboxTransferTestClockListRequest).execute().body
    }

    /**
     List test clocks
     - POST /sandbox/transfer/test_clock/list
     - Use the `/sandbox/transfer/test_clock/list` endpoint to see a list of all your test clocks in the Sandbox environment, by ascending `virtual_time`. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired test clocks.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/sandbox/#sandboxtransfertest_clocklist
}
     - parameter sandboxTransferTestClockListRequest: (body)  
     - returns: RequestBuilder<SandboxTransferTestClockListResponse> 
     */
    open class func sandboxTransferTestClockListWithRequestBuilder(sandboxTransferTestClockListRequest: SandboxTransferTestClockListRequest) -> RequestBuilder<SandboxTransferTestClockListResponse> {
        let localVariablePath = "/sandbox/transfer/test_clock/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sandboxTransferTestClockListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SandboxTransferTestClockListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Report whether you initiated an ACH transaction
     
     - parameter signalDecisionReportRequest: (body)  
     - returns: SignalDecisionReportResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func signalDecisionReport(signalDecisionReportRequest: SignalDecisionReportRequest) async throws -> SignalDecisionReportResponse {
        return try await signalDecisionReportWithRequestBuilder(signalDecisionReportRequest: signalDecisionReportRequest).execute().body
    }

    /**
     Report whether you initiated an ACH transaction
     - POST /signal/decision/report
     - After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/signal#signaldecisionreport
}
     - parameter signalDecisionReportRequest: (body)  
     - returns: RequestBuilder<SignalDecisionReportResponse> 
     */
    open class func signalDecisionReportWithRequestBuilder(signalDecisionReportRequest: SignalDecisionReportRequest) -> RequestBuilder<SignalDecisionReportResponse> {
        let localVariablePath = "/signal/decision/report"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: signalDecisionReportRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SignalDecisionReportResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Evaluate a planned ACH transaction
     
     - parameter signalEvaluateRequest: (body)  
     - returns: SignalEvaluateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func signalEvaluate(signalEvaluateRequest: SignalEvaluateRequest) async throws -> SignalEvaluateResponse {
        return try await signalEvaluateWithRequestBuilder(signalEvaluateRequest: signalEvaluateRequest).execute().body
    }

    /**
     Evaluate a planned ACH transaction
     - POST /signal/evaluate
     - Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to the error documentation on [Item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/signal#signalevaluate
}
     - parameter signalEvaluateRequest: (body)  
     - returns: RequestBuilder<SignalEvaluateResponse> 
     */
    open class func signalEvaluateWithRequestBuilder(signalEvaluateRequest: SignalEvaluateRequest) -> RequestBuilder<SignalEvaluateResponse> {
        let localVariablePath = "/signal/evaluate"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: signalEvaluateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SignalEvaluateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Opt-in an Item to Signal
     
     - parameter signalPrepareRequest: (body)  
     - returns: SignalPrepareResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func signalPrepare(signalPrepareRequest: SignalPrepareRequest) async throws -> SignalPrepareResponse {
        return try await signalPrepareWithRequestBuilder(signalPrepareRequest: signalPrepareRequest).execute().body
    }

    /**
     Opt-in an Item to Signal
     - POST /signal/prepare
     - When Link is not initialized with Signal, call `/signal/prepare` to opt-in that Item to the Signal data collection process, developing a Signal score.  If run on an Item that is already initialized with Signal, this endpoint will return a 200 response and will not modify the Item.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/signal#signalprepare
}
     - parameter signalPrepareRequest: (body)  
     - returns: RequestBuilder<SignalPrepareResponse> 
     */
    open class func signalPrepareWithRequestBuilder(signalPrepareRequest: SignalPrepareRequest) -> RequestBuilder<SignalPrepareResponse> {
        let localVariablePath = "/signal/prepare"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: signalPrepareRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SignalPrepareResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Report a return for an ACH transaction
     
     - parameter signalReturnReportRequest: (body)  
     - returns: SignalReturnReportResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func signalReturnReport(signalReturnReportRequest: SignalReturnReportRequest) async throws -> SignalReturnReportResponse {
        return try await signalReturnReportWithRequestBuilder(signalReturnReportRequest: signalReturnReportRequest).execute().body
    }

    /**
     Report a return for an ACH transaction
     - POST /signal/return/report
     - Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/signal#signalreturnreport
}
     - parameter signalReturnReportRequest: (body)  
     - returns: RequestBuilder<SignalReturnReportResponse> 
     */
    open class func signalReturnReportWithRequestBuilder(signalReturnReportRequest: SignalReturnReportRequest) -> RequestBuilder<SignalReturnReportResponse> {
        let localVariablePath = "/signal/return/report"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: signalReturnReportRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SignalReturnReportResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve a single statement.
     
     - parameter statementsDownloadRequest: (body)  
     - returns: URL
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func statementsDownload(statementsDownloadRequest: StatementsDownloadRequest) async throws -> URL {
        return try await statementsDownloadWithRequestBuilder(statementsDownloadRequest: statementsDownloadRequest).execute().body
    }

    /**
     Retrieve a single statement.
     - POST /statements/download
     - The `/statements/download` endpoint retrieves a single statement PDF in binary format.  The response will contain a `Plaid-Content-Hash` header containing a SHA 256 checksum of the statement. This can be used to verify that the file being sent by Plaid is the same file that was downloaded to your system.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/statements#statementsdownload
}
     - parameter statementsDownloadRequest: (body)  
     - returns: RequestBuilder<URL> 
     */
    open class func statementsDownloadWithRequestBuilder(statementsDownloadRequest: StatementsDownloadRequest) -> RequestBuilder<URL> {
        let localVariablePath = "/statements/download"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: statementsDownloadRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve a list of all statements associated with an item.
     
     - parameter statementsListRequest: (body)  
     - returns: StatementsListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func statementsList(statementsListRequest: StatementsListRequest) async throws -> StatementsListResponse {
        return try await statementsListWithRequestBuilder(statementsListRequest: statementsListRequest).execute().body
    }

    /**
     Retrieve a list of all statements associated with an item.
     - POST /statements/list
     - The `/statements/list` endpoint retrieves a list of all statements associated with an item.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/statements#statementslist
}
     - parameter statementsListRequest: (body)  
     - returns: RequestBuilder<StatementsListResponse> 
     */
    open class func statementsListWithRequestBuilder(statementsListRequest: StatementsListRequest) -> RequestBuilder<StatementsListResponse> {
        let localVariablePath = "/statements/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: statementsListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StatementsListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Refresh statements data.
     
     - parameter statementsRefreshRequest: (body)  
     - returns: StatementsRefreshResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func statementsRefresh(statementsRefreshRequest: StatementsRefreshRequest) async throws -> StatementsRefreshResponse {
        return try await statementsRefreshWithRequestBuilder(statementsRefreshRequest: statementsRefreshRequest).execute().body
    }

    /**
     Refresh statements data.
     - POST /statements/refresh
     - `/statements/refresh` initiates an on-demand extraction to fetch the statements for the provided dates.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/statements#statementsrefresh
}
     - parameter statementsRefreshRequest: (body)  
     - returns: RequestBuilder<StatementsRefreshResponse> 
     */
    open class func statementsRefreshWithRequestBuilder(statementsRefreshRequest: StatementsRefreshRequest) -> RequestBuilder<StatementsRefreshResponse> {
        let localVariablePath = "/statements/refresh"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: statementsRefreshRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StatementsRefreshResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     enhance locally-held transaction data
     
     - parameter transactionsEnhanceGetRequest: (body)  
     - returns: TransactionsEnhanceGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transactionsEnhance(transactionsEnhanceGetRequest: TransactionsEnhanceGetRequest) async throws -> TransactionsEnhanceGetResponse {
        return try await transactionsEnhanceWithRequestBuilder(transactionsEnhanceGetRequest: transactionsEnhanceGetRequest).execute().body
    }

    /**
     enhance locally-held transaction data
     - POST /beta/transactions/v1/enhance
     - The `/beta/transactions/v1/enhance` endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - parameter transactionsEnhanceGetRequest: (body)  
     - returns: RequestBuilder<TransactionsEnhanceGetResponse> 
     */
    open class func transactionsEnhanceWithRequestBuilder(transactionsEnhanceGetRequest: TransactionsEnhanceGetRequest) -> RequestBuilder<TransactionsEnhanceGetResponse> {
        let localVariablePath = "/beta/transactions/v1/enhance"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transactionsEnhanceGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionsEnhanceGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Enrich locally-held transaction data
     
     - parameter transactionsEnrichRequest: (body)  
     - returns: TransactionsEnrichResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transactionsEnrich(transactionsEnrichRequest: TransactionsEnrichRequest) async throws -> TransactionsEnrichResponse {
        return try await transactionsEnrichWithRequestBuilder(transactionsEnrichRequest: transactionsEnrichRequest).execute().body
    }

    /**
     Enrich locally-held transaction data
     - POST /transactions/enrich
     - The `/transactions/enrich` endpoint enriches raw transaction data generated by your own banking products or retrieved from other non-Plaid sources.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/enrich/#transactionsenrich
}
     - parameter transactionsEnrichRequest: (body)  
     - returns: RequestBuilder<TransactionsEnrichResponse> 
     */
    open class func transactionsEnrichWithRequestBuilder(transactionsEnrichRequest: TransactionsEnrichRequest) -> RequestBuilder<TransactionsEnrichResponse> {
        let localVariablePath = "/transactions/enrich"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transactionsEnrichRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionsEnrichResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get transaction data
     
     - parameter transactionsGetRequest: (body)  
     - returns: TransactionsGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transactionsGet(transactionsGetRequest: TransactionsGetRequest) async throws -> TransactionsGetResponse {
        return try await transactionsGetWithRequestBuilder(transactionsGetRequest: transactionsGetRequest).execute().body
    }

    /**
     Get transaction data
     - POST /transactions/get
     - Note: All new implementations are encouraged to use `/transactions/sync` rather than `/transactions/get`. `/transactions/sync` provides the same functionality as `/transactions/get` and improves developer ease-of-use for handling transactions updates.  The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To find out when the Item was last updated, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn't. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transactions/#transactionsget
}
     - parameter transactionsGetRequest: (body)  
     - returns: RequestBuilder<TransactionsGetResponse> 
     */
    open class func transactionsGetWithRequestBuilder(transactionsGetRequest: TransactionsGetRequest) -> RequestBuilder<TransactionsGetResponse> {
        let localVariablePath = "/transactions/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transactionsGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionsGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Fetch recurring transaction streams
     
     - parameter transactionsRecurringGetRequest: (body)  
     - returns: TransactionsRecurringGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transactionsRecurringGet(transactionsRecurringGetRequest: TransactionsRecurringGetRequest) async throws -> TransactionsRecurringGetResponse {
        return try await transactionsRecurringGetWithRequestBuilder(transactionsRecurringGetRequest: transactionsRecurringGetRequest).execute().body
    }

    /**
     Fetch recurring transaction streams
     - POST /transactions/recurring/get
     - The `/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/transactions/get` or `/transactions/sync`). For optimal results, we strongly recommend customers using Recurring Transactions to request at least 180 days of history when initializing items with Transactions (using the [`days_requested`](https://plaid.com/docs/api/tokens/#link-token-create-request-transactions-days-requested) option). Once all historical transactions have been fetched, call `/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transactions/#transactionsrecurringget
}
     - parameter transactionsRecurringGetRequest: (body)  
     - returns: RequestBuilder<TransactionsRecurringGetResponse> 
     */
    open class func transactionsRecurringGetWithRequestBuilder(transactionsRecurringGetRequest: TransactionsRecurringGetRequest) -> RequestBuilder<TransactionsRecurringGetResponse> {
        let localVariablePath = "/transactions/recurring/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transactionsRecurringGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionsRecurringGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Refresh transaction data
     
     - parameter transactionsRefreshRequest: (body)  
     - returns: TransactionsRefreshResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transactionsRefresh(transactionsRefreshRequest: TransactionsRefreshRequest) async throws -> TransactionsRefreshResponse {
        return try await transactionsRefreshWithRequestBuilder(transactionsRefreshRequest: transactionsRefreshRequest).execute().body
    }

    /**
     Refresh transaction data
     - POST /transactions/refresh
     - `/transactions/refresh` is an optional endpoint that initiates an on-demand extraction to fetch the newest transactions for an Item. The on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Transactions-enabled Item. The Item must already have Transactions added as a product in order to call `/transactions/refresh`.  If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/transactions/sync` and `/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get` or `/transactions/sync`.  Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on an Item from that institution.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/transactions/refresh` is offered as an optional add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transactions/#transactionsrefresh
}
     - parameter transactionsRefreshRequest: (body)  
     - returns: RequestBuilder<TransactionsRefreshResponse> 
     */
    open class func transactionsRefreshWithRequestBuilder(transactionsRefreshRequest: TransactionsRefreshRequest) -> RequestBuilder<TransactionsRefreshResponse> {
        let localVariablePath = "/transactions/refresh"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transactionsRefreshRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionsRefreshResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create transaction category rule
     
     - parameter transactionsRulesCreateRequest: (body)  
     - returns: TransactionsRulesCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transactionsRulesCreate(transactionsRulesCreateRequest: TransactionsRulesCreateRequest) async throws -> TransactionsRulesCreateResponse {
        return try await transactionsRulesCreateWithRequestBuilder(transactionsRulesCreateRequest: transactionsRulesCreateRequest).execute().body
    }

    /**
     Create transaction category rule
     - POST /beta/transactions/rules/v1/create
     - The `/transactions/rules/v1/create` endpoint creates transaction categorization rules.  Rules will be applied on the Item's transactions returned in `/transactions/get` response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - parameter transactionsRulesCreateRequest: (body)  
     - returns: RequestBuilder<TransactionsRulesCreateResponse> 
     */
    open class func transactionsRulesCreateWithRequestBuilder(transactionsRulesCreateRequest: TransactionsRulesCreateRequest) -> RequestBuilder<TransactionsRulesCreateResponse> {
        let localVariablePath = "/beta/transactions/rules/v1/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transactionsRulesCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionsRulesCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Return a list of rules created for the Item associated with the access token.
     
     - parameter transactionsRulesListRequest: (body)  
     - returns: TransactionsRulesListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transactionsRulesList(transactionsRulesListRequest: TransactionsRulesListRequest) async throws -> TransactionsRulesListResponse {
        return try await transactionsRulesListWithRequestBuilder(transactionsRulesListRequest: transactionsRulesListRequest).execute().body
    }

    /**
     Return a list of rules created for the Item associated with the access token.
     - POST /beta/transactions/rules/v1/list
     - The `/transactions/rules/v1/list` returns a list of transaction rules created for the Item associated with the access token.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - parameter transactionsRulesListRequest: (body)  
     - returns: RequestBuilder<TransactionsRulesListResponse> 
     */
    open class func transactionsRulesListWithRequestBuilder(transactionsRulesListRequest: TransactionsRulesListRequest) -> RequestBuilder<TransactionsRulesListResponse> {
        let localVariablePath = "/beta/transactions/rules/v1/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transactionsRulesListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionsRulesListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Remove transaction rule
     
     - parameter transactionsRulesRemoveRequest: (body)  
     - returns: TransactionsRulesRemoveResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transactionsRulesRemove(transactionsRulesRemoveRequest: TransactionsRulesRemoveRequest) async throws -> TransactionsRulesRemoveResponse {
        return try await transactionsRulesRemoveWithRequestBuilder(transactionsRulesRemoveRequest: transactionsRulesRemoveRequest).execute().body
    }

    /**
     Remove transaction rule
     - POST /beta/transactions/rules/v1/remove
     - The `/transactions/rules/v1/remove` endpoint is used to remove a transaction rule.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - parameter transactionsRulesRemoveRequest: (body)  
     - returns: RequestBuilder<TransactionsRulesRemoveResponse> 
     */
    open class func transactionsRulesRemoveWithRequestBuilder(transactionsRulesRemoveRequest: TransactionsRulesRemoveRequest) -> RequestBuilder<TransactionsRulesRemoveResponse> {
        let localVariablePath = "/beta/transactions/rules/v1/remove"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transactionsRulesRemoveRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionsRulesRemoveResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get incremental transaction updates on an Item
     
     - parameter transactionsSyncRequest: (body)  
     - returns: TransactionsSyncResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transactionsSync(transactionsSyncRequest: TransactionsSyncRequest) async throws -> TransactionsSyncResponse {
        return try await transactionsSyncWithRequestBuilder(transactionsSyncRequest: transactionsSyncRequest).execute().body
    }

    /**
     Get incremental transaction updates on an Item
     - POST /transactions/sync
     - The `/transactions/sync` endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen.  `/transactions/sync` provides the same functionality as `/transactions/get` and can be used instead of `/transactions/get` to simplify the process of tracking transactions updates. To learn more about migrating from `/transactions/get`, see the [Transactions Sync migration guide](https://plaid.com/docs/transactions/sync-migration/).  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/transactions/sync` for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that Item. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with an Item, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/transactions/sync` fails due to the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, `/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To find out when the Item was last updated, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/transactions/refresh` endpoint.  For newly created Items, data may not be immediately available to `/transactions/sync`. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To be alerted when new data is available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transactions/#transactionssync
}
     - parameter transactionsSyncRequest: (body)  
     - returns: RequestBuilder<TransactionsSyncResponse> 
     */
    open class func transactionsSyncWithRequestBuilder(transactionsSyncRequest: TransactionsSyncRequest) -> RequestBuilder<TransactionsSyncResponse> {
        let localVariablePath = "/transactions/sync"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transactionsSyncRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionsSyncResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Obtain user insights based on transactions sent through /transactions/enrich
     
     - parameter transactionsUserInsightsGetRequest: (body)  
     - returns: TransactionsUserInsightsGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transactionsUserInsightsGet(transactionsUserInsightsGetRequest: TransactionsUserInsightsGetRequest) async throws -> TransactionsUserInsightsGetResponse {
        return try await transactionsUserInsightsGetWithRequestBuilder(transactionsUserInsightsGetRequest: transactionsUserInsightsGetRequest).execute().body
    }

    /**
     Obtain user insights based on transactions sent through /transactions/enrich
     - POST /beta/transactions/user_insights/v1/get
     - The `/beta/transactions/user_insights/v1/get` gets user insights for clients who have enriched data with `/transactions/enrich`.  The product is currently in beta.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/enrich/#userinsightsget
}
     - parameter transactionsUserInsightsGetRequest: (body)  
     - returns: RequestBuilder<TransactionsUserInsightsGetResponse> 
     */
    open class func transactionsUserInsightsGetWithRequestBuilder(transactionsUserInsightsGetRequest: TransactionsUserInsightsGetRequest) -> RequestBuilder<TransactionsUserInsightsGetResponse> {
        let localVariablePath = "/beta/transactions/user_insights/v1/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transactionsUserInsightsGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionsUserInsightsGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Cancel a transfer authorization
     
     - parameter transferAuthorizationCancelRequest: (body)  
     - returns: TransferAuthorizationCancelResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferAuthorizationCancel(transferAuthorizationCancelRequest: TransferAuthorizationCancelRequest) async throws -> TransferAuthorizationCancelResponse {
        return try await transferAuthorizationCancelWithRequestBuilder(transferAuthorizationCancelRequest: transferAuthorizationCancelRequest).execute().body
    }

    /**
     Cancel a transfer authorization
     - POST /transfer/authorization/cancel
     - Use the `/transfer/authorization/cancel` endpoint to cancel a transfer authorization. A transfer authorization is eligible for cancellation if it has not yet been used to create a transfer.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/initiating-transfers/#transferauthorizationcancel
}
     - parameter transferAuthorizationCancelRequest: (body)  
     - returns: RequestBuilder<TransferAuthorizationCancelResponse> 
     */
    open class func transferAuthorizationCancelWithRequestBuilder(transferAuthorizationCancelRequest: TransferAuthorizationCancelRequest) -> RequestBuilder<TransferAuthorizationCancelResponse> {
        let localVariablePath = "/transfer/authorization/cancel"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferAuthorizationCancelRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferAuthorizationCancelResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a transfer authorization
     
     - parameter transferAuthorizationCreateRequest: (body)  
     - returns: TransferAuthorizationCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferAuthorizationCreate(transferAuthorizationCreateRequest: TransferAuthorizationCreateRequest) async throws -> TransferAuthorizationCreateResponse {
        return try await transferAuthorizationCreateWithRequestBuilder(transferAuthorizationCreateRequest: transferAuthorizationCreateRequest).execute().body
    }

    /**
     Create a transfer authorization
     - POST /transfer/authorization/create
     - Use the `/transfer/authorization/create` endpoint to authorize a transfer. This endpoint must be called prior to calling `/transfer/create`.  There are three possible outcomes to calling this endpoint: If the `authorization.decision` in the response is `declined`, the proposed transfer has failed the risk check and you cannot proceed with the transfer. If the `authorization.decision` is `approved`, and the `authorization.rationale_code` is `null`, the transfer has passed the risk check and you can proceed to call `/transfer/create`. If the `authorization.decision` is `approved` and the `authorization.rationale_code` is non-`null`, the risk check could not be run: you may proceed with the transfer, but should perform your own risk evaluation. For more details, see the response schema.  In Plaid's Sandbox environment the decisions will be returned as follows:    - To approve a transfer with `null` rationale code, make an authorization request with an `amount` less than the available balance in the account.    - To approve a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To approve a transfer with the rationale code `ITEM_LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/initiating-transfers/#transferauthorizationcreate
}
     - parameter transferAuthorizationCreateRequest: (body)  
     - returns: RequestBuilder<TransferAuthorizationCreateResponse> 
     */
    open class func transferAuthorizationCreateWithRequestBuilder(transferAuthorizationCreateRequest: TransferAuthorizationCreateRequest) -> RequestBuilder<TransferAuthorizationCreateResponse> {
        let localVariablePath = "/transfer/authorization/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferAuthorizationCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferAuthorizationCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     (Deprecated) Retrieve a balance held with Plaid
     
     - parameter transferBalanceGetRequest: (body)  
     - returns: TransferBalanceGetResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferBalanceGet(transferBalanceGetRequest: TransferBalanceGetRequest) async throws -> TransferBalanceGetResponse {
        return try await transferBalanceGetWithRequestBuilder(transferBalanceGetRequest: transferBalanceGetRequest).execute().body
    }

    /**
     (Deprecated) Retrieve a balance held with Plaid
     - POST /transfer/balance/get
     - (Deprecated) Use the `/transfer/balance/get` endpoint to view a balance held with Plaid.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/balance/#transferbalanceget
}
     - parameter transferBalanceGetRequest: (body)  
     - returns: RequestBuilder<TransferBalanceGetResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func transferBalanceGetWithRequestBuilder(transferBalanceGetRequest: TransferBalanceGetRequest) -> RequestBuilder<TransferBalanceGetResponse> {
        let localVariablePath = "/transfer/balance/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferBalanceGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferBalanceGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Cancel a transfer
     
     - parameter transferCancelRequest: (body)  
     - returns: TransferCancelResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferCancel(transferCancelRequest: TransferCancelRequest) async throws -> TransferCancelResponse {
        return try await transferCancelWithRequestBuilder(transferCancelRequest: transferCancelRequest).execute().body
    }

    /**
     Cancel a transfer
     - POST /transfer/cancel
     - Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancellation if the `cancellable` property returned by `/transfer/get` is `true`.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/initiating-transfers/#transfercancel
}
     - parameter transferCancelRequest: (body)  
     - returns: RequestBuilder<TransferCancelResponse> 
     */
    open class func transferCancelWithRequestBuilder(transferCancelRequest: TransferCancelRequest) -> RequestBuilder<TransferCancelResponse> {
        let localVariablePath = "/transfer/cancel"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferCancelRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferCancelResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get RTP eligibility information of a transfer
     
     - parameter transferCapabilitiesGetRequest: (body)  
     - returns: TransferCapabilitiesGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferCapabilitiesGet(transferCapabilitiesGetRequest: TransferCapabilitiesGetRequest) async throws -> TransferCapabilitiesGetResponse {
        return try await transferCapabilitiesGetWithRequestBuilder(transferCapabilitiesGetRequest: transferCapabilitiesGetRequest).execute().body
    }

    /**
     Get RTP eligibility information of a transfer
     - POST /transfer/capabilities/get
     - Use the `/transfer/capabilities/get` endpoint to determine the RTP eligibility information of a transfer. To simulate RTP eligibility in Sandbox, log in using the username `user_good` and password `pass_good` and use the first two checking and savings accounts in the \"First Platypus Bank\" institution (ending in 0000 or 1111), which will return `true`. Any other account will return `false`.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/account-linking/#transfercapabilitiesget
}
     - parameter transferCapabilitiesGetRequest: (body)  
     - returns: RequestBuilder<TransferCapabilitiesGetResponse> 
     */
    open class func transferCapabilitiesGetWithRequestBuilder(transferCapabilitiesGetRequest: TransferCapabilitiesGetRequest) -> RequestBuilder<TransferCapabilitiesGetResponse> {
        let localVariablePath = "/transfer/capabilities/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferCapabilitiesGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferCapabilitiesGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get transfer product configuration
     
     - parameter transferConfigurationGetRequest: (body)  
     - returns: TransferConfigurationGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferConfigurationGet(transferConfigurationGetRequest: TransferConfigurationGetRequest) async throws -> TransferConfigurationGetResponse {
        return try await transferConfigurationGetWithRequestBuilder(transferConfigurationGetRequest: transferConfigurationGetRequest).execute().body
    }

    /**
     Get transfer product configuration
     - POST /transfer/configuration/get
     - Use the `/transfer/configuration/get` endpoint to view your transfer product configurations.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/metrics/#transferconfigurationget
}
     - parameter transferConfigurationGetRequest: (body)  
     - returns: RequestBuilder<TransferConfigurationGetResponse> 
     */
    open class func transferConfigurationGetWithRequestBuilder(transferConfigurationGetRequest: TransferConfigurationGetRequest) -> RequestBuilder<TransferConfigurationGetResponse> {
        let localVariablePath = "/transfer/configuration/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferConfigurationGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferConfigurationGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a transfer
     
     - parameter transferCreateRequest: (body)  
     - returns: TransferCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferCreate(transferCreateRequest: TransferCreateRequest) async throws -> TransferCreateResponse {
        return try await transferCreateWithRequestBuilder(transferCreateRequest: transferCreateRequest).execute().body
    }

    /**
     Create a transfer
     - POST /transfer/create
     - Use the `/transfer/create` endpoint to initiate a new transfer.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/initiating-transfers/#transfercreate
}
     - parameter transferCreateRequest: (body)  
     - returns: RequestBuilder<TransferCreateResponse> 
     */
    open class func transferCreateWithRequestBuilder(transferCreateRequest: TransferCreateRequest) -> RequestBuilder<TransferCreateResponse> {
        let localVariablePath = "/transfer/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Upload transfer diligence document on behalf of the originator
     
     - parameter transferDiligenceDocumentUploadRequest: (body)  
     - returns: TransferDiligenceDocumentUploadResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferDiligenceDocumentUpload(transferDiligenceDocumentUploadRequest: TransferDiligenceDocumentUploadRequest) async throws -> TransferDiligenceDocumentUploadResponse {
        return try await transferDiligenceDocumentUploadWithRequestBuilder(transferDiligenceDocumentUploadRequest: transferDiligenceDocumentUploadRequest).execute().body
    }

    /**
     Upload transfer diligence document on behalf of the originator
     - POST /transfer/diligence/document/upload
     - Third-party sender customers can use `/transfer/diligence/document/upload` endpoint to upload a document on behalf of its end customer (i.e. originator) to Plaid. You’ll need to send a request of type multipart/form-data. You must provide the `client_id` in the `PLAID-CLIENT-ID` header and `secret` in the `PLAID-SECRET` header.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/platform-payments/#transferdiligencedocumentupload
}
     - parameter transferDiligenceDocumentUploadRequest: (body)  
     - returns: RequestBuilder<TransferDiligenceDocumentUploadResponse> 
     */
    open class func transferDiligenceDocumentUploadWithRequestBuilder(transferDiligenceDocumentUploadRequest: TransferDiligenceDocumentUploadRequest) -> RequestBuilder<TransferDiligenceDocumentUploadResponse> {
        let localVariablePath = "/transfer/diligence/document/upload"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferDiligenceDocumentUploadRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferDiligenceDocumentUploadResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Submit transfer diligence on behalf of the originator
     
     - parameter transferDiligenceSubmitRequest: (body)  
     - returns: TransferDiligenceSubmitResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferDiligenceSubmit(transferDiligenceSubmitRequest: TransferDiligenceSubmitRequest) async throws -> TransferDiligenceSubmitResponse {
        return try await transferDiligenceSubmitWithRequestBuilder(transferDiligenceSubmitRequest: transferDiligenceSubmitRequest).execute().body
    }

    /**
     Submit transfer diligence on behalf of the originator
     - POST /transfer/diligence/submit
     - Use the `/transfer/diligence/submit` endpoint to submit transfer diligence on behalf of the originator (i.e., the end customer).
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/platform-payments/#transferdiligencesubmit
}
     - parameter transferDiligenceSubmitRequest: (body)  
     - returns: RequestBuilder<TransferDiligenceSubmitResponse> 
     */
    open class func transferDiligenceSubmitWithRequestBuilder(transferDiligenceSubmitRequest: TransferDiligenceSubmitRequest) -> RequestBuilder<TransferDiligenceSubmitResponse> {
        let localVariablePath = "/transfer/diligence/submit"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferDiligenceSubmitRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferDiligenceSubmitResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List transfer events
     
     - parameter transferEventListRequest: (body)  
     - returns: TransferEventListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferEventList(transferEventListRequest: TransferEventListRequest) async throws -> TransferEventListResponse {
        return try await transferEventListWithRequestBuilder(transferEventListRequest: transferEventListRequest).execute().body
    }

    /**
     List transfer events
     - POST /transfer/event/list
     - Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/reading-transfers/#transfereventlist
}
     - parameter transferEventListRequest: (body)  
     - returns: RequestBuilder<TransferEventListResponse> 
     */
    open class func transferEventListWithRequestBuilder(transferEventListRequest: TransferEventListRequest) -> RequestBuilder<TransferEventListResponse> {
        let localVariablePath = "/transfer/event/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferEventListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferEventListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Sync transfer events
     
     - parameter transferEventSyncRequest: (body)  
     - returns: TransferEventSyncResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferEventSync(transferEventSyncRequest: TransferEventSyncRequest) async throws -> TransferEventSyncResponse {
        return try await transferEventSyncWithRequestBuilder(transferEventSyncRequest: transferEventSyncRequest).execute().body
    }

    /**
     Sync transfer events
     - POST /transfer/event/sync
     - `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/reading-transfers/#transfereventsync
}
     - parameter transferEventSyncRequest: (body)  
     - returns: RequestBuilder<TransferEventSyncResponse> 
     */
    open class func transferEventSyncWithRequestBuilder(transferEventSyncRequest: TransferEventSyncRequest) -> RequestBuilder<TransferEventSyncResponse> {
        let localVariablePath = "/transfer/event/sync"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferEventSyncRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferEventSyncResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve a transfer
     
     - parameter transferGetRequest: (body)  
     - returns: TransferGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferGet(transferGetRequest: TransferGetRequest) async throws -> TransferGetResponse {
        return try await transferGetWithRequestBuilder(transferGetRequest: transferGetRequest).execute().body
    }

    /**
     Retrieve a transfer
     - POST /transfer/get
     - The `/transfer/get` endpoint fetches information about the transfer corresponding to the given `transfer_id`.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/reading-transfers/#transferget
}
     - parameter transferGetRequest: (body)  
     - returns: RequestBuilder<TransferGetResponse> 
     */
    open class func transferGetWithRequestBuilder(transferGetRequest: TransferGetRequest) -> RequestBuilder<TransferGetResponse> {
        let localVariablePath = "/transfer/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a transfer intent object to invoke the Transfer UI
     
     - parameter transferIntentCreateRequest: (body)  
     - returns: TransferIntentCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferIntentCreate(transferIntentCreateRequest: TransferIntentCreateRequest) async throws -> TransferIntentCreateResponse {
        return try await transferIntentCreateWithRequestBuilder(transferIntentCreateRequest: transferIntentCreateRequest).execute().body
    }

    /**
     Create a transfer intent object to invoke the Transfer UI
     - POST /transfer/intent/create
     - Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/account-linking/#transferintentcreate
}
     - parameter transferIntentCreateRequest: (body)  
     - returns: RequestBuilder<TransferIntentCreateResponse> 
     */
    open class func transferIntentCreateWithRequestBuilder(transferIntentCreateRequest: TransferIntentCreateRequest) -> RequestBuilder<TransferIntentCreateResponse> {
        let localVariablePath = "/transfer/intent/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferIntentCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferIntentCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve more information about a transfer intent
     
     - parameter transferIntentGetRequest: (body)  
     - returns: TransferIntentGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferIntentGet(transferIntentGetRequest: TransferIntentGetRequest) async throws -> TransferIntentGetResponse {
        return try await transferIntentGetWithRequestBuilder(transferIntentGetRequest: transferIntentGetRequest).execute().body
    }

    /**
     Retrieve more information about a transfer intent
     - POST /transfer/intent/get
     - Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/account-linking/#transferintentget
}
     - parameter transferIntentGetRequest: (body)  
     - returns: RequestBuilder<TransferIntentGetResponse> 
     */
    open class func transferIntentGetWithRequestBuilder(transferIntentGetRequest: TransferIntentGetRequest) -> RequestBuilder<TransferIntentGetResponse> {
        let localVariablePath = "/transfer/intent/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferIntentGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferIntentGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Deposit funds into a Plaid Ledger balance
     
     - parameter transferLedgerDepositRequest: (body)  
     - returns: TransferLedgerDepositResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferLedgerDeposit(transferLedgerDepositRequest: TransferLedgerDepositRequest) async throws -> TransferLedgerDepositResponse {
        return try await transferLedgerDepositWithRequestBuilder(transferLedgerDepositRequest: transferLedgerDepositRequest).execute().body
    }

    /**
     Deposit funds into a Plaid Ledger balance
     - POST /transfer/ledger/deposit
     - Use the `/transfer/ledger/deposit` endpoint to deposit funds into Plaid Ledger.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/ledger/#transferledgerdeposit
}
     - parameter transferLedgerDepositRequest: (body)  
     - returns: RequestBuilder<TransferLedgerDepositResponse> 
     */
    open class func transferLedgerDepositWithRequestBuilder(transferLedgerDepositRequest: TransferLedgerDepositRequest) -> RequestBuilder<TransferLedgerDepositResponse> {
        let localVariablePath = "/transfer/ledger/deposit"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferLedgerDepositRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferLedgerDepositResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Move available balance between the ledgers of the platform and one of its originators
     
     - parameter transferLedgerDistributeRequest: (body)  
     - returns: TransferLedgerDistributeResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferLedgerDistribute(transferLedgerDistributeRequest: TransferLedgerDistributeRequest) async throws -> TransferLedgerDistributeResponse {
        return try await transferLedgerDistributeWithRequestBuilder(transferLedgerDistributeRequest: transferLedgerDistributeRequest).execute().body
    }

    /**
     Move available balance between the ledgers of the platform and one of its originators
     - POST /transfer/ledger/distribute
     - Use the `/transfer/ledger/distribute` endpoint to move available balance between the ledgers of the platform and one of its originators.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/ledger/#transferledgerdistribute
}
     - parameter transferLedgerDistributeRequest: (body)  
     - returns: RequestBuilder<TransferLedgerDistributeResponse> 
     */
    open class func transferLedgerDistributeWithRequestBuilder(transferLedgerDistributeRequest: TransferLedgerDistributeRequest) -> RequestBuilder<TransferLedgerDistributeResponse> {
        let localVariablePath = "/transfer/ledger/distribute"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferLedgerDistributeRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferLedgerDistributeResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve Plaid Ledger balance
     
     - parameter transferLedgerGetRequest: (body)  
     - returns: TransferLedgerGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferLedgerGet(transferLedgerGetRequest: TransferLedgerGetRequest) async throws -> TransferLedgerGetResponse {
        return try await transferLedgerGetWithRequestBuilder(transferLedgerGetRequest: transferLedgerGetRequest).execute().body
    }

    /**
     Retrieve Plaid Ledger balance
     - POST /transfer/ledger/get
     - Use the `/transfer/ledger/get` endpoint to view a balance on the ledger held with Plaid.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/ledger/#transferledgerget
}
     - parameter transferLedgerGetRequest: (body)  
     - returns: RequestBuilder<TransferLedgerGetResponse> 
     */
    open class func transferLedgerGetWithRequestBuilder(transferLedgerGetRequest: TransferLedgerGetRequest) -> RequestBuilder<TransferLedgerGetResponse> {
        let localVariablePath = "/transfer/ledger/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferLedgerGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferLedgerGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Withdraw funds from a Plaid Ledger balance
     
     - parameter transferLedgerWithdrawRequest: (body)  
     - returns: TransferLedgerWithdrawResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferLedgerWithdraw(transferLedgerWithdrawRequest: TransferLedgerWithdrawRequest) async throws -> TransferLedgerWithdrawResponse {
        return try await transferLedgerWithdrawWithRequestBuilder(transferLedgerWithdrawRequest: transferLedgerWithdrawRequest).execute().body
    }

    /**
     Withdraw funds from a Plaid Ledger balance
     - POST /transfer/ledger/withdraw
     - Use the `/transfer/ledger/withdraw` endpoint to withdraw funds from a Plaid Ledger balance.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/ledger/#transferledgerwithdraw
}
     - parameter transferLedgerWithdrawRequest: (body)  
     - returns: RequestBuilder<TransferLedgerWithdrawResponse> 
     */
    open class func transferLedgerWithdrawWithRequestBuilder(transferLedgerWithdrawRequest: TransferLedgerWithdrawRequest) -> RequestBuilder<TransferLedgerWithdrawResponse> {
        let localVariablePath = "/transfer/ledger/withdraw"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferLedgerWithdrawRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferLedgerWithdrawResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List transfers
     
     - parameter transferListRequest: (body)  
     - returns: TransferListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferList(transferListRequest: TransferListRequest) async throws -> TransferListResponse {
        return try await transferListWithRequestBuilder(transferListRequest: transferListRequest).execute().body
    }

    /**
     List transfers
     - POST /transfer/list
     - Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers. 
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/reading-transfers/#transferlist
}
     - parameter transferListRequest: (body)  
     - returns: RequestBuilder<TransferListResponse> 
     */
    open class func transferListWithRequestBuilder(transferListRequest: TransferListRequest) -> RequestBuilder<TransferListResponse> {
        let localVariablePath = "/transfer/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get transfer product usage metrics
     
     - parameter transferMetricsGetRequest: (body)  
     - returns: TransferMetricsGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferMetricsGet(transferMetricsGetRequest: TransferMetricsGetRequest) async throws -> TransferMetricsGetResponse {
        return try await transferMetricsGetWithRequestBuilder(transferMetricsGetRequest: transferMetricsGetRequest).execute().body
    }

    /**
     Get transfer product usage metrics
     - POST /transfer/metrics/get
     - Use the `/transfer/metrics/get` endpoint to view your transfer product usage metrics.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/metrics/#transfermetricsget
}
     - parameter transferMetricsGetRequest: (body)  
     - returns: RequestBuilder<TransferMetricsGetResponse> 
     */
    open class func transferMetricsGetWithRequestBuilder(transferMetricsGetRequest: TransferMetricsGetRequest) -> RequestBuilder<TransferMetricsGetResponse> {
        let localVariablePath = "/transfer/metrics/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferMetricsGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferMetricsGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Migrate account into Transfers
     
     - parameter transferMigrateAccountRequest: (body)  
     - returns: TransferMigrateAccountResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferMigrateAccount(transferMigrateAccountRequest: TransferMigrateAccountRequest) async throws -> TransferMigrateAccountResponse {
        return try await transferMigrateAccountWithRequestBuilder(transferMigrateAccountRequest: transferMigrateAccountRequest).execute().body
    }

    /**
     Migrate account into Transfers
     - POST /transfer/migrate_account
     - As an alternative to adding Items via Link, you can also use the `/transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items. If you intend to create wire transfers on this account, you must provide `wire_routing_number`. Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/account-linking/#transfermigrate_account
}
     - parameter transferMigrateAccountRequest: (body)  
     - returns: RequestBuilder<TransferMigrateAccountResponse> 
     */
    open class func transferMigrateAccountWithRequestBuilder(transferMigrateAccountRequest: TransferMigrateAccountRequest) -> RequestBuilder<TransferMigrateAccountResponse> {
        let localVariablePath = "/transfer/migrate_account"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferMigrateAccountRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferMigrateAccountResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a new originator
     
     - parameter transferOriginatorCreateRequest: (body)  
     - returns: TransferOriginatorCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferOriginatorCreate(transferOriginatorCreateRequest: TransferOriginatorCreateRequest) async throws -> TransferOriginatorCreateResponse {
        return try await transferOriginatorCreateWithRequestBuilder(transferOriginatorCreateRequest: transferOriginatorCreateRequest).execute().body
    }

    /**
     Create a new originator
     - POST /transfer/originator/create
     - Use the `/transfer/originator/create` endpoint to create a new originator and return an `originator_client_id`.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/platform-payments/#transferoriginatorcreate
}
     - parameter transferOriginatorCreateRequest: (body)  
     - returns: RequestBuilder<TransferOriginatorCreateResponse> 
     */
    open class func transferOriginatorCreateWithRequestBuilder(transferOriginatorCreateRequest: TransferOriginatorCreateRequest) -> RequestBuilder<TransferOriginatorCreateResponse> {
        let localVariablePath = "/transfer/originator/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferOriginatorCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferOriginatorCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update the funding account associated with the originator
     
     - parameter transferOriginatorFundingAccountUpdateRequest: (body)  
     - returns: TransferOriginatorFundingAccountUpdateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferOriginatorFundingAccountUpdate(transferOriginatorFundingAccountUpdateRequest: TransferOriginatorFundingAccountUpdateRequest) async throws -> TransferOriginatorFundingAccountUpdateResponse {
        return try await transferOriginatorFundingAccountUpdateWithRequestBuilder(transferOriginatorFundingAccountUpdateRequest: transferOriginatorFundingAccountUpdateRequest).execute().body
    }

    /**
     Update the funding account associated with the originator
     - POST /transfer/originator/funding_account/update
     - Use the `/transfer/originator/funding_account/update` endpoint to update the funding account associated with the originator.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/platform-payments/#transferoriginatorfunding_accountupdate
}
     - parameter transferOriginatorFundingAccountUpdateRequest: (body)  
     - returns: RequestBuilder<TransferOriginatorFundingAccountUpdateResponse> 
     */
    open class func transferOriginatorFundingAccountUpdateWithRequestBuilder(transferOriginatorFundingAccountUpdateRequest: TransferOriginatorFundingAccountUpdateRequest) -> RequestBuilder<TransferOriginatorFundingAccountUpdateResponse> {
        let localVariablePath = "/transfer/originator/funding_account/update"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferOriginatorFundingAccountUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferOriginatorFundingAccountUpdateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get status of an originator's onboarding
     
     - parameter transferOriginatorGetRequest: (body)  
     - returns: TransferOriginatorGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferOriginatorGet(transferOriginatorGetRequest: TransferOriginatorGetRequest) async throws -> TransferOriginatorGetResponse {
        return try await transferOriginatorGetWithRequestBuilder(transferOriginatorGetRequest: transferOriginatorGetRequest).execute().body
    }

    /**
     Get status of an originator's onboarding
     - POST /transfer/originator/get
     - The `/transfer/originator/get` endpoint gets status updates for an originator's onboarding process. This information is also available via the Transfer page on the Plaid dashboard.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/platform-payments/#transferoriginatorget
}
     - parameter transferOriginatorGetRequest: (body)  
     - returns: RequestBuilder<TransferOriginatorGetResponse> 
     */
    open class func transferOriginatorGetWithRequestBuilder(transferOriginatorGetRequest: TransferOriginatorGetRequest) -> RequestBuilder<TransferOriginatorGetResponse> {
        let localVariablePath = "/transfer/originator/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferOriginatorGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferOriginatorGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get status of all originators' onboarding
     
     - parameter transferOriginatorListRequest: (body)  
     - returns: TransferOriginatorListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferOriginatorList(transferOriginatorListRequest: TransferOriginatorListRequest) async throws -> TransferOriginatorListResponse {
        return try await transferOriginatorListWithRequestBuilder(transferOriginatorListRequest: transferOriginatorListRequest).execute().body
    }

    /**
     Get status of all originators' onboarding
     - POST /transfer/originator/list
     - The `/transfer/originator/list` endpoint gets status updates for all of your originators' onboarding. This information is also available via the Plaid dashboard.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/platform-payments/#transferoriginatorlist
}
     - parameter transferOriginatorListRequest: (body)  
     - returns: RequestBuilder<TransferOriginatorListResponse> 
     */
    open class func transferOriginatorListWithRequestBuilder(transferOriginatorListRequest: TransferOriginatorListRequest) -> RequestBuilder<TransferOriginatorListResponse> {
        let localVariablePath = "/transfer/originator/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferOriginatorListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferOriginatorListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Generate a Plaid-hosted onboarding UI URL.
     
     - parameter transferQuestionnaireCreateRequest: (body)  
     - returns: TransferQuestionnaireCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferQuestionnaireCreate(transferQuestionnaireCreateRequest: TransferQuestionnaireCreateRequest) async throws -> TransferQuestionnaireCreateResponse {
        return try await transferQuestionnaireCreateWithRequestBuilder(transferQuestionnaireCreateRequest: transferQuestionnaireCreateRequest).execute().body
    }

    /**
     Generate a Plaid-hosted onboarding UI URL.
     - POST /transfer/questionnaire/create
     - The `/transfer/questionnaire/create` endpoint generates a Plaid-hosted onboarding UI URL. Redirect the originator to this URL to provide their due diligence information and agree to Plaid’s terms for ACH money movement.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/platform-payments/#transferquestionnairecreate
}
     - parameter transferQuestionnaireCreateRequest: (body)  
     - returns: RequestBuilder<TransferQuestionnaireCreateResponse> 
     */
    open class func transferQuestionnaireCreateWithRequestBuilder(transferQuestionnaireCreateRequest: TransferQuestionnaireCreateRequest) -> RequestBuilder<TransferQuestionnaireCreateResponse> {
        let localVariablePath = "/transfer/questionnaire/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferQuestionnaireCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferQuestionnaireCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Cancel a recurring transfer.
     
     - parameter transferRecurringCancelRequest: (body)  
     - returns: TransferRecurringCancelResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferRecurringCancel(transferRecurringCancelRequest: TransferRecurringCancelRequest) async throws -> TransferRecurringCancelResponse {
        return try await transferRecurringCancelWithRequestBuilder(transferRecurringCancelRequest: transferRecurringCancelRequest).execute().body
    }

    /**
     Cancel a recurring transfer.
     - POST /transfer/recurring/cancel
     - Use the `/transfer/recurring/cancel` endpoint to cancel a recurring transfer.  Scheduled transfer that hasn't been submitted to bank will be cancelled.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/recurring-transfers/#transferrecurringcancel
}
     - parameter transferRecurringCancelRequest: (body)  
     - returns: RequestBuilder<TransferRecurringCancelResponse> 
     */
    open class func transferRecurringCancelWithRequestBuilder(transferRecurringCancelRequest: TransferRecurringCancelRequest) -> RequestBuilder<TransferRecurringCancelResponse> {
        let localVariablePath = "/transfer/recurring/cancel"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferRecurringCancelRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferRecurringCancelResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a recurring transfer
     
     - parameter transferRecurringCreateRequest: (body)  
     - returns: TransferRecurringCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferRecurringCreate(transferRecurringCreateRequest: TransferRecurringCreateRequest) async throws -> TransferRecurringCreateResponse {
        return try await transferRecurringCreateWithRequestBuilder(transferRecurringCreateRequest: transferRecurringCreateRequest).execute().body
    }

    /**
     Create a recurring transfer
     - POST /transfer/recurring/create
     - Use the `/transfer/recurring/create` endpoint to initiate a new recurring transfer. This capability is not currently supported for Transfer UI or Platform Payments (beta) customers.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/recurring-transfers/#transferrecurringcreate
}
     - parameter transferRecurringCreateRequest: (body)  
     - returns: RequestBuilder<TransferRecurringCreateResponse> 
     */
    open class func transferRecurringCreateWithRequestBuilder(transferRecurringCreateRequest: TransferRecurringCreateRequest) -> RequestBuilder<TransferRecurringCreateResponse> {
        let localVariablePath = "/transfer/recurring/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferRecurringCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferRecurringCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve a recurring transfer
     
     - parameter transferRecurringGetRequest: (body)  
     - returns: TransferRecurringGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferRecurringGet(transferRecurringGetRequest: TransferRecurringGetRequest) async throws -> TransferRecurringGetResponse {
        return try await transferRecurringGetWithRequestBuilder(transferRecurringGetRequest: transferRecurringGetRequest).execute().body
    }

    /**
     Retrieve a recurring transfer
     - POST /transfer/recurring/get
     - The `/transfer/recurring/get` fetches information about the recurring transfer corresponding to the given `recurring_transfer_id`.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/recurring-transfers/#transferrecurringget
}
     - parameter transferRecurringGetRequest: (body)  
     - returns: RequestBuilder<TransferRecurringGetResponse> 
     */
    open class func transferRecurringGetWithRequestBuilder(transferRecurringGetRequest: TransferRecurringGetRequest) -> RequestBuilder<TransferRecurringGetResponse> {
        let localVariablePath = "/transfer/recurring/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferRecurringGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferRecurringGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List recurring transfers
     
     - parameter transferRecurringListRequest: (body)  
     - returns: TransferRecurringListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferRecurringList(transferRecurringListRequest: TransferRecurringListRequest) async throws -> TransferRecurringListResponse {
        return try await transferRecurringListWithRequestBuilder(transferRecurringListRequest: transferRecurringListRequest).execute().body
    }

    /**
     List recurring transfers
     - POST /transfer/recurring/list
     - Use the `/transfer/recurring/list` endpoint to see a list of all your recurring transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired recurring transfers. 
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/recurring-transfers/#transferrecurringlist
}
     - parameter transferRecurringListRequest: (body)  
     - returns: RequestBuilder<TransferRecurringListResponse> 
     */
    open class func transferRecurringListWithRequestBuilder(transferRecurringListRequest: TransferRecurringListRequest) -> RequestBuilder<TransferRecurringListResponse> {
        let localVariablePath = "/transfer/recurring/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferRecurringListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferRecurringListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Cancel a refund
     
     - parameter transferRefundCancelRequest: (body)  
     - returns: TransferRefundCancelResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferRefundCancel(transferRefundCancelRequest: TransferRefundCancelRequest) async throws -> TransferRefundCancelResponse {
        return try await transferRefundCancelWithRequestBuilder(transferRefundCancelRequest: transferRefundCancelRequest).execute().body
    }

    /**
     Cancel a refund
     - POST /transfer/refund/cancel
     - Use the `/transfer/refund/cancel` endpoint to cancel a refund.  A refund is eligible for cancellation if it has not yet been submitted to the payment network.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/refunds/#transferrefundcancel
}
     - parameter transferRefundCancelRequest: (body)  
     - returns: RequestBuilder<TransferRefundCancelResponse> 
     */
    open class func transferRefundCancelWithRequestBuilder(transferRefundCancelRequest: TransferRefundCancelRequest) -> RequestBuilder<TransferRefundCancelResponse> {
        let localVariablePath = "/transfer/refund/cancel"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferRefundCancelRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferRefundCancelResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a refund
     
     - parameter transferRefundCreateRequest: (body)  
     - returns: TransferRefundCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferRefundCreate(transferRefundCreateRequest: TransferRefundCreateRequest) async throws -> TransferRefundCreateResponse {
        return try await transferRefundCreateWithRequestBuilder(transferRefundCreateRequest: transferRefundCreateRequest).execute().body
    }

    /**
     Create a refund
     - POST /transfer/refund/create
     - Use the `/transfer/refund/create` endpoint to create a refund for a transfer. A transfer can be refunded if the transfer was initiated in the past 180 days.  Processing of the refund will not occur until at least 4 business days following the transfer's settlement date, plus any hold/settlement delays. This 3-day window helps better protect your business from regular ACH returns. Consumer initiated returns (unauthorized returns) could still happen for about 60 days from the settlement date. If the original transfer is canceled, returned or failed, all pending refunds will automatically be canceled. Processed refunds cannot be revoked.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/refunds/#transferrefundcreate
}
     - parameter transferRefundCreateRequest: (body)  
     - returns: RequestBuilder<TransferRefundCreateResponse> 
     */
    open class func transferRefundCreateWithRequestBuilder(transferRefundCreateRequest: TransferRefundCreateRequest) -> RequestBuilder<TransferRefundCreateResponse> {
        let localVariablePath = "/transfer/refund/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferRefundCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferRefundCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve a refund
     
     - parameter transferRefundGetRequest: (body)  
     - returns: TransferRefundGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferRefundGet(transferRefundGetRequest: TransferRefundGetRequest) async throws -> TransferRefundGetResponse {
        return try await transferRefundGetWithRequestBuilder(transferRefundGetRequest: transferRefundGetRequest).execute().body
    }

    /**
     Retrieve a refund
     - POST /transfer/refund/get
     - The `/transfer/refund/get` endpoint fetches information about the refund corresponding to the given `refund_id`.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/refunds/#transferrefundget
}
     - parameter transferRefundGetRequest: (body)  
     - returns: RequestBuilder<TransferRefundGetResponse> 
     */
    open class func transferRefundGetWithRequestBuilder(transferRefundGetRequest: TransferRefundGetRequest) -> RequestBuilder<TransferRefundGetResponse> {
        let localVariablePath = "/transfer/refund/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferRefundGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferRefundGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Lists historical repayments
     
     - parameter transferRepaymentListRequest: (body)  
     - returns: TransferRepaymentListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferRepaymentList(transferRepaymentListRequest: TransferRepaymentListRequest) async throws -> TransferRepaymentListResponse {
        return try await transferRepaymentListWithRequestBuilder(transferRepaymentListRequest: transferRepaymentListRequest).execute().body
    }

    /**
     Lists historical repayments
     - POST /transfer/repayment/list
     - The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/#transferrepaymentlist
}
     - parameter transferRepaymentListRequest: (body)  
     - returns: RequestBuilder<TransferRepaymentListResponse> 
     */
    open class func transferRepaymentListWithRequestBuilder(transferRepaymentListRequest: TransferRepaymentListRequest) -> RequestBuilder<TransferRepaymentListResponse> {
        let localVariablePath = "/transfer/repayment/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferRepaymentListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferRepaymentListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List the returns included in a repayment
     
     - parameter transferRepaymentReturnListRequest: (body)  
     - returns: TransferRepaymentReturnListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferRepaymentReturnList(transferRepaymentReturnListRequest: TransferRepaymentReturnListRequest) async throws -> TransferRepaymentReturnListResponse {
        return try await transferRepaymentReturnListWithRequestBuilder(transferRepaymentReturnListRequest: transferRepaymentReturnListRequest).execute().body
    }

    /**
     List the returns included in a repayment
     - POST /transfer/repayment/return/list
     - The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/#transferrepaymentreturnlist
}
     - parameter transferRepaymentReturnListRequest: (body)  
     - returns: RequestBuilder<TransferRepaymentReturnListResponse> 
     */
    open class func transferRepaymentReturnListWithRequestBuilder(transferRepaymentReturnListRequest: TransferRepaymentReturnListRequest) -> RequestBuilder<TransferRepaymentReturnListResponse> {
        let localVariablePath = "/transfer/repayment/return/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferRepaymentReturnListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferRepaymentReturnListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve a sweep
     
     - parameter transferSweepGetRequest: (body)  
     - returns: TransferSweepGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferSweepGet(transferSweepGetRequest: TransferSweepGetRequest) async throws -> TransferSweepGetResponse {
        return try await transferSweepGetWithRequestBuilder(transferSweepGetRequest: transferSweepGetRequest).execute().body
    }

    /**
     Retrieve a sweep
     - POST /transfer/sweep/get
     - The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/reading-transfers/#transfersweepget
}
     - parameter transferSweepGetRequest: (body)  
     - returns: RequestBuilder<TransferSweepGetResponse> 
     */
    open class func transferSweepGetWithRequestBuilder(transferSweepGetRequest: TransferSweepGetRequest) -> RequestBuilder<TransferSweepGetResponse> {
        let localVariablePath = "/transfer/sweep/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferSweepGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferSweepGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List sweeps
     
     - parameter transferSweepListRequest: (body)  
     - returns: TransferSweepListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func transferSweepList(transferSweepListRequest: TransferSweepListRequest) async throws -> TransferSweepListResponse {
        return try await transferSweepListWithRequestBuilder(transferSweepListRequest: transferSweepListRequest).execute().body
    }

    /**
     List sweeps
     - POST /transfer/sweep/list
     - The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/transfer/reading-transfers/#transfersweeplist
}
     - parameter transferSweepListRequest: (body)  
     - returns: RequestBuilder<TransferSweepListResponse> 
     */
    open class func transferSweepListWithRequestBuilder(transferSweepListRequest: TransferSweepListRequest) -> RequestBuilder<TransferSweepListResponse> {
        let localVariablePath = "/transfer/sweep/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferSweepListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferSweepListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create user
     
     - parameter userCreateRequest: (body)  
     - returns: UserCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func userCreate(userCreateRequest: UserCreateRequest) async throws -> UserCreateResponse {
        return try await userCreateWithRequestBuilder(userCreateRequest: userCreateRequest).execute().body
    }

    /**
     Create user
     - POST /user/create
     - This endpoint should be called for each of your end users before they begin a Plaid income flow. This provides you a single token to access all income data associated with the user. You should only create one per end user.  If you call the endpoint multiple times with the same `client_user_id`, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given `client_user_id`.  Ensure that you store the `user_token` along with your user's identifier in your database, as it is not possible to retrieve a previously created `user_token`.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/income/#usercreate
}
     - parameter userCreateRequest: (body)  
     - returns: RequestBuilder<UserCreateResponse> 
     */
    open class func userCreateWithRequestBuilder(userCreateRequest: UserCreateRequest) -> RequestBuilder<UserCreateResponse> {
        let localVariablePath = "/user/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update user information
     
     - parameter userUpdateRequest: (body)  
     - returns: UserUpdateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func userUpdate(userUpdateRequest: UserUpdateRequest) async throws -> UserUpdateResponse {
        return try await userUpdateWithRequestBuilder(userUpdateRequest: userUpdateRequest).execute().body
    }

    /**
     Update user information
     - POST /user/update
     - This endpoint is used to update user information associated with an existing `user_token`. The `user_token` should be in the response of `/user/create` call  If you call the endpoint with a non-exist `user_token`, the call will fail with an error message indicating that the user token is not found.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/income/#userupdate
}
     - parameter userUpdateRequest: (body)  
     - returns: RequestBuilder<UserUpdateResponse> 
     */
    open class func userUpdateWithRequestBuilder(userUpdateRequest: UserUpdateRequest) -> RequestBuilder<UserUpdateResponse> {
        let localVariablePath = "/user/update"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserUpdateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create an e-wallet
     
     - parameter walletCreateRequest: (body)  
     - returns: WalletCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func walletCreate(walletCreateRequest: WalletCreateRequest) async throws -> WalletCreateResponse {
        return try await walletCreateWithRequestBuilder(walletCreateRequest: walletCreateRequest).execute().body
    }

    /**
     Create an e-wallet
     - POST /wallet/create
     - Create an e-wallet. The response is the newly created e-wallet object.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/virtual-accounts/#walletcreate
}
     - parameter walletCreateRequest: (body)  
     - returns: RequestBuilder<WalletCreateResponse> 
     */
    open class func walletCreateWithRequestBuilder(walletCreateRequest: WalletCreateRequest) -> RequestBuilder<WalletCreateResponse> {
        let localVariablePath = "/wallet/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: walletCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WalletCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Fetch an e-wallet
     
     - parameter walletGetRequest: (body)  
     - returns: WalletGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func walletGet(walletGetRequest: WalletGetRequest) async throws -> WalletGetResponse {
        return try await walletGetWithRequestBuilder(walletGetRequest: walletGetRequest).execute().body
    }

    /**
     Fetch an e-wallet
     - POST /wallet/get
     - Fetch an e-wallet. The response includes the current balance.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/virtual-accounts/#walletget
}
     - parameter walletGetRequest: (body)  
     - returns: RequestBuilder<WalletGetResponse> 
     */
    open class func walletGetWithRequestBuilder(walletGetRequest: WalletGetRequest) -> RequestBuilder<WalletGetResponse> {
        let localVariablePath = "/wallet/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: walletGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WalletGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Fetch a list of e-wallets
     
     - parameter walletListRequest: (body)  
     - returns: WalletListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func walletList(walletListRequest: WalletListRequest) async throws -> WalletListResponse {
        return try await walletListWithRequestBuilder(walletListRequest: walletListRequest).execute().body
    }

    /**
     Fetch a list of e-wallets
     - POST /wallet/list
     - This endpoint lists all e-wallets in descending order of creation.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/virtual-accounts/#walletlist
}
     - parameter walletListRequest: (body)  
     - returns: RequestBuilder<WalletListResponse> 
     */
    open class func walletListWithRequestBuilder(walletListRequest: WalletListRequest) -> RequestBuilder<WalletListResponse> {
        let localVariablePath = "/wallet/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: walletListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WalletListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Execute a transaction using an e-wallet
     
     - parameter walletTransactionExecuteRequest: (body)  
     - returns: WalletTransactionExecuteResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func walletTransactionExecute(walletTransactionExecuteRequest: WalletTransactionExecuteRequest) async throws -> WalletTransactionExecuteResponse {
        return try await walletTransactionExecuteWithRequestBuilder(walletTransactionExecuteRequest: walletTransactionExecuteRequest).execute().body
    }

    /**
     Execute a transaction using an e-wallet
     - POST /wallet/transaction/execute
     - Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction. Transactions will settle in seconds to several days, depending on the underlying payment rail.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/virtual-accounts/#wallettransactionexecute
}
     - parameter walletTransactionExecuteRequest: (body)  
     - returns: RequestBuilder<WalletTransactionExecuteResponse> 
     */
    open class func walletTransactionExecuteWithRequestBuilder(walletTransactionExecuteRequest: WalletTransactionExecuteRequest) -> RequestBuilder<WalletTransactionExecuteResponse> {
        let localVariablePath = "/wallet/transaction/execute"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: walletTransactionExecuteRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WalletTransactionExecuteResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Fetch an e-wallet transaction
     
     - parameter walletTransactionGetRequest: (body)  
     - returns: WalletTransactionGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func walletTransactionGet(walletTransactionGetRequest: WalletTransactionGetRequest) async throws -> WalletTransactionGetResponse {
        return try await walletTransactionGetWithRequestBuilder(walletTransactionGetRequest: walletTransactionGetRequest).execute().body
    }

    /**
     Fetch an e-wallet transaction
     - POST /wallet/transaction/get
     - Fetch a specific e-wallet transaction
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/virtual-accounts/#wallettransactionget
}
     - parameter walletTransactionGetRequest: (body)  
     - returns: RequestBuilder<WalletTransactionGetResponse> 
     */
    open class func walletTransactionGetWithRequestBuilder(walletTransactionGetRequest: WalletTransactionGetRequest) -> RequestBuilder<WalletTransactionGetResponse> {
        let localVariablePath = "/wallet/transaction/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: walletTransactionGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WalletTransactionGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List e-wallet transactions
     
     - parameter walletTransactionListRequest: (body)  
     - returns: WalletTransactionListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func walletTransactionList(walletTransactionListRequest: WalletTransactionListRequest) async throws -> WalletTransactionListResponse {
        return try await walletTransactionListWithRequestBuilder(walletTransactionListRequest: walletTransactionListRequest).execute().body
    }

    /**
     List e-wallet transactions
     - POST /wallet/transaction/list
     - This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/virtual-accounts/#wallettransactionlist
}
     - parameter walletTransactionListRequest: (body)  
     - returns: RequestBuilder<WalletTransactionListResponse> 
     */
    open class func walletTransactionListWithRequestBuilder(walletTransactionListRequest: WalletTransactionListRequest) -> RequestBuilder<WalletTransactionListResponse> {
        let localVariablePath = "/wallet/transaction/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: walletTransactionListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WalletTransactionListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a watchlist screening for an entity
     
     - parameter watchlistScreeningEntityCreateRequest: (body)  
     - returns: WatchlistScreeningEntityCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func watchlistScreeningEntityCreate(watchlistScreeningEntityCreateRequest: WatchlistScreeningEntityCreateRequest) async throws -> WatchlistScreeningEntityCreateResponse {
        return try await watchlistScreeningEntityCreateWithRequestBuilder(watchlistScreeningEntityCreateRequest: watchlistScreeningEntityCreateRequest).execute().body
    }

    /**
     Create a watchlist screening for an entity
     - POST /watchlist_screening/entity/create
     - Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/monitor/#watchlist_screeningentitycreate
}
     - parameter watchlistScreeningEntityCreateRequest: (body)  
     - returns: RequestBuilder<WatchlistScreeningEntityCreateResponse> 
     */
    open class func watchlistScreeningEntityCreateWithRequestBuilder(watchlistScreeningEntityCreateRequest: WatchlistScreeningEntityCreateRequest) -> RequestBuilder<WatchlistScreeningEntityCreateResponse> {
        let localVariablePath = "/watchlist_screening/entity/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: watchlistScreeningEntityCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WatchlistScreeningEntityCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get an entity screening
     
     - parameter watchlistScreeningEntityGetRequest: (body)  
     - returns: WatchlistScreeningEntityGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func watchlistScreeningEntityGet(watchlistScreeningEntityGetRequest: WatchlistScreeningEntityGetRequest) async throws -> WatchlistScreeningEntityGetResponse {
        return try await watchlistScreeningEntityGetWithRequestBuilder(watchlistScreeningEntityGetRequest: watchlistScreeningEntityGetRequest).execute().body
    }

    /**
     Get an entity screening
     - POST /watchlist_screening/entity/get
     - Retrieve an entity watchlist screening.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/monitor/#watchlist_screeningentityget
}
     - parameter watchlistScreeningEntityGetRequest: (body)  
     - returns: RequestBuilder<WatchlistScreeningEntityGetResponse> 
     */
    open class func watchlistScreeningEntityGetWithRequestBuilder(watchlistScreeningEntityGetRequest: WatchlistScreeningEntityGetRequest) -> RequestBuilder<WatchlistScreeningEntityGetResponse> {
        let localVariablePath = "/watchlist_screening/entity/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: watchlistScreeningEntityGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WatchlistScreeningEntityGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List history for entity watchlist screenings
     
     - parameter watchlistScreeningEntityHistoryListRequest: (body)  
     - returns: WatchlistScreeningEntityHistoryListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func watchlistScreeningEntityHistoryList(watchlistScreeningEntityHistoryListRequest: WatchlistScreeningEntityHistoryListRequest) async throws -> WatchlistScreeningEntityHistoryListResponse {
        return try await watchlistScreeningEntityHistoryListWithRequestBuilder(watchlistScreeningEntityHistoryListRequest: watchlistScreeningEntityHistoryListRequest).execute().body
    }

    /**
     List history for entity watchlist screenings
     - POST /watchlist_screening/entity/history/list
     - List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/monitor/#watchlist_screeningentityhistorylist
}
     - parameter watchlistScreeningEntityHistoryListRequest: (body)  
     - returns: RequestBuilder<WatchlistScreeningEntityHistoryListResponse> 
     */
    open class func watchlistScreeningEntityHistoryListWithRequestBuilder(watchlistScreeningEntityHistoryListRequest: WatchlistScreeningEntityHistoryListRequest) -> RequestBuilder<WatchlistScreeningEntityHistoryListResponse> {
        let localVariablePath = "/watchlist_screening/entity/history/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: watchlistScreeningEntityHistoryListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WatchlistScreeningEntityHistoryListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List hits for entity watchlist screenings
     
     - parameter watchlistScreeningEntityHitListRequest: (body)  
     - returns: WatchlistScreeningEntityHitListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func watchlistScreeningEntityHitList(watchlistScreeningEntityHitListRequest: WatchlistScreeningEntityHitListRequest) async throws -> WatchlistScreeningEntityHitListResponse {
        return try await watchlistScreeningEntityHitListWithRequestBuilder(watchlistScreeningEntityHitListRequest: watchlistScreeningEntityHitListRequest).execute().body
    }

    /**
     List hits for entity watchlist screenings
     - POST /watchlist_screening/entity/hit/list
     - List all hits for the entity watchlist screening.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/monitor/#watchlist_screeningentityhitlist
}
     - parameter watchlistScreeningEntityHitListRequest: (body)  
     - returns: RequestBuilder<WatchlistScreeningEntityHitListResponse> 
     */
    open class func watchlistScreeningEntityHitListWithRequestBuilder(watchlistScreeningEntityHitListRequest: WatchlistScreeningEntityHitListRequest) -> RequestBuilder<WatchlistScreeningEntityHitListResponse> {
        let localVariablePath = "/watchlist_screening/entity/hit/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: watchlistScreeningEntityHitListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WatchlistScreeningEntityHitListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List entity watchlist screenings
     
     - parameter watchlistScreeningEntityListRequest: (body)  
     - returns: WatchlistScreeningEntityListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func watchlistScreeningEntityList(watchlistScreeningEntityListRequest: WatchlistScreeningEntityListRequest) async throws -> WatchlistScreeningEntityListResponse {
        return try await watchlistScreeningEntityListWithRequestBuilder(watchlistScreeningEntityListRequest: watchlistScreeningEntityListRequest).execute().body
    }

    /**
     List entity watchlist screenings
     - POST /watchlist_screening/entity/list
     - List all entity screenings.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/monitor/#watchlist_screeningentitylist
}
     - parameter watchlistScreeningEntityListRequest: (body)  
     - returns: RequestBuilder<WatchlistScreeningEntityListResponse> 
     */
    open class func watchlistScreeningEntityListWithRequestBuilder(watchlistScreeningEntityListRequest: WatchlistScreeningEntityListRequest) -> RequestBuilder<WatchlistScreeningEntityListResponse> {
        let localVariablePath = "/watchlist_screening/entity/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: watchlistScreeningEntityListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WatchlistScreeningEntityListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get entity watchlist screening program
     
     - parameter watchlistScreeningEntityProgramGetRequest: (body)  
     - returns: WatchlistScreeningEntityProgramGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func watchlistScreeningEntityProgramGet(watchlistScreeningEntityProgramGetRequest: WatchlistScreeningEntityProgramGetRequest) async throws -> WatchlistScreeningEntityProgramGetResponse {
        return try await watchlistScreeningEntityProgramGetWithRequestBuilder(watchlistScreeningEntityProgramGetRequest: watchlistScreeningEntityProgramGetRequest).execute().body
    }

    /**
     Get entity watchlist screening program
     - POST /watchlist_screening/entity/program/get
     - Get an entity watchlist screening program
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/monitor/#watchlist_screeningentityprogramget
}
     - parameter watchlistScreeningEntityProgramGetRequest: (body)  
     - returns: RequestBuilder<WatchlistScreeningEntityProgramGetResponse> 
     */
    open class func watchlistScreeningEntityProgramGetWithRequestBuilder(watchlistScreeningEntityProgramGetRequest: WatchlistScreeningEntityProgramGetRequest) -> RequestBuilder<WatchlistScreeningEntityProgramGetResponse> {
        let localVariablePath = "/watchlist_screening/entity/program/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: watchlistScreeningEntityProgramGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WatchlistScreeningEntityProgramGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List entity watchlist screening programs
     
     - parameter watchlistScreeningEntityProgramListRequest: (body)  
     - returns: WatchlistScreeningEntityProgramListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func watchlistScreeningEntityProgramList(watchlistScreeningEntityProgramListRequest: WatchlistScreeningEntityProgramListRequest) async throws -> WatchlistScreeningEntityProgramListResponse {
        return try await watchlistScreeningEntityProgramListWithRequestBuilder(watchlistScreeningEntityProgramListRequest: watchlistScreeningEntityProgramListRequest).execute().body
    }

    /**
     List entity watchlist screening programs
     - POST /watchlist_screening/entity/program/list
     - List all entity watchlist screening programs
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/monitor/#watchlist_screeningentityprogramlist
}
     - parameter watchlistScreeningEntityProgramListRequest: (body)  
     - returns: RequestBuilder<WatchlistScreeningEntityProgramListResponse> 
     */
    open class func watchlistScreeningEntityProgramListWithRequestBuilder(watchlistScreeningEntityProgramListRequest: WatchlistScreeningEntityProgramListRequest) -> RequestBuilder<WatchlistScreeningEntityProgramListResponse> {
        let localVariablePath = "/watchlist_screening/entity/program/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: watchlistScreeningEntityProgramListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WatchlistScreeningEntityProgramListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a review for an entity watchlist screening
     
     - parameter watchlistScreeningEntityReviewCreateRequest: (body)  
     - returns: WatchlistScreeningEntityReviewCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func watchlistScreeningEntityReviewCreate(watchlistScreeningEntityReviewCreateRequest: WatchlistScreeningEntityReviewCreateRequest) async throws -> WatchlistScreeningEntityReviewCreateResponse {
        return try await watchlistScreeningEntityReviewCreateWithRequestBuilder(watchlistScreeningEntityReviewCreateRequest: watchlistScreeningEntityReviewCreateRequest).execute().body
    }

    /**
     Create a review for an entity watchlist screening
     - POST /watchlist_screening/entity/review/create
     - Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/monitor/#watchlist_screeningentityreviewcreate
}
     - parameter watchlistScreeningEntityReviewCreateRequest: (body)  
     - returns: RequestBuilder<WatchlistScreeningEntityReviewCreateResponse> 
     */
    open class func watchlistScreeningEntityReviewCreateWithRequestBuilder(watchlistScreeningEntityReviewCreateRequest: WatchlistScreeningEntityReviewCreateRequest) -> RequestBuilder<WatchlistScreeningEntityReviewCreateResponse> {
        let localVariablePath = "/watchlist_screening/entity/review/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: watchlistScreeningEntityReviewCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WatchlistScreeningEntityReviewCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List reviews for entity watchlist screenings
     
     - parameter watchlistScreeningEntityReviewListRequest: (body)  
     - returns: WatchlistScreeningEntityReviewListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func watchlistScreeningEntityReviewList(watchlistScreeningEntityReviewListRequest: WatchlistScreeningEntityReviewListRequest) async throws -> WatchlistScreeningEntityReviewListResponse {
        return try await watchlistScreeningEntityReviewListWithRequestBuilder(watchlistScreeningEntityReviewListRequest: watchlistScreeningEntityReviewListRequest).execute().body
    }

    /**
     List reviews for entity watchlist screenings
     - POST /watchlist_screening/entity/review/list
     - List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/monitor/#watchlist_screeningentityreviewlist
}
     - parameter watchlistScreeningEntityReviewListRequest: (body)  
     - returns: RequestBuilder<WatchlistScreeningEntityReviewListResponse> 
     */
    open class func watchlistScreeningEntityReviewListWithRequestBuilder(watchlistScreeningEntityReviewListRequest: WatchlistScreeningEntityReviewListRequest) -> RequestBuilder<WatchlistScreeningEntityReviewListResponse> {
        let localVariablePath = "/watchlist_screening/entity/review/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: watchlistScreeningEntityReviewListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WatchlistScreeningEntityReviewListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update an entity screening
     
     - parameter watchlistScreeningEntityUpdateRequest: (body) The entity screening was successfully updated. 
     - returns: WatchlistScreeningEntityUpdateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func watchlistScreeningEntityUpdate(watchlistScreeningEntityUpdateRequest: WatchlistScreeningEntityUpdateRequest) async throws -> WatchlistScreeningEntityUpdateResponse {
        return try await watchlistScreeningEntityUpdateWithRequestBuilder(watchlistScreeningEntityUpdateRequest: watchlistScreeningEntityUpdateRequest).execute().body
    }

    /**
     Update an entity screening
     - POST /watchlist_screening/entity/update
     - Update an entity watchlist screening.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/monitor/#watchlist_screeningentityupdate
}
     - parameter watchlistScreeningEntityUpdateRequest: (body) The entity screening was successfully updated. 
     - returns: RequestBuilder<WatchlistScreeningEntityUpdateResponse> 
     */
    open class func watchlistScreeningEntityUpdateWithRequestBuilder(watchlistScreeningEntityUpdateRequest: WatchlistScreeningEntityUpdateRequest) -> RequestBuilder<WatchlistScreeningEntityUpdateResponse> {
        let localVariablePath = "/watchlist_screening/entity/update"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: watchlistScreeningEntityUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WatchlistScreeningEntityUpdateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a watchlist screening for a person
     
     - parameter watchlistScreeningIndividualCreateRequest: (body)  
     - returns: WatchlistScreeningIndividualCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func watchlistScreeningIndividualCreate(watchlistScreeningIndividualCreateRequest: WatchlistScreeningIndividualCreateRequest) async throws -> WatchlistScreeningIndividualCreateResponse {
        return try await watchlistScreeningIndividualCreateWithRequestBuilder(watchlistScreeningIndividualCreateRequest: watchlistScreeningIndividualCreateRequest).execute().body
    }

    /**
     Create a watchlist screening for a person
     - POST /watchlist_screening/individual/create
     - Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/monitor/#watchlist_screeningindividualcreate
}
     - parameter watchlistScreeningIndividualCreateRequest: (body)  
     - returns: RequestBuilder<WatchlistScreeningIndividualCreateResponse> 
     */
    open class func watchlistScreeningIndividualCreateWithRequestBuilder(watchlistScreeningIndividualCreateRequest: WatchlistScreeningIndividualCreateRequest) -> RequestBuilder<WatchlistScreeningIndividualCreateResponse> {
        let localVariablePath = "/watchlist_screening/individual/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: watchlistScreeningIndividualCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WatchlistScreeningIndividualCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve an individual watchlist screening
     
     - parameter watchlistScreeningIndividualGetRequest: (body)  
     - returns: WatchlistScreeningIndividualGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func watchlistScreeningIndividualGet(watchlistScreeningIndividualGetRequest: WatchlistScreeningIndividualGetRequest) async throws -> WatchlistScreeningIndividualGetResponse {
        return try await watchlistScreeningIndividualGetWithRequestBuilder(watchlistScreeningIndividualGetRequest: watchlistScreeningIndividualGetRequest).execute().body
    }

    /**
     Retrieve an individual watchlist screening
     - POST /watchlist_screening/individual/get
     - Retrieve a previously created individual watchlist screening
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/monitor/#watchlist_screeningindividualget
}
     - parameter watchlistScreeningIndividualGetRequest: (body)  
     - returns: RequestBuilder<WatchlistScreeningIndividualGetResponse> 
     */
    open class func watchlistScreeningIndividualGetWithRequestBuilder(watchlistScreeningIndividualGetRequest: WatchlistScreeningIndividualGetRequest) -> RequestBuilder<WatchlistScreeningIndividualGetResponse> {
        let localVariablePath = "/watchlist_screening/individual/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: watchlistScreeningIndividualGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WatchlistScreeningIndividualGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List history for individual watchlist screenings
     
     - parameter watchlistScreeningIndividualHistoryListRequest: (body)  
     - returns: WatchlistScreeningIndividualHistoryListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func watchlistScreeningIndividualHistoryList(watchlistScreeningIndividualHistoryListRequest: WatchlistScreeningIndividualHistoryListRequest) async throws -> WatchlistScreeningIndividualHistoryListResponse {
        return try await watchlistScreeningIndividualHistoryListWithRequestBuilder(watchlistScreeningIndividualHistoryListRequest: watchlistScreeningIndividualHistoryListRequest).execute().body
    }

    /**
     List history for individual watchlist screenings
     - POST /watchlist_screening/individual/history/list
     - List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/monitor/#watchlist_screeningindividualhistorylist
}
     - parameter watchlistScreeningIndividualHistoryListRequest: (body)  
     - returns: RequestBuilder<WatchlistScreeningIndividualHistoryListResponse> 
     */
    open class func watchlistScreeningIndividualHistoryListWithRequestBuilder(watchlistScreeningIndividualHistoryListRequest: WatchlistScreeningIndividualHistoryListRequest) -> RequestBuilder<WatchlistScreeningIndividualHistoryListResponse> {
        let localVariablePath = "/watchlist_screening/individual/history/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: watchlistScreeningIndividualHistoryListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WatchlistScreeningIndividualHistoryListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List hits for individual watchlist screening
     
     - parameter watchlistScreeningIndividualHitListRequest: (body)  
     - returns: WatchlistScreeningIndividualHitListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func watchlistScreeningIndividualHitList(watchlistScreeningIndividualHitListRequest: WatchlistScreeningIndividualHitListRequest) async throws -> WatchlistScreeningIndividualHitListResponse {
        return try await watchlistScreeningIndividualHitListWithRequestBuilder(watchlistScreeningIndividualHitListRequest: watchlistScreeningIndividualHitListRequest).execute().body
    }

    /**
     List hits for individual watchlist screening
     - POST /watchlist_screening/individual/hit/list
     - List all hits found by Plaid for a particular individual watchlist screening.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/monitor/#watchlist_screeningindividualhitlist
}
     - parameter watchlistScreeningIndividualHitListRequest: (body)  
     - returns: RequestBuilder<WatchlistScreeningIndividualHitListResponse> 
     */
    open class func watchlistScreeningIndividualHitListWithRequestBuilder(watchlistScreeningIndividualHitListRequest: WatchlistScreeningIndividualHitListRequest) -> RequestBuilder<WatchlistScreeningIndividualHitListResponse> {
        let localVariablePath = "/watchlist_screening/individual/hit/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: watchlistScreeningIndividualHitListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WatchlistScreeningIndividualHitListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List Individual Watchlist Screenings
     
     - parameter watchlistScreeningIndividualListRequest: (body)  
     - returns: WatchlistScreeningIndividualListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func watchlistScreeningIndividualList(watchlistScreeningIndividualListRequest: WatchlistScreeningIndividualListRequest) async throws -> WatchlistScreeningIndividualListResponse {
        return try await watchlistScreeningIndividualListWithRequestBuilder(watchlistScreeningIndividualListRequest: watchlistScreeningIndividualListRequest).execute().body
    }

    /**
     List Individual Watchlist Screenings
     - POST /watchlist_screening/individual/list
     - List previously created watchlist screenings for individuals
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/monitor/#watchlist_screeningindividuallist
}
     - parameter watchlistScreeningIndividualListRequest: (body)  
     - returns: RequestBuilder<WatchlistScreeningIndividualListResponse> 
     */
    open class func watchlistScreeningIndividualListWithRequestBuilder(watchlistScreeningIndividualListRequest: WatchlistScreeningIndividualListRequest) -> RequestBuilder<WatchlistScreeningIndividualListResponse> {
        let localVariablePath = "/watchlist_screening/individual/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: watchlistScreeningIndividualListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WatchlistScreeningIndividualListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get individual watchlist screening program
     
     - parameter watchlistScreeningIndividualProgramGetRequest: (body)  
     - returns: WatchlistScreeningIndividualProgramGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func watchlistScreeningIndividualProgramGet(watchlistScreeningIndividualProgramGetRequest: WatchlistScreeningIndividualProgramGetRequest) async throws -> WatchlistScreeningIndividualProgramGetResponse {
        return try await watchlistScreeningIndividualProgramGetWithRequestBuilder(watchlistScreeningIndividualProgramGetRequest: watchlistScreeningIndividualProgramGetRequest).execute().body
    }

    /**
     Get individual watchlist screening program
     - POST /watchlist_screening/individual/program/get
     - Get an individual watchlist screening program
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/monitor/#watchlist_screeningindividualprogramget
}
     - parameter watchlistScreeningIndividualProgramGetRequest: (body)  
     - returns: RequestBuilder<WatchlistScreeningIndividualProgramGetResponse> 
     */
    open class func watchlistScreeningIndividualProgramGetWithRequestBuilder(watchlistScreeningIndividualProgramGetRequest: WatchlistScreeningIndividualProgramGetRequest) -> RequestBuilder<WatchlistScreeningIndividualProgramGetResponse> {
        let localVariablePath = "/watchlist_screening/individual/program/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: watchlistScreeningIndividualProgramGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WatchlistScreeningIndividualProgramGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List individual watchlist screening programs
     
     - parameter watchlistScreeningIndividualProgramListRequest: (body)  
     - returns: WatchlistScreeningIndividualProgramListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func watchlistScreeningIndividualProgramList(watchlistScreeningIndividualProgramListRequest: WatchlistScreeningIndividualProgramListRequest) async throws -> WatchlistScreeningIndividualProgramListResponse {
        return try await watchlistScreeningIndividualProgramListWithRequestBuilder(watchlistScreeningIndividualProgramListRequest: watchlistScreeningIndividualProgramListRequest).execute().body
    }

    /**
     List individual watchlist screening programs
     - POST /watchlist_screening/individual/program/list
     - List all individual watchlist screening programs
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/monitor/#watchlist_screeningindividualprogramlist
}
     - parameter watchlistScreeningIndividualProgramListRequest: (body)  
     - returns: RequestBuilder<WatchlistScreeningIndividualProgramListResponse> 
     */
    open class func watchlistScreeningIndividualProgramListWithRequestBuilder(watchlistScreeningIndividualProgramListRequest: WatchlistScreeningIndividualProgramListRequest) -> RequestBuilder<WatchlistScreeningIndividualProgramListResponse> {
        let localVariablePath = "/watchlist_screening/individual/program/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: watchlistScreeningIndividualProgramListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WatchlistScreeningIndividualProgramListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a review for an individual watchlist screening
     
     - parameter watchlistScreeningIndividualReviewCreateRequest: (body)  
     - returns: WatchlistScreeningIndividualReviewCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func watchlistScreeningIndividualReviewCreate(watchlistScreeningIndividualReviewCreateRequest: WatchlistScreeningIndividualReviewCreateRequest) async throws -> WatchlistScreeningIndividualReviewCreateResponse {
        return try await watchlistScreeningIndividualReviewCreateWithRequestBuilder(watchlistScreeningIndividualReviewCreateRequest: watchlistScreeningIndividualReviewCreateRequest).execute().body
    }

    /**
     Create a review for an individual watchlist screening
     - POST /watchlist_screening/individual/review/create
     - Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/monitor/#watchlist_screeningindividualreviewcreate
}
     - parameter watchlistScreeningIndividualReviewCreateRequest: (body)  
     - returns: RequestBuilder<WatchlistScreeningIndividualReviewCreateResponse> 
     */
    open class func watchlistScreeningIndividualReviewCreateWithRequestBuilder(watchlistScreeningIndividualReviewCreateRequest: WatchlistScreeningIndividualReviewCreateRequest) -> RequestBuilder<WatchlistScreeningIndividualReviewCreateResponse> {
        let localVariablePath = "/watchlist_screening/individual/review/create"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: watchlistScreeningIndividualReviewCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WatchlistScreeningIndividualReviewCreateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List reviews for individual watchlist screenings
     
     - parameter watchlistScreeningIndividualReviewListRequest: (body)  
     - returns: WatchlistScreeningIndividualReviewListResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func watchlistScreeningIndividualReviewList(watchlistScreeningIndividualReviewListRequest: WatchlistScreeningIndividualReviewListRequest) async throws -> WatchlistScreeningIndividualReviewListResponse {
        return try await watchlistScreeningIndividualReviewListWithRequestBuilder(watchlistScreeningIndividualReviewListRequest: watchlistScreeningIndividualReviewListRequest).execute().body
    }

    /**
     List reviews for individual watchlist screenings
     - POST /watchlist_screening/individual/review/list
     - List all reviews for the individual watchlist screening.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/monitor/#watchlist_screeningindividualreviewlist
}
     - parameter watchlistScreeningIndividualReviewListRequest: (body)  
     - returns: RequestBuilder<WatchlistScreeningIndividualReviewListResponse> 
     */
    open class func watchlistScreeningIndividualReviewListWithRequestBuilder(watchlistScreeningIndividualReviewListRequest: WatchlistScreeningIndividualReviewListRequest) -> RequestBuilder<WatchlistScreeningIndividualReviewListResponse> {
        let localVariablePath = "/watchlist_screening/individual/review/list"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: watchlistScreeningIndividualReviewListRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WatchlistScreeningIndividualReviewListResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update individual watchlist screening
     
     - parameter watchlistScreeningIndividualUpdateRequest: (body)  
     - returns: WatchlistScreeningIndividualUpdateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func watchlistScreeningIndividualUpdate(watchlistScreeningIndividualUpdateRequest: WatchlistScreeningIndividualUpdateRequest) async throws -> WatchlistScreeningIndividualUpdateResponse {
        return try await watchlistScreeningIndividualUpdateWithRequestBuilder(watchlistScreeningIndividualUpdateRequest: watchlistScreeningIndividualUpdateRequest).execute().body
    }

    /**
     Update individual watchlist screening
     - POST /watchlist_screening/individual/update
     - Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update `search_terms` and `status` at the same time since editing `search_terms` may trigger an automatic `status` change.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/products/monitor/#watchlist_screeningindividualupdate
}
     - parameter watchlistScreeningIndividualUpdateRequest: (body)  
     - returns: RequestBuilder<WatchlistScreeningIndividualUpdateResponse> 
     */
    open class func watchlistScreeningIndividualUpdateWithRequestBuilder(watchlistScreeningIndividualUpdateRequest: WatchlistScreeningIndividualUpdateRequest) -> RequestBuilder<WatchlistScreeningIndividualUpdateResponse> {
        let localVariablePath = "/watchlist_screening/individual/update"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: watchlistScreeningIndividualUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WatchlistScreeningIndividualUpdateResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get webhook verification key
     
     - parameter webhookVerificationKeyGetRequest: (body)  
     - returns: WebhookVerificationKeyGetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func webhookVerificationKeyGet(webhookVerificationKeyGetRequest: WebhookVerificationKeyGetRequest) async throws -> WebhookVerificationKeyGetResponse {
        return try await webhookVerificationKeyGetWithRequestBuilder(webhookVerificationKeyGetRequest: webhookVerificationKeyGetRequest).execute().body
    }

    /**
     Get webhook verification key
     - POST /webhook_verification_key/get
     - Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
     - API Key:
       - type: apiKey PLAID-CLIENT-ID (HEADER)
       - name: clientId
     - API Key:
       - type: apiKey Plaid-Version (HEADER)
       - name: plaidVersion
     - API Key:
       - type: apiKey PLAID-SECRET (HEADER)
       - name: secret
     - externalDocs: class ExternalDocumentation {
    description: null
    url: /api/webhooks/webhook-verification/#get-webhook-verification-key
}
     - parameter webhookVerificationKeyGetRequest: (body)  
     - returns: RequestBuilder<WebhookVerificationKeyGetResponse> 
     */
    open class func webhookVerificationKeyGetWithRequestBuilder(webhookVerificationKeyGetRequest: WebhookVerificationKeyGetRequest) -> RequestBuilder<WebhookVerificationKeyGetResponse> {
        let localVariablePath = "/webhook_verification_key/get"
        let localVariableURLString = PlaidAPIConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: webhookVerificationKeyGetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhookVerificationKeyGetResponse>.Type = PlaidAPIConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
