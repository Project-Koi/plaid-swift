//
// ProductStatusBreakdown.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A detailed breakdown of the institution&#39;s performance for a request type. The values for &#x60;success&#x60;, &#x60;error_plaid&#x60;, and &#x60;error_institution&#x60; sum to 1. The time range used for calculating the breakdown may range from the most recent few minutes to the past six hours. In general, smaller institutions will show status that was calculated over a longer period of time. For Investment updates, which are refreshed less frequently, the period assessed may be 24 hours or more. For more details, see [Institution status details](https://plaid.com/docs/account/activity/#institution-status-details). */
public struct ProductStatusBreakdown: Codable, JSONEncodable, Hashable {

    public enum RefreshInterval: String, Codable, CaseIterable {
        case normal = "NORMAL"
        case delayed = "DELAYED"
        case stopped = "STOPPED"
    }
    /** The percentage of login attempts that are successful, expressed as a decimal. */
    public var success: Double
    /** The percentage of logins that are failing due to an internal Plaid issue, expressed as a decimal.  */
    public var errorPlaid: Double
    /** The percentage of logins that are failing due to an issue in the institution's system, expressed as a decimal. */
    public var errorInstitution: Double
    /** The `refresh_interval` may be `DELAYED` or `STOPPED` even when the success rate is high. This value is only returned for Transactions status breakdowns. */
    public var refreshInterval: RefreshInterval?

    public init(success: Double, errorPlaid: Double, errorInstitution: Double, refreshInterval: RefreshInterval? = nil) {
        self.success = success
        self.errorPlaid = errorPlaid
        self.errorInstitution = errorInstitution
        self.refreshInterval = refreshInterval
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case success
        case errorPlaid = "error_plaid"
        case errorInstitution = "error_institution"
        case refreshInterval = "refresh_interval"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(success, forKey: .success)
        try container.encode(errorPlaid, forKey: .errorPlaid)
        try container.encode(errorInstitution, forKey: .errorInstitution)
        try container.encodeIfPresent(refreshInterval, forKey: .refreshInterval)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        success = try container.decode(Double.self, forKey: .success)
        errorPlaid = try container.decode(Double.self, forKey: .errorPlaid)
        errorInstitution = try container.decode(Double.self, forKey: .errorInstitution)
        refreshInterval = try container.decodeIfPresent(RefreshInterval.self, forKey: .refreshInterval)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("success")
        nonAdditionalPropertyKeys.insert("error_plaid")
        nonAdditionalPropertyKeys.insert("error_institution")
        nonAdditionalPropertyKeys.insert("refresh_interval")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

