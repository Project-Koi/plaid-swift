//
// PayrollIncomeRateOfPay.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An object representing the rate at which an individual is paid. */
public struct PayrollIncomeRateOfPay: Codable, JSONEncodable, Hashable {

    /** The rate at which an employee is paid. */
    public var payRate: String?
    /** The amount at which an employee is paid. */
    public var payAmount: Double?

    public init(payRate: String? = nil, payAmount: Double? = nil) {
        self.payRate = payRate
        self.payAmount = payAmount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case payRate = "pay_rate"
        case payAmount = "pay_amount"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(payRate, forKey: .payRate)
        try container.encodeIfPresent(payAmount, forKey: .payAmount)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        payRate = try container.decodeIfPresent(String.self, forKey: .payRate)
        payAmount = try container.decodeIfPresent(Double.self, forKey: .payAmount)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("pay_rate")
        nonAdditionalPropertyKeys.insert("pay_amount")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

