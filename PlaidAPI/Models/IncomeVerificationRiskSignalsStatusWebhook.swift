//
// IncomeVerificationRiskSignalsStatusWebhook.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Fired when risk signals have been processed for documents uploaded via Document Income. It will typically take a minute or two for this webhook to fire after the end user has uploaded their documents in the Document Income flow. Once this webhook has fired, &#x60;/credit/payroll_income/risk_signals/get&#x60; may then be called to determine whether the documents were successfully processed and to retrieve risk data. */
public struct IncomeVerificationRiskSignalsStatusWebhook: Codable, JSONEncodable, Hashable {

    /** `\"INCOME\"` */
    public var webhookType: String
    /** `INCOME_VERIFICATION_RISK_SIGNALS` */
    public var webhookCode: String
    /** The Item ID associated with the verification. */
    public var itemId: String
    /** The Plaid `user_id` of the User associated with this webhook, warning, or error. */
    public var userId: String?
    /** `RISK_SIGNALS_PROCESSING_COMPLETE`: The income verification fraud detection processing has completed. If the user uploaded multiple documents, this webhook will fire when all documents have finished processing. Call the `/credit/payroll_income/risk_signals/get` endpoint to get all risk signal data. */
    public var riskSignalsStatus: String?
    public var environment: WebhookEnvironmentValues

    public init(webhookType: String, webhookCode: String, itemId: String, userId: String? = nil, riskSignalsStatus: String? = nil, environment: WebhookEnvironmentValues) {
        self.webhookType = webhookType
        self.webhookCode = webhookCode
        self.itemId = itemId
        self.userId = userId
        self.riskSignalsStatus = riskSignalsStatus
        self.environment = environment
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case webhookType = "webhook_type"
        case webhookCode = "webhook_code"
        case itemId = "item_id"
        case userId = "user_id"
        case riskSignalsStatus = "risk_signals_status"
        case environment
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(webhookType, forKey: .webhookType)
        try container.encode(webhookCode, forKey: .webhookCode)
        try container.encode(itemId, forKey: .itemId)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(riskSignalsStatus, forKey: .riskSignalsStatus)
        try container.encode(environment, forKey: .environment)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        webhookType = try container.decode(String.self, forKey: .webhookType)
        webhookCode = try container.decode(String.self, forKey: .webhookCode)
        itemId = try container.decode(String.self, forKey: .itemId)
        userId = try container.decodeIfPresent(String.self, forKey: .userId)
        riskSignalsStatus = try container.decodeIfPresent(String.self, forKey: .riskSignalsStatus)
        environment = try container.decode(WebhookEnvironmentValues.self, forKey: .environment)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("webhook_type")
        nonAdditionalPropertyKeys.insert("webhook_code")
        nonAdditionalPropertyKeys.insert("item_id")
        nonAdditionalPropertyKeys.insert("user_id")
        nonAdditionalPropertyKeys.insert("risk_signals_status")
        nonAdditionalPropertyKeys.insert("environment")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

