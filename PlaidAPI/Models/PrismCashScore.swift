//
// PrismCashScore.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The data from the Cash Score product returned by Prism. */
public struct PrismCashScore: Codable, JSONEncodable, Hashable {

    /** The version of Prism's cash score model used. */
    public var version: Int
    /** The score returned by Prism. Ranges from 1-999, with higher score indicating lower risk. */
    public var score: Int
    /** The reasons for an individual having risk according to the cash score. */
    public var reasonCodes: [String]?
    public var metadata: PrismCashScoreMetadata?

    public init(version: Int, score: Int, reasonCodes: [String]? = nil, metadata: PrismCashScoreMetadata? = nil) {
        self.version = version
        self.score = score
        self.reasonCodes = reasonCodes
        self.metadata = metadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case version
        case score
        case reasonCodes = "reason_codes"
        case metadata
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(version, forKey: .version)
        try container.encode(score, forKey: .score)
        try container.encodeIfPresent(reasonCodes, forKey: .reasonCodes)
        try container.encodeIfPresent(metadata, forKey: .metadata)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        version = try container.decode(Int.self, forKey: .version)
        score = try container.decode(Int.self, forKey: .score)
        reasonCodes = try container.decodeIfPresent([String].self, forKey: .reasonCodes)
        metadata = try container.decodeIfPresent(PrismCashScoreMetadata.self, forKey: .metadata)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("version")
        nonAdditionalPropertyKeys.insert("score")
        nonAdditionalPropertyKeys.insert("reason_codes")
        nonAdditionalPropertyKeys.insert("metadata")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

