//
// LinkTokenCreateRequestUserStatedIncomeSource.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Specifies user stated income sources for the Income product */
public struct LinkTokenCreateRequestUserStatedIncomeSource: Codable, JSONEncodable, Hashable {

    /** The employer corresponding to an income source specified by the user */
    public var employer: String?
    public var category: UserStatedIncomeSourceCategory?
    /** The income amount paid per cycle for a specified income source */
    public var payPerCycle: Double?
    /** The income amount paid annually for a specified income source */
    public var payAnnual: Double?
    public var payType: UserStatedIncomeSourcePayType?
    public var payFrequency: UserStatedIncomeSourceFrequency?

    public init(employer: String? = nil, category: UserStatedIncomeSourceCategory? = nil, payPerCycle: Double? = nil, payAnnual: Double? = nil, payType: UserStatedIncomeSourcePayType? = nil, payFrequency: UserStatedIncomeSourceFrequency? = nil) {
        self.employer = employer
        self.category = category
        self.payPerCycle = payPerCycle
        self.payAnnual = payAnnual
        self.payType = payType
        self.payFrequency = payFrequency
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case employer
        case category
        case payPerCycle = "pay_per_cycle"
        case payAnnual = "pay_annual"
        case payType = "pay_type"
        case payFrequency = "pay_frequency"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(employer, forKey: .employer)
        try container.encodeIfPresent(category, forKey: .category)
        try container.encodeIfPresent(payPerCycle, forKey: .payPerCycle)
        try container.encodeIfPresent(payAnnual, forKey: .payAnnual)
        try container.encodeIfPresent(payType, forKey: .payType)
        try container.encodeIfPresent(payFrequency, forKey: .payFrequency)
    }
}

