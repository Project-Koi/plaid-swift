//
// ItemActivityListResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Describes a historical log of user consent events. */
public struct ItemActivityListResponse: Codable, JSONEncodable, Hashable {

    /** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
    public var requestId: String
    /** A list of activities. */
    public var activities: [Activity]
    /** An array of objects containing timestamps for the last time each data type was accessed per application. */
    public var lastDataAccessTimes: [LastDataAccessTimes]
    /** Cursor used for pagination. */
    public var cursor: String?

    public init(requestId: String, activities: [Activity], lastDataAccessTimes: [LastDataAccessTimes], cursor: String? = nil) {
        self.requestId = requestId
        self.activities = activities
        self.lastDataAccessTimes = lastDataAccessTimes
        self.cursor = cursor
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case requestId = "request_id"
        case activities
        case lastDataAccessTimes = "last_data_access_times"
        case cursor
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(requestId, forKey: .requestId)
        try container.encode(activities, forKey: .activities)
        try container.encode(lastDataAccessTimes, forKey: .lastDataAccessTimes)
        try container.encodeIfPresent(cursor, forKey: .cursor)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        requestId = try container.decode(String.self, forKey: .requestId)
        activities = try container.decode([Activity].self, forKey: .activities)
        lastDataAccessTimes = try container.decode([LastDataAccessTimes].self, forKey: .lastDataAccessTimes)
        cursor = try container.decodeIfPresent(String.self, forKey: .cursor)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("request_id")
        nonAdditionalPropertyKeys.insert("activities")
        nonAdditionalPropertyKeys.insert("last_data_access_times")
        nonAdditionalPropertyKeys.insert("cursor")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

