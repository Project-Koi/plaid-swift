//
// AssetReportFilterRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** AssetReportFilterRequest defines the request schema for &#x60;/asset_report/filter&#x60; */
public struct AssetReportFilterRequest: Codable, JSONEncodable, Hashable {

    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report. */
    public var assetReportToken: String
    /** The accounts to exclude from the Asset Report, identified by `account_id`. */
    public var accountIdsToExclude: [String]

    public init(clientId: String? = nil, secret: String? = nil, assetReportToken: String, accountIdsToExclude: [String]) {
        self.clientId = clientId
        self.secret = secret
        self.assetReportToken = assetReportToken
        self.accountIdsToExclude = accountIdsToExclude
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case assetReportToken = "asset_report_token"
        case accountIdsToExclude = "account_ids_to_exclude"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encode(assetReportToken, forKey: .assetReportToken)
        try container.encode(accountIdsToExclude, forKey: .accountIdsToExclude)
    }
}

