//
// IncomeBreakdown.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An object representing a breakdown of the different income types on the paystub. */
@available(*, deprecated, message: "This schema is deprecated.")
public struct IncomeBreakdown: Codable, JSONEncodable, Hashable {

    public var type: IncomeBreakdownType?
    /** The hourly rate at which the income is paid. */
    public var rate: Double?
    /** The number of hours logged for this income for this pay period. */
    public var hours: Double?
    /** The total pay for this pay period. */
    public var total: Double?

    public init(type: IncomeBreakdownType?, rate: Double?, hours: Double?, total: Double?) {
        self.type = type
        self.rate = rate
        self.hours = hours
        self.total = total
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case rate
        case hours
        case total
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(rate, forKey: .rate)
        try container.encode(hours, forKey: .hours)
        try container.encode(total, forKey: .total)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        type = try container.decodeIfPresent(IncomeBreakdownType.self, forKey: .type)
        rate = try container.decodeIfPresent(Double.self, forKey: .rate)
        hours = try container.decodeIfPresent(Double.self, forKey: .hours)
        total = try container.decodeIfPresent(Double.self, forKey: .total)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("type")
        nonAdditionalPropertyKeys.insert("rate")
        nonAdditionalPropertyKeys.insert("hours")
        nonAdditionalPropertyKeys.insert("total")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

