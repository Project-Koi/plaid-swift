//
// PayStubDistributionBreakdown.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Information about the accounts that the payment was distributed to. */
public struct PayStubDistributionBreakdown: Codable, JSONEncodable, Hashable {

    /** Name of the account for the given distribution. */
    public var accountName: String?
    /** The name of the bank that the payment is being deposited to. */
    public var bankName: String?
    /** The amount distributed to this account. */
    public var currentAmount: Double?
    /** The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null. */
    public var isoCurrencyCode: String?
    /** The last 2-4 alphanumeric characters of an account's official account number. */
    public var mask: String?
    /** Type of the account that the paystub was sent to (e.g. 'checking'). */
    public var type: String?
    /** The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s. */
    public var unofficialCurrencyCode: String?

    public init(accountName: String?, bankName: String?, currentAmount: Double?, isoCurrencyCode: String?, mask: String?, type: String?, unofficialCurrencyCode: String?) {
        self.accountName = accountName
        self.bankName = bankName
        self.currentAmount = currentAmount
        self.isoCurrencyCode = isoCurrencyCode
        self.mask = mask
        self.type = type
        self.unofficialCurrencyCode = unofficialCurrencyCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountName = "account_name"
        case bankName = "bank_name"
        case currentAmount = "current_amount"
        case isoCurrencyCode = "iso_currency_code"
        case mask
        case type
        case unofficialCurrencyCode = "unofficial_currency_code"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(accountName, forKey: .accountName)
        try container.encode(bankName, forKey: .bankName)
        try container.encode(currentAmount, forKey: .currentAmount)
        try container.encode(isoCurrencyCode, forKey: .isoCurrencyCode)
        try container.encode(mask, forKey: .mask)
        try container.encode(type, forKey: .type)
        try container.encode(unofficialCurrencyCode, forKey: .unofficialCurrencyCode)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        accountName = try container.decodeIfPresent(String.self, forKey: .accountName)
        bankName = try container.decodeIfPresent(String.self, forKey: .bankName)
        currentAmount = try container.decodeIfPresent(Double.self, forKey: .currentAmount)
        isoCurrencyCode = try container.decodeIfPresent(String.self, forKey: .isoCurrencyCode)
        mask = try container.decodeIfPresent(String.self, forKey: .mask)
        type = try container.decodeIfPresent(String.self, forKey: .type)
        unofficialCurrencyCode = try container.decodeIfPresent(String.self, forKey: .unofficialCurrencyCode)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("account_name")
        nonAdditionalPropertyKeys.insert("bank_name")
        nonAdditionalPropertyKeys.insert("current_amount")
        nonAdditionalPropertyKeys.insert("iso_currency_code")
        nonAdditionalPropertyKeys.insert("mask")
        nonAdditionalPropertyKeys.insert("type")
        nonAdditionalPropertyKeys.insert("unofficial_currency_code")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

