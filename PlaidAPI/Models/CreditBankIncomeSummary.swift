//
// CreditBankIncomeSummary.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Summary for bank income across all income sources and items (max history of 730 days). */
public struct CreditBankIncomeSummary: Codable, JSONEncodable, Hashable {

    /** Total amount of earnings across all the income sources in the end user's Items for the days requested by the client. This may return an incorrect value if the summary includes income sources in multiple currencies. Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-bank-income-summary-total-amounts) instead. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var totalAmount: Double?
    /** The ISO 4217 currency code of the amount or balance. Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-bank-income-summary-total-amounts) instead. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var isoCurrencyCode: String?
    /** The unofficial currency code associated with the amount or balance. Always `null` if `iso_currency_code` is non-null. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries. Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-bank-income-summary-total-amounts) instead. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var unofficialCurrencyCode: String?
    /** Total amount of earnings across all the income sources in the end user's Items for the days requested by the client. This can contain multiple amounts, with each amount denominated in one unique currency. */
    public var totalAmounts: [CreditAmountWithCurrency]?
    /** The earliest date within the days requested in which all income sources identified by Plaid appear in a user's account. The date will be returned in an ISO 8601 format (YYYY-MM-DD). */
    public var startDate: Date?
    /** The latest date in which all income sources identified by Plaid appear in the user's account. The date will be returned in an ISO 8601 format (YYYY-MM-DD). */
    public var endDate: Date?
    /** Number of income sources per end user. */
    public var incomeSourcesCount: Int?
    /** Number of income categories per end user. */
    public var incomeCategoriesCount: Int?
    /** Number of income transactions per end user. */
    public var incomeTransactionsCount: Int?
    public var historicalSummary: [CreditBankIncomeHistoricalSummary]?

    public init(totalAmount: Double? = nil, isoCurrencyCode: String? = nil, unofficialCurrencyCode: String? = nil, totalAmounts: [CreditAmountWithCurrency]? = nil, startDate: Date? = nil, endDate: Date? = nil, incomeSourcesCount: Int? = nil, incomeCategoriesCount: Int? = nil, incomeTransactionsCount: Int? = nil, historicalSummary: [CreditBankIncomeHistoricalSummary]? = nil) {
        self.totalAmount = totalAmount
        self.isoCurrencyCode = isoCurrencyCode
        self.unofficialCurrencyCode = unofficialCurrencyCode
        self.totalAmounts = totalAmounts
        self.startDate = startDate
        self.endDate = endDate
        self.incomeSourcesCount = incomeSourcesCount
        self.incomeCategoriesCount = incomeCategoriesCount
        self.incomeTransactionsCount = incomeTransactionsCount
        self.historicalSummary = historicalSummary
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case totalAmount = "total_amount"
        case isoCurrencyCode = "iso_currency_code"
        case unofficialCurrencyCode = "unofficial_currency_code"
        case totalAmounts = "total_amounts"
        case startDate = "start_date"
        case endDate = "end_date"
        case incomeSourcesCount = "income_sources_count"
        case incomeCategoriesCount = "income_categories_count"
        case incomeTransactionsCount = "income_transactions_count"
        case historicalSummary = "historical_summary"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(totalAmount, forKey: .totalAmount)
        try container.encodeIfPresent(isoCurrencyCode, forKey: .isoCurrencyCode)
        try container.encodeIfPresent(unofficialCurrencyCode, forKey: .unofficialCurrencyCode)
        try container.encodeIfPresent(totalAmounts, forKey: .totalAmounts)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encodeIfPresent(endDate, forKey: .endDate)
        try container.encodeIfPresent(incomeSourcesCount, forKey: .incomeSourcesCount)
        try container.encodeIfPresent(incomeCategoriesCount, forKey: .incomeCategoriesCount)
        try container.encodeIfPresent(incomeTransactionsCount, forKey: .incomeTransactionsCount)
        try container.encodeIfPresent(historicalSummary, forKey: .historicalSummary)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        totalAmount = try container.decodeIfPresent(Double.self, forKey: .totalAmount)
        isoCurrencyCode = try container.decodeIfPresent(String.self, forKey: .isoCurrencyCode)
        unofficialCurrencyCode = try container.decodeIfPresent(String.self, forKey: .unofficialCurrencyCode)
        totalAmounts = try container.decodeIfPresent([CreditAmountWithCurrency].self, forKey: .totalAmounts)
        startDate = try container.decodeIfPresent(Date.self, forKey: .startDate)
        endDate = try container.decodeIfPresent(Date.self, forKey: .endDate)
        incomeSourcesCount = try container.decodeIfPresent(Int.self, forKey: .incomeSourcesCount)
        incomeCategoriesCount = try container.decodeIfPresent(Int.self, forKey: .incomeCategoriesCount)
        incomeTransactionsCount = try container.decodeIfPresent(Int.self, forKey: .incomeTransactionsCount)
        historicalSummary = try container.decodeIfPresent([CreditBankIncomeHistoricalSummary].self, forKey: .historicalSummary)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("total_amount")
        nonAdditionalPropertyKeys.insert("iso_currency_code")
        nonAdditionalPropertyKeys.insert("unofficial_currency_code")
        nonAdditionalPropertyKeys.insert("total_amounts")
        nonAdditionalPropertyKeys.insert("start_date")
        nonAdditionalPropertyKeys.insert("end_date")
        nonAdditionalPropertyKeys.insert("income_sources_count")
        nonAdditionalPropertyKeys.insert("income_categories_count")
        nonAdditionalPropertyKeys.insert("income_transactions_count")
        nonAdditionalPropertyKeys.insert("historical_summary")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

