//
// ItemStatusInvestments.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Information about the last successful and failed investments update for the Item. */
public struct ItemStatusInvestments: Codable, JSONEncodable, Hashable {

    /** [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of the last successful investments update for the Item. The status will update each time Plaid successfully connects with the institution, regardless of whether any new data is available in the update. */
    public var lastSuccessfulUpdate: Date?
    /** [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of the last failed investments update for the Item. The status will update each time Plaid fails an attempt to connect with the institution, regardless of whether any new data is available in the update. */
    public var lastFailedUpdate: Date?

    public init(lastSuccessfulUpdate: Date? = nil, lastFailedUpdate: Date? = nil) {
        self.lastSuccessfulUpdate = lastSuccessfulUpdate
        self.lastFailedUpdate = lastFailedUpdate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case lastSuccessfulUpdate = "last_successful_update"
        case lastFailedUpdate = "last_failed_update"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(lastSuccessfulUpdate, forKey: .lastSuccessfulUpdate)
        try container.encodeIfPresent(lastFailedUpdate, forKey: .lastFailedUpdate)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        lastSuccessfulUpdate = try container.decodeIfPresent(Date.self, forKey: .lastSuccessfulUpdate)
        lastFailedUpdate = try container.decodeIfPresent(Date.self, forKey: .lastFailedUpdate)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("last_successful_update")
        nonAdditionalPropertyKeys.insert("last_failed_update")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

