//
// JWKPublicKey.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A JSON Web Key (JWK) that can be used in conjunction with [JWT libraries](https://jwt.io/#libraries-io) to verify Plaid webhooks */
public struct JWKPublicKey: Codable, JSONEncodable, Hashable {

    /** The alg member identifies the cryptographic algorithm family used with the key. */
    public var alg: String
    /** The crv member identifies the cryptographic curve used with the key. */
    public var crv: String
    /** The kid (Key ID) member can be used to match a specific key. This can be used, for instance, to choose among a set of keys within the JWK during key rollover. */
    public var kid: String
    /** The kty (key type) parameter identifies the cryptographic algorithm family used with the key, such as RSA or EC. */
    public var kty: String
    /** The use (public key use) parameter identifies the intended use of the public key. */
    public var use: String
    /** The x member contains the x coordinate for the elliptic curve point, provided as a base64url-encoded string of the coordinate's big endian representation. */
    public var x: String
    /** The y member contains the y coordinate for the elliptic curve point, provided as a base64url-encoded string of the coordinate's big endian representation. */
    public var y: String
    /** The timestamp when the key was created, in Unix time. */
    public var createdAt: Int
    /** The timestamp when the key expired, in Unix time. */
    public var expiredAt: Int?

    public init(alg: String, crv: String, kid: String, kty: String, use: String, x: String, y: String, createdAt: Int, expiredAt: Int?) {
        self.alg = alg
        self.crv = crv
        self.kid = kid
        self.kty = kty
        self.use = use
        self.x = x
        self.y = y
        self.createdAt = createdAt
        self.expiredAt = expiredAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case alg
        case crv
        case kid
        case kty
        case use
        case x
        case y
        case createdAt = "created_at"
        case expiredAt = "expired_at"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(alg, forKey: .alg)
        try container.encode(crv, forKey: .crv)
        try container.encode(kid, forKey: .kid)
        try container.encode(kty, forKey: .kty)
        try container.encode(use, forKey: .use)
        try container.encode(x, forKey: .x)
        try container.encode(y, forKey: .y)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(expiredAt, forKey: .expiredAt)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        alg = try container.decode(String.self, forKey: .alg)
        crv = try container.decode(String.self, forKey: .crv)
        kid = try container.decode(String.self, forKey: .kid)
        kty = try container.decode(String.self, forKey: .kty)
        use = try container.decode(String.self, forKey: .use)
        x = try container.decode(String.self, forKey: .x)
        y = try container.decode(String.self, forKey: .y)
        createdAt = try container.decode(Int.self, forKey: .createdAt)
        expiredAt = try container.decodeIfPresent(Int.self, forKey: .expiredAt)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("alg")
        nonAdditionalPropertyKeys.insert("crv")
        nonAdditionalPropertyKeys.insert("kid")
        nonAdditionalPropertyKeys.insert("kty")
        nonAdditionalPropertyKeys.insert("use")
        nonAdditionalPropertyKeys.insert("x")
        nonAdditionalPropertyKeys.insert("y")
        nonAdditionalPropertyKeys.insert("created_at")
        nonAdditionalPropertyKeys.insert("expired_at")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

