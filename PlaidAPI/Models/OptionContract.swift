//
// OptionContract.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Details about the option security.  For the Sandbox environment, this data is currently only available if the item is using a custom configuration object, and the &#x60;ticker&#x60; field of the custom security follows the [OCC Option Symbol](https://en.wikipedia.org/wiki/Option_symbol#The_OCC_Option_Symbol) standard with no spaces. */
public struct OptionContract: Codable, JSONEncodable, Hashable {

    /** The type of this option contract. It is one of:  `put`: for Put option contracts  `call`: for Call option contracts */
    public var contractType: String
    /** The expiration date for this option contract, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. */
    public var expirationDate: Date
    /** The strike price for this option contract, per share of security. */
    public var strikePrice: Double
    /** The ticker of the underlying security for this option contract. */
    public var underlyingSecurityTicker: String

    public init(contractType: String, expirationDate: Date, strikePrice: Double, underlyingSecurityTicker: String) {
        self.contractType = contractType
        self.expirationDate = expirationDate
        self.strikePrice = strikePrice
        self.underlyingSecurityTicker = underlyingSecurityTicker
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case contractType = "contract_type"
        case expirationDate = "expiration_date"
        case strikePrice = "strike_price"
        case underlyingSecurityTicker = "underlying_security_ticker"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(contractType, forKey: .contractType)
        try container.encode(expirationDate, forKey: .expirationDate)
        try container.encode(strikePrice, forKey: .strikePrice)
        try container.encode(underlyingSecurityTicker, forKey: .underlyingSecurityTicker)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        contractType = try container.decode(String.self, forKey: .contractType)
        expirationDate = try container.decode(Date.self, forKey: .expirationDate)
        strikePrice = try container.decode(Double.self, forKey: .strikePrice)
        underlyingSecurityTicker = try container.decode(String.self, forKey: .underlyingSecurityTicker)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("contract_type")
        nonAdditionalPropertyKeys.insert("expiration_date")
        nonAdditionalPropertyKeys.insert("strike_price")
        nonAdditionalPropertyKeys.insert("underlying_security_ticker")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

