//
// ProcessorTransactionsGetRequestOptions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An optional object to be used with the request. If specified, &#x60;options&#x60; must not be &#x60;null&#x60;. */
public struct ProcessorTransactionsGetRequestOptions: Codable, JSONEncodable, Hashable {

    static let countRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 500, exclusiveMaximum: false, multipleOf: nil)
    static let offsetRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** The number of transactions to fetch. */
    public var count: Int? = 100
    /** The number of transactions to skip. The default value is 0. */
    public var offset: Int? = 0
    /** Include the raw unparsed transaction description from the financial institution. */
    public var includeOriginalDescription: Bool? = false
    /** Personal finance categories are now returned by default. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var includePersonalFinanceCategoryBeta: Bool? = false
    /** Personal finance categories are now returned by default. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var includePersonalFinanceCategory: Bool? = false
    /** Counterparties and extra merchant fields are now returned by default. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var includeLogoAndCounterpartyBeta: Bool? = false

    public init(count: Int? = 100, offset: Int? = 0, includeOriginalDescription: Bool? = false, includePersonalFinanceCategoryBeta: Bool? = false, includePersonalFinanceCategory: Bool? = false, includeLogoAndCounterpartyBeta: Bool? = false) {
        self.count = count
        self.offset = offset
        self.includeOriginalDescription = includeOriginalDescription
        self.includePersonalFinanceCategoryBeta = includePersonalFinanceCategoryBeta
        self.includePersonalFinanceCategory = includePersonalFinanceCategory
        self.includeLogoAndCounterpartyBeta = includeLogoAndCounterpartyBeta
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case count
        case offset
        case includeOriginalDescription = "include_original_description"
        case includePersonalFinanceCategoryBeta = "include_personal_finance_category_beta"
        case includePersonalFinanceCategory = "include_personal_finance_category"
        case includeLogoAndCounterpartyBeta = "include_logo_and_counterparty_beta"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(offset, forKey: .offset)
        try container.encodeIfPresent(includeOriginalDescription, forKey: .includeOriginalDescription)
        try container.encodeIfPresent(includePersonalFinanceCategoryBeta, forKey: .includePersonalFinanceCategoryBeta)
        try container.encodeIfPresent(includePersonalFinanceCategory, forKey: .includePersonalFinanceCategory)
        try container.encodeIfPresent(includeLogoAndCounterpartyBeta, forKey: .includeLogoAndCounterpartyBeta)
    }
}

