//
// PaymentInitiationStandingOrderMetadata.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Metadata specifically related to valid Payment Initiation standing order configurations for the institution. */
public struct PaymentInitiationStandingOrderMetadata: Codable, JSONEncodable, Hashable {

    /** Indicates whether the institution supports closed-ended standing orders by providing an end date. */
    public var supportsStandingOrderEndDate: Bool
    /** This is only applicable to `MONTHLY` standing orders. Indicates whether the institution supports negative integers (-1 to -5) for setting up a `MONTHLY` standing order relative to the end of the month. */
    public var supportsStandingOrderNegativeExecutionDays: Bool
    /** A list of the valid standing order intervals supported by the institution. */
    public var validStandingOrderIntervals: [PaymentScheduleInterval]

    public init(supportsStandingOrderEndDate: Bool, supportsStandingOrderNegativeExecutionDays: Bool, validStandingOrderIntervals: [PaymentScheduleInterval]) {
        self.supportsStandingOrderEndDate = supportsStandingOrderEndDate
        self.supportsStandingOrderNegativeExecutionDays = supportsStandingOrderNegativeExecutionDays
        self.validStandingOrderIntervals = validStandingOrderIntervals
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case supportsStandingOrderEndDate = "supports_standing_order_end_date"
        case supportsStandingOrderNegativeExecutionDays = "supports_standing_order_negative_execution_days"
        case validStandingOrderIntervals = "valid_standing_order_intervals"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(supportsStandingOrderEndDate, forKey: .supportsStandingOrderEndDate)
        try container.encode(supportsStandingOrderNegativeExecutionDays, forKey: .supportsStandingOrderNegativeExecutionDays)
        try container.encode(validStandingOrderIntervals, forKey: .validStandingOrderIntervals)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        supportsStandingOrderEndDate = try container.decode(Bool.self, forKey: .supportsStandingOrderEndDate)
        supportsStandingOrderNegativeExecutionDays = try container.decode(Bool.self, forKey: .supportsStandingOrderNegativeExecutionDays)
        validStandingOrderIntervals = try container.decode([PaymentScheduleInterval].self, forKey: .validStandingOrderIntervals)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("supports_standing_order_end_date")
        nonAdditionalPropertyKeys.insert("supports_standing_order_negative_execution_days")
        nonAdditionalPropertyKeys.insert("valid_standing_order_intervals")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

