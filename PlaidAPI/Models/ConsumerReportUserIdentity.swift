//
// ConsumerReportUserIdentity.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** ConsumerReportUserIdentity defines the user identity data collected for consumer report purpose. This field is required to be set if you later use the created user for consumer report purpose. */
public struct ConsumerReportUserIdentity: Codable, JSONEncodable, Hashable {

    /** The user's first name */
    public var firstName: String
    /** The user's last name */
    public var lastName: String
    /** The user's phone numbers. The format of phone number will be validated and for better normalization, it is expected to be in E.164 format +{countrycode}{number}, for example `+14151234567`. */
    public var phoneNumbers: [String]
    /** The user's emails */
    public var emails: [String]
    public var primaryAddress: AddressData

    public init(firstName: String, lastName: String, phoneNumbers: [String], emails: [String], primaryAddress: AddressData) {
        self.firstName = firstName
        self.lastName = lastName
        self.phoneNumbers = phoneNumbers
        self.emails = emails
        self.primaryAddress = primaryAddress
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case firstName = "first_name"
        case lastName = "last_name"
        case phoneNumbers = "phone_numbers"
        case emails
        case primaryAddress = "primary_address"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(firstName, forKey: .firstName)
        try container.encode(lastName, forKey: .lastName)
        try container.encode(phoneNumbers, forKey: .phoneNumbers)
        try container.encode(emails, forKey: .emails)
        try container.encode(primaryAddress, forKey: .primaryAddress)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        firstName = try container.decode(String.self, forKey: .firstName)
        lastName = try container.decode(String.self, forKey: .lastName)
        phoneNumbers = try container.decode([String].self, forKey: .phoneNumbers)
        emails = try container.decode([String].self, forKey: .emails)
        primaryAddress = try container.decode(AddressData.self, forKey: .primaryAddress)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("first_name")
        nonAdditionalPropertyKeys.insert("last_name")
        nonAdditionalPropertyKeys.insert("phone_numbers")
        nonAdditionalPropertyKeys.insert("emails")
        nonAdditionalPropertyKeys.insert("primary_address")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

