//
// UserCreateRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** UserCreateRequest defines the request schema for &#x60;/user/create&#x60; */
public struct UserCreateRequest: Codable, JSONEncodable, Hashable {

    static let clientUserIdRule = StringRule(minLength: 1, maxLength: 128, pattern: nil)
    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** A unique ID representing the end user. Maximum of 128 characters. Typically this will be a user ID number from your application. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`. */
    public var clientUserId: String
    public var consumerReportUserIdentity: ConsumerReportUserIdentity?

    public init(clientId: String? = nil, secret: String? = nil, clientUserId: String, consumerReportUserIdentity: ConsumerReportUserIdentity? = nil) {
        self.clientId = clientId
        self.secret = secret
        self.clientUserId = clientUserId
        self.consumerReportUserIdentity = consumerReportUserIdentity
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case clientUserId = "client_user_id"
        case consumerReportUserIdentity = "consumer_report_user_identity"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encode(clientUserId, forKey: .clientUserId)
        try container.encodeIfPresent(consumerReportUserIdentity, forKey: .consumerReportUserIdentity)
    }
}

