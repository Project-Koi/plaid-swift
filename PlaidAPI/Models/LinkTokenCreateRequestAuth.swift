//
// LinkTokenCreateRequestAuth.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Specifies options for initializing Link for use with the Auth product. This field can be used to enable or disable extended Auth flows for the resulting Link session. Omitting any field will result in a default that can be configured by your account manager. The default behavior described in the documentation is the default behavior that will apply if you have not requested your account manager to apply a different default. */
public struct LinkTokenCreateRequestAuth: Codable, JSONEncodable, Hashable {

    public enum RerouteToCredentials: String, Codable, CaseIterable {
        case off = "OFF"
        case _optional = "OPTIONAL"
        case forced = "FORCED"
    }
    public enum FlowType: String, Codable, CaseIterable {
        case flexibleAuth = "FLEXIBLE_AUTH"
    }
    /** Specifies whether Auth Type Select is enabled for the Link session, allowing the end user to choose between linking via a credentials-based flow (i.e. Instant Auth, Instant Match, Automated Micro-deposits) or a manual flow that does not require login (all other Auth flows) prior to selecting their financial institution. Default behavior is `false`. */
    public var authTypeSelectEnabled: Bool?
    /** Specifies whether the Link session is enabled for the Automated Micro-deposits flow. Default behavior is `false`. */
    public var automatedMicrodepositsEnabled: Bool?
    /** Specifies whether the Link session is enabled for the Instant Match flow. Instant Match is enabled by default. Instant Match can be disabled by setting this field to `false`. */
    public var instantMatchEnabled: Bool?
    /** Specifies whether the Link session is enabled for the Same Day Micro-deposits flow.  Default behavior is `false`. */
    public var sameDayMicrodepositsEnabled: Bool?
    /** Specifies whether the Link session is enabled for the Instant Micro-deposits flow.  Default behavior for Plaid teams created after November 2023 is `false`; default behavior for Plaid teams created before that date is `true`. */
    public var instantMicrodepositsEnabled: Bool?
    /** Specifies what type of [Reroute to Credentials](https://plaid.com/docs/auth/coverage/same-day/#reroute-to-credentials) pane should be used in the Link session for the Same Day Micro-deposits flow. Default behavior is `OPTIONAL`. */
    public var rerouteToCredentials: RerouteToCredentials?
    /** Specifies whether the Link session is enabled for the Database Match flow. Default behavior is `false`. */
    public var databaseMatchEnabled: Bool?
    /** Specifies whether the Link session is enabled for the Database Insights flow. Database Insights is currently in closed beta; for access, contact your Account Manager. Default behavior is `false`. */
    public var databaseInsightsEnabled: Bool?
    /** This field has been deprecated in favor of `auth_type_select_enabled`. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var flowType: FlowType?
    /** Specifies whether the Link session is enabled for SMS micro-deposits verification. Default behavior is `true`. */
    public var smsMicrodepositsVerificationEnabled: Bool?

    public init(authTypeSelectEnabled: Bool? = nil, automatedMicrodepositsEnabled: Bool? = nil, instantMatchEnabled: Bool? = nil, sameDayMicrodepositsEnabled: Bool? = nil, instantMicrodepositsEnabled: Bool? = nil, rerouteToCredentials: RerouteToCredentials? = nil, databaseMatchEnabled: Bool? = nil, databaseInsightsEnabled: Bool? = nil, flowType: FlowType? = nil, smsMicrodepositsVerificationEnabled: Bool? = nil) {
        self.authTypeSelectEnabled = authTypeSelectEnabled
        self.automatedMicrodepositsEnabled = automatedMicrodepositsEnabled
        self.instantMatchEnabled = instantMatchEnabled
        self.sameDayMicrodepositsEnabled = sameDayMicrodepositsEnabled
        self.instantMicrodepositsEnabled = instantMicrodepositsEnabled
        self.rerouteToCredentials = rerouteToCredentials
        self.databaseMatchEnabled = databaseMatchEnabled
        self.databaseInsightsEnabled = databaseInsightsEnabled
        self.flowType = flowType
        self.smsMicrodepositsVerificationEnabled = smsMicrodepositsVerificationEnabled
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case authTypeSelectEnabled = "auth_type_select_enabled"
        case automatedMicrodepositsEnabled = "automated_microdeposits_enabled"
        case instantMatchEnabled = "instant_match_enabled"
        case sameDayMicrodepositsEnabled = "same_day_microdeposits_enabled"
        case instantMicrodepositsEnabled = "instant_microdeposits_enabled"
        case rerouteToCredentials = "reroute_to_credentials"
        case databaseMatchEnabled = "database_match_enabled"
        case databaseInsightsEnabled = "database_insights_enabled"
        case flowType = "flow_type"
        case smsMicrodepositsVerificationEnabled = "sms_microdeposits_verification_enabled"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(authTypeSelectEnabled, forKey: .authTypeSelectEnabled)
        try container.encodeIfPresent(automatedMicrodepositsEnabled, forKey: .automatedMicrodepositsEnabled)
        try container.encodeIfPresent(instantMatchEnabled, forKey: .instantMatchEnabled)
        try container.encodeIfPresent(sameDayMicrodepositsEnabled, forKey: .sameDayMicrodepositsEnabled)
        try container.encodeIfPresent(instantMicrodepositsEnabled, forKey: .instantMicrodepositsEnabled)
        try container.encodeIfPresent(rerouteToCredentials, forKey: .rerouteToCredentials)
        try container.encodeIfPresent(databaseMatchEnabled, forKey: .databaseMatchEnabled)
        try container.encodeIfPresent(databaseInsightsEnabled, forKey: .databaseInsightsEnabled)
        try container.encodeIfPresent(flowType, forKey: .flowType)
        try container.encodeIfPresent(smsMicrodepositsVerificationEnabled, forKey: .smsMicrodepositsVerificationEnabled)
    }
}

