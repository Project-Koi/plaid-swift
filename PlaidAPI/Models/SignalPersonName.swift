//
// SignalPersonName.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The user&#39;s legal name */
public struct SignalPersonName: Codable, JSONEncodable, Hashable {

    /** The user's name prefix (e.g. \"Mr.\") */
    public var _prefix: String?
    /** The user's given name. If the user has a one-word name, it should be provided in this field. */
    public var givenName: String?
    /** The user's middle name */
    public var middleName: String?
    /** The user's family name / surname */
    public var familyName: String?
    /** The user's name suffix (e.g. \"II\") */
    public var suffix: String?

    public init(_prefix: String? = nil, givenName: String? = nil, middleName: String? = nil, familyName: String? = nil, suffix: String? = nil) {
        self._prefix = _prefix
        self.givenName = givenName
        self.middleName = middleName
        self.familyName = familyName
        self.suffix = suffix
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _prefix = "prefix"
        case givenName = "given_name"
        case middleName = "middle_name"
        case familyName = "family_name"
        case suffix
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(_prefix, forKey: ._prefix)
        try container.encodeIfPresent(givenName, forKey: .givenName)
        try container.encodeIfPresent(middleName, forKey: .middleName)
        try container.encodeIfPresent(familyName, forKey: .familyName)
        try container.encodeIfPresent(suffix, forKey: .suffix)
    }
}

