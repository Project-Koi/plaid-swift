//
// BankTransfer.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Represents a bank transfer within the Bank Transfers API. */
public struct BankTransfer: Codable, JSONEncodable, Hashable {

    /** Plaid’s unique identifier for a bank transfer. */
    public var id: String
    public var achClass: ACHClass
    /** The account ID that should be credited/debited for this bank transfer. */
    public var accountId: String
    public var type: BankTransferType
    public var user: BankTransferUser
    /** The amount of the bank transfer (decimal string with two digits of precision e.g. \"10.00\"). */
    public var amount: String
    /** The currency of the transfer amount, e.g. \"USD\" */
    public var isoCurrencyCode: String
    /** The description of the transfer. */
    public var description: String
    /** The datetime when this bank transfer was created. This will be of the form `2006-01-02T15:04:05Z` */
    public var created: Date
    public var status: BankTransferStatus
    public var network: BankTransferNetwork
    /** When `true`, you can still cancel this bank transfer. */
    public var cancellable: Bool
    public var failureReason: BankTransferFailure?
    /** A string containing the custom tag provided by the client in the create request. Will be null if not provided. */
    public var customTag: String?
    /** The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: The JSON values must be Strings (no nested JSON objects allowed) Only ASCII characters may be used Maximum of 50 key/value pairs Maximum key length of 40 characters Maximum value length of 500 characters  */
    public var metadata: [String: String]?
    /** Plaid’s unique identifier for the origination account that was used for this transfer. */
    public var originationAccountId: String
    public var direction: BankTransferDirection?

    public init(id: String, achClass: ACHClass, accountId: String, type: BankTransferType, user: BankTransferUser, amount: String, isoCurrencyCode: String, description: String, created: Date, status: BankTransferStatus, network: BankTransferNetwork, cancellable: Bool, failureReason: BankTransferFailure?, customTag: String?, metadata: [String: String]?, originationAccountId: String, direction: BankTransferDirection?) {
        self.id = id
        self.achClass = achClass
        self.accountId = accountId
        self.type = type
        self.user = user
        self.amount = amount
        self.isoCurrencyCode = isoCurrencyCode
        self.description = description
        self.created = created
        self.status = status
        self.network = network
        self.cancellable = cancellable
        self.failureReason = failureReason
        self.customTag = customTag
        self.metadata = metadata
        self.originationAccountId = originationAccountId
        self.direction = direction
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case achClass = "ach_class"
        case accountId = "account_id"
        case type
        case user
        case amount
        case isoCurrencyCode = "iso_currency_code"
        case description
        case created
        case status
        case network
        case cancellable
        case failureReason = "failure_reason"
        case customTag = "custom_tag"
        case metadata
        case originationAccountId = "origination_account_id"
        case direction
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(achClass, forKey: .achClass)
        try container.encode(accountId, forKey: .accountId)
        try container.encode(type, forKey: .type)
        try container.encode(user, forKey: .user)
        try container.encode(amount, forKey: .amount)
        try container.encode(isoCurrencyCode, forKey: .isoCurrencyCode)
        try container.encode(description, forKey: .description)
        try container.encode(created, forKey: .created)
        try container.encode(status, forKey: .status)
        try container.encode(network, forKey: .network)
        try container.encode(cancellable, forKey: .cancellable)
        try container.encode(failureReason, forKey: .failureReason)
        try container.encode(customTag, forKey: .customTag)
        try container.encode(metadata, forKey: .metadata)
        try container.encode(originationAccountId, forKey: .originationAccountId)
        try container.encode(direction, forKey: .direction)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decode(String.self, forKey: .id)
        achClass = try container.decode(ACHClass.self, forKey: .achClass)
        accountId = try container.decode(String.self, forKey: .accountId)
        type = try container.decode(BankTransferType.self, forKey: .type)
        user = try container.decode(BankTransferUser.self, forKey: .user)
        amount = try container.decode(String.self, forKey: .amount)
        isoCurrencyCode = try container.decode(String.self, forKey: .isoCurrencyCode)
        description = try container.decode(String.self, forKey: .description)
        created = try container.decode(Date.self, forKey: .created)
        status = try container.decode(BankTransferStatus.self, forKey: .status)
        network = try container.decode(BankTransferNetwork.self, forKey: .network)
        cancellable = try container.decode(Bool.self, forKey: .cancellable)
        failureReason = try container.decodeIfPresent(BankTransferFailure.self, forKey: .failureReason)
        customTag = try container.decodeIfPresent(String.self, forKey: .customTag)
        metadata = try container.decodeIfPresent([String: String].self, forKey: .metadata)
        originationAccountId = try container.decode(String.self, forKey: .originationAccountId)
        direction = try container.decodeIfPresent(BankTransferDirection.self, forKey: .direction)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("id")
        nonAdditionalPropertyKeys.insert("ach_class")
        nonAdditionalPropertyKeys.insert("account_id")
        nonAdditionalPropertyKeys.insert("type")
        nonAdditionalPropertyKeys.insert("user")
        nonAdditionalPropertyKeys.insert("amount")
        nonAdditionalPropertyKeys.insert("iso_currency_code")
        nonAdditionalPropertyKeys.insert("description")
        nonAdditionalPropertyKeys.insert("created")
        nonAdditionalPropertyKeys.insert("status")
        nonAdditionalPropertyKeys.insert("network")
        nonAdditionalPropertyKeys.insert("cancellable")
        nonAdditionalPropertyKeys.insert("failure_reason")
        nonAdditionalPropertyKeys.insert("custom_tag")
        nonAdditionalPropertyKeys.insert("metadata")
        nonAdditionalPropertyKeys.insert("origination_account_id")
        nonAdditionalPropertyKeys.insert("direction")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

