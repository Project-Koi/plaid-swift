//
// Warning.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** It is possible for an Asset Report to be returned with missing account owner information. In such cases, the Asset Report will contain warning data in the response, indicating why obtaining the owner information failed. */
public struct Warning: Codable, JSONEncodable, Hashable {

    public enum WarningCode: String, Codable, CaseIterable {
        case ownersUnavailable = "OWNERS_UNAVAILABLE"
        case investmentsUnavailable = "INVESTMENTS_UNAVAILABLE"
        case transactionsUnavailable = "TRANSACTIONS_UNAVAILABLE"
    }
    /** The warning type, which will always be `ASSET_REPORT_WARNING` */
    public var warningType: String
    /** The warning code identifies a specific kind of warning. `OWNERS_UNAVAILABLE` indicates that account-owner information is not available.`INVESTMENTS_UNAVAILABLE` indicates that Investments specific information is not available. `TRANSACTIONS_UNAVAILABLE` indicates that transactions information associated with Credit and Depository accounts are unavailable. */
    public var warningCode: WarningCode
    public var cause: Cause

    public init(warningType: String, warningCode: WarningCode, cause: Cause) {
        self.warningType = warningType
        self.warningCode = warningCode
        self.cause = cause
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case warningType = "warning_type"
        case warningCode = "warning_code"
        case cause
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(warningType, forKey: .warningType)
        try container.encode(warningCode, forKey: .warningCode)
        try container.encode(cause, forKey: .cause)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        warningType = try container.decode(String.self, forKey: .warningType)
        warningCode = try container.decode(WarningCode.self, forKey: .warningCode)
        cause = try container.decode(Cause.self, forKey: .cause)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("warning_type")
        nonAdditionalPropertyKeys.insert("warning_code")
        nonAdditionalPropertyKeys.insert("cause")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

