//
// PaymentStatusUpdateWebhook.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Fired when the status of a payment has changed. */
public struct PaymentStatusUpdateWebhook: Codable, JSONEncodable, Hashable {

    /** `PAYMENT_INITIATION` */
    public var webhookType: String
    /** `PAYMENT_STATUS_UPDATE` */
    public var webhookCode: String
    /** The `payment_id` for the payment being updated */
    public var paymentId: String
    /** The transaction ID that this payment is associated with, if any. This is present only when a payment was initiated using virtual accounts. */
    public var transactionId: String?
    public var newPaymentStatus: PaymentInitiationPaymentStatus
    public var oldPaymentStatus: PaymentInitiationPaymentStatus
    /** The original value of the reference when creating the payment. */
    public var originalReference: String?
    /** The value of the reference sent to the bank after adjustment to pass bank validation rules. */
    public var adjustedReference: String?
    /** The original value of the `start_date` provided during the creation of a standing order. If the payment is not a standing order, this field will be `null`. */
    public var originalStartDate: Date?
    /** The start date sent to the bank after adjusting for holidays or weekends.  Will be provided in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). If the start date did not require adjustment, or if the payment is not a standing order, this field will be `null`. */
    public var adjustedStartDate: Date?
    /** The timestamp of the update, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `\"2017-09-14T14:42:19.350Z\"` */
    public var timestamp: Date
    public var error: PlaidError?
    public var environment: WebhookEnvironmentValues

    public init(webhookType: String, webhookCode: String, paymentId: String, transactionId: String? = nil, newPaymentStatus: PaymentInitiationPaymentStatus, oldPaymentStatus: PaymentInitiationPaymentStatus, originalReference: String?, adjustedReference: String? = nil, originalStartDate: Date?, adjustedStartDate: Date?, timestamp: Date, error: PlaidError? = nil, environment: WebhookEnvironmentValues) {
        self.webhookType = webhookType
        self.webhookCode = webhookCode
        self.paymentId = paymentId
        self.transactionId = transactionId
        self.newPaymentStatus = newPaymentStatus
        self.oldPaymentStatus = oldPaymentStatus
        self.originalReference = originalReference
        self.adjustedReference = adjustedReference
        self.originalStartDate = originalStartDate
        self.adjustedStartDate = adjustedStartDate
        self.timestamp = timestamp
        self.error = error
        self.environment = environment
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case webhookType = "webhook_type"
        case webhookCode = "webhook_code"
        case paymentId = "payment_id"
        case transactionId = "transaction_id"
        case newPaymentStatus = "new_payment_status"
        case oldPaymentStatus = "old_payment_status"
        case originalReference = "original_reference"
        case adjustedReference = "adjusted_reference"
        case originalStartDate = "original_start_date"
        case adjustedStartDate = "adjusted_start_date"
        case timestamp
        case error
        case environment
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(webhookType, forKey: .webhookType)
        try container.encode(webhookCode, forKey: .webhookCode)
        try container.encode(paymentId, forKey: .paymentId)
        try container.encodeIfPresent(transactionId, forKey: .transactionId)
        try container.encode(newPaymentStatus, forKey: .newPaymentStatus)
        try container.encode(oldPaymentStatus, forKey: .oldPaymentStatus)
        try container.encode(originalReference, forKey: .originalReference)
        try container.encodeIfPresent(adjustedReference, forKey: .adjustedReference)
        try container.encode(originalStartDate, forKey: .originalStartDate)
        try container.encode(adjustedStartDate, forKey: .adjustedStartDate)
        try container.encode(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(error, forKey: .error)
        try container.encode(environment, forKey: .environment)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        webhookType = try container.decode(String.self, forKey: .webhookType)
        webhookCode = try container.decode(String.self, forKey: .webhookCode)
        paymentId = try container.decode(String.self, forKey: .paymentId)
        transactionId = try container.decodeIfPresent(String.self, forKey: .transactionId)
        newPaymentStatus = try container.decode(PaymentInitiationPaymentStatus.self, forKey: .newPaymentStatus)
        oldPaymentStatus = try container.decode(PaymentInitiationPaymentStatus.self, forKey: .oldPaymentStatus)
        originalReference = try container.decodeIfPresent(String.self, forKey: .originalReference)
        adjustedReference = try container.decodeIfPresent(String.self, forKey: .adjustedReference)
        originalStartDate = try container.decodeIfPresent(Date.self, forKey: .originalStartDate)
        adjustedStartDate = try container.decodeIfPresent(Date.self, forKey: .adjustedStartDate)
        timestamp = try container.decode(Date.self, forKey: .timestamp)
        error = try container.decodeIfPresent(PlaidError.self, forKey: .error)
        environment = try container.decode(WebhookEnvironmentValues.self, forKey: .environment)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("webhook_type")
        nonAdditionalPropertyKeys.insert("webhook_code")
        nonAdditionalPropertyKeys.insert("payment_id")
        nonAdditionalPropertyKeys.insert("transaction_id")
        nonAdditionalPropertyKeys.insert("new_payment_status")
        nonAdditionalPropertyKeys.insert("old_payment_status")
        nonAdditionalPropertyKeys.insert("original_reference")
        nonAdditionalPropertyKeys.insert("adjusted_reference")
        nonAdditionalPropertyKeys.insert("original_start_date")
        nonAdditionalPropertyKeys.insert("adjusted_start_date")
        nonAdditionalPropertyKeys.insert("timestamp")
        nonAdditionalPropertyKeys.insert("error")
        nonAdditionalPropertyKeys.insert("environment")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

