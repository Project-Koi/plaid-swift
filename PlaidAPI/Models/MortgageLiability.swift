//
// MortgageLiability.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Contains details about a mortgage account. */
public struct MortgageLiability: Codable, JSONEncodable, Hashable {

    /** The ID of the account that this liability belongs to. */
    public var accountId: String
    /** The account number of the loan. */
    public var accountNumber: String
    /** The current outstanding amount charged for late payment. */
    public var currentLateFee: Double?
    /** Total amount held in escrow to pay taxes and insurance on behalf of the borrower. */
    public var escrowBalance: Double?
    /** Indicates whether the borrower has private mortgage insurance in effect. */
    public var hasPmi: Bool?
    /** Indicates whether the borrower will pay a penalty for early payoff of mortgage. */
    public var hasPrepaymentPenalty: Bool?
    public var interestRate: MortgageInterestRate
    /** The amount of the last payment. */
    public var lastPaymentAmount: Double?
    /** The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). */
    public var lastPaymentDate: Date?
    /** Description of the type of loan, for example `conventional`, `fixed`, or `variable`. This field is provided directly from the loan servicer and does not have an enumerated set of possible values. */
    public var loanTypeDescription: String?
    /** Full duration of mortgage as at origination (e.g. `10 year`). */
    public var loanTerm: String?
    /** Original date on which mortgage is due in full. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). */
    public var maturityDate: Date?
    /** The amount of the next payment. */
    public var nextMonthlyPayment: Double?
    /** The due date for the next payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). */
    public var nextPaymentDueDate: Date?
    /** The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). */
    public var originationDate: Date?
    /** The original principal balance of the mortgage. */
    public var originationPrincipalAmount: Double?
    /** Amount of loan (principal + interest) past due for payment. */
    public var pastDueAmount: Double?
    public var propertyAddress: MortgagePropertyAddress
    /** The year to date (YTD) interest paid. */
    public var ytdInterestPaid: Double?
    /** The YTD principal paid. */
    public var ytdPrincipalPaid: Double?

    public init(accountId: String, accountNumber: String, currentLateFee: Double?, escrowBalance: Double?, hasPmi: Bool?, hasPrepaymentPenalty: Bool?, interestRate: MortgageInterestRate, lastPaymentAmount: Double?, lastPaymentDate: Date?, loanTypeDescription: String?, loanTerm: String?, maturityDate: Date?, nextMonthlyPayment: Double?, nextPaymentDueDate: Date?, originationDate: Date?, originationPrincipalAmount: Double?, pastDueAmount: Double?, propertyAddress: MortgagePropertyAddress, ytdInterestPaid: Double?, ytdPrincipalPaid: Double?) {
        self.accountId = accountId
        self.accountNumber = accountNumber
        self.currentLateFee = currentLateFee
        self.escrowBalance = escrowBalance
        self.hasPmi = hasPmi
        self.hasPrepaymentPenalty = hasPrepaymentPenalty
        self.interestRate = interestRate
        self.lastPaymentAmount = lastPaymentAmount
        self.lastPaymentDate = lastPaymentDate
        self.loanTypeDescription = loanTypeDescription
        self.loanTerm = loanTerm
        self.maturityDate = maturityDate
        self.nextMonthlyPayment = nextMonthlyPayment
        self.nextPaymentDueDate = nextPaymentDueDate
        self.originationDate = originationDate
        self.originationPrincipalAmount = originationPrincipalAmount
        self.pastDueAmount = pastDueAmount
        self.propertyAddress = propertyAddress
        self.ytdInterestPaid = ytdInterestPaid
        self.ytdPrincipalPaid = ytdPrincipalPaid
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountId = "account_id"
        case accountNumber = "account_number"
        case currentLateFee = "current_late_fee"
        case escrowBalance = "escrow_balance"
        case hasPmi = "has_pmi"
        case hasPrepaymentPenalty = "has_prepayment_penalty"
        case interestRate = "interest_rate"
        case lastPaymentAmount = "last_payment_amount"
        case lastPaymentDate = "last_payment_date"
        case loanTypeDescription = "loan_type_description"
        case loanTerm = "loan_term"
        case maturityDate = "maturity_date"
        case nextMonthlyPayment = "next_monthly_payment"
        case nextPaymentDueDate = "next_payment_due_date"
        case originationDate = "origination_date"
        case originationPrincipalAmount = "origination_principal_amount"
        case pastDueAmount = "past_due_amount"
        case propertyAddress = "property_address"
        case ytdInterestPaid = "ytd_interest_paid"
        case ytdPrincipalPaid = "ytd_principal_paid"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(accountId, forKey: .accountId)
        try container.encode(accountNumber, forKey: .accountNumber)
        try container.encode(currentLateFee, forKey: .currentLateFee)
        try container.encode(escrowBalance, forKey: .escrowBalance)
        try container.encode(hasPmi, forKey: .hasPmi)
        try container.encode(hasPrepaymentPenalty, forKey: .hasPrepaymentPenalty)
        try container.encode(interestRate, forKey: .interestRate)
        try container.encode(lastPaymentAmount, forKey: .lastPaymentAmount)
        try container.encode(lastPaymentDate, forKey: .lastPaymentDate)
        try container.encode(loanTypeDescription, forKey: .loanTypeDescription)
        try container.encode(loanTerm, forKey: .loanTerm)
        try container.encode(maturityDate, forKey: .maturityDate)
        try container.encode(nextMonthlyPayment, forKey: .nextMonthlyPayment)
        try container.encode(nextPaymentDueDate, forKey: .nextPaymentDueDate)
        try container.encode(originationDate, forKey: .originationDate)
        try container.encode(originationPrincipalAmount, forKey: .originationPrincipalAmount)
        try container.encode(pastDueAmount, forKey: .pastDueAmount)
        try container.encode(propertyAddress, forKey: .propertyAddress)
        try container.encode(ytdInterestPaid, forKey: .ytdInterestPaid)
        try container.encode(ytdPrincipalPaid, forKey: .ytdPrincipalPaid)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        accountId = try container.decode(String.self, forKey: .accountId)
        accountNumber = try container.decode(String.self, forKey: .accountNumber)
        currentLateFee = try container.decodeIfPresent(Double.self, forKey: .currentLateFee)
        escrowBalance = try container.decodeIfPresent(Double.self, forKey: .escrowBalance)
        hasPmi = try container.decodeIfPresent(Bool.self, forKey: .hasPmi)
        hasPrepaymentPenalty = try container.decodeIfPresent(Bool.self, forKey: .hasPrepaymentPenalty)
        interestRate = try container.decode(MortgageInterestRate.self, forKey: .interestRate)
        lastPaymentAmount = try container.decodeIfPresent(Double.self, forKey: .lastPaymentAmount)
        lastPaymentDate = try container.decodeIfPresent(Date.self, forKey: .lastPaymentDate)
        loanTypeDescription = try container.decodeIfPresent(String.self, forKey: .loanTypeDescription)
        loanTerm = try container.decodeIfPresent(String.self, forKey: .loanTerm)
        maturityDate = try container.decodeIfPresent(Date.self, forKey: .maturityDate)
        nextMonthlyPayment = try container.decodeIfPresent(Double.self, forKey: .nextMonthlyPayment)
        nextPaymentDueDate = try container.decodeIfPresent(Date.self, forKey: .nextPaymentDueDate)
        originationDate = try container.decodeIfPresent(Date.self, forKey: .originationDate)
        originationPrincipalAmount = try container.decodeIfPresent(Double.self, forKey: .originationPrincipalAmount)
        pastDueAmount = try container.decodeIfPresent(Double.self, forKey: .pastDueAmount)
        propertyAddress = try container.decode(MortgagePropertyAddress.self, forKey: .propertyAddress)
        ytdInterestPaid = try container.decodeIfPresent(Double.self, forKey: .ytdInterestPaid)
        ytdPrincipalPaid = try container.decodeIfPresent(Double.self, forKey: .ytdPrincipalPaid)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("account_id")
        nonAdditionalPropertyKeys.insert("account_number")
        nonAdditionalPropertyKeys.insert("current_late_fee")
        nonAdditionalPropertyKeys.insert("escrow_balance")
        nonAdditionalPropertyKeys.insert("has_pmi")
        nonAdditionalPropertyKeys.insert("has_prepayment_penalty")
        nonAdditionalPropertyKeys.insert("interest_rate")
        nonAdditionalPropertyKeys.insert("last_payment_amount")
        nonAdditionalPropertyKeys.insert("last_payment_date")
        nonAdditionalPropertyKeys.insert("loan_type_description")
        nonAdditionalPropertyKeys.insert("loan_term")
        nonAdditionalPropertyKeys.insert("maturity_date")
        nonAdditionalPropertyKeys.insert("next_monthly_payment")
        nonAdditionalPropertyKeys.insert("next_payment_due_date")
        nonAdditionalPropertyKeys.insert("origination_date")
        nonAdditionalPropertyKeys.insert("origination_principal_amount")
        nonAdditionalPropertyKeys.insert("past_due_amount")
        nonAdditionalPropertyKeys.insert("property_address")
        nonAdditionalPropertyKeys.insert("ytd_interest_paid")
        nonAdditionalPropertyKeys.insert("ytd_principal_paid")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

