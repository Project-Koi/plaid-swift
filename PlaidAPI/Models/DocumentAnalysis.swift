//
// DocumentAnalysis.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** High level descriptions of how the associated document was processed. If a document fails verification, the details in the &#x60;analysis&#x60; object should help clarify why the document was rejected. */
public struct DocumentAnalysis: Codable, JSONEncodable, Hashable {

    public var authenticity: DocumentAuthenticityMatchCode
    public var imageQuality: ImageQuality
    public var extractedData: PhysicalDocumentExtractedDataAnalysis?

    public init(authenticity: DocumentAuthenticityMatchCode, imageQuality: ImageQuality, extractedData: PhysicalDocumentExtractedDataAnalysis?) {
        self.authenticity = authenticity
        self.imageQuality = imageQuality
        self.extractedData = extractedData
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case authenticity
        case imageQuality = "image_quality"
        case extractedData = "extracted_data"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(authenticity, forKey: .authenticity)
        try container.encode(imageQuality, forKey: .imageQuality)
        try container.encode(extractedData, forKey: .extractedData)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        authenticity = try container.decode(DocumentAuthenticityMatchCode.self, forKey: .authenticity)
        imageQuality = try container.decode(ImageQuality.self, forKey: .imageQuality)
        extractedData = try container.decodeIfPresent(PhysicalDocumentExtractedDataAnalysis.self, forKey: .extractedData)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("authenticity")
        nonAdditionalPropertyKeys.insert("image_quality")
        nonAdditionalPropertyKeys.insert("extracted_data")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

