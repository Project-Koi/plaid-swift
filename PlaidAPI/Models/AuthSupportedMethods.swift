//
// AuthSupportedMethods.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Metadata specifically related to which auth methods an institution supports. */
public struct AuthSupportedMethods: Codable, JSONEncodable, Hashable {

    /** Indicates if instant auth is supported. */
    public var instantAuth: Bool
    /** Indicates if instant match is supported. */
    public var instantMatch: Bool
    /** Indicates if automated microdeposits are supported. */
    public var automatedMicroDeposits: Bool
    /** Indicates if instant microdeposits are supported. */
    public var instantMicroDeposits: Bool

    public init(instantAuth: Bool, instantMatch: Bool, automatedMicroDeposits: Bool, instantMicroDeposits: Bool) {
        self.instantAuth = instantAuth
        self.instantMatch = instantMatch
        self.automatedMicroDeposits = automatedMicroDeposits
        self.instantMicroDeposits = instantMicroDeposits
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case instantAuth = "instant_auth"
        case instantMatch = "instant_match"
        case automatedMicroDeposits = "automated_micro_deposits"
        case instantMicroDeposits = "instant_micro_deposits"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(instantAuth, forKey: .instantAuth)
        try container.encode(instantMatch, forKey: .instantMatch)
        try container.encode(automatedMicroDeposits, forKey: .automatedMicroDeposits)
        try container.encode(instantMicroDeposits, forKey: .instantMicroDeposits)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        instantAuth = try container.decode(Bool.self, forKey: .instantAuth)
        instantMatch = try container.decode(Bool.self, forKey: .instantMatch)
        automatedMicroDeposits = try container.decode(Bool.self, forKey: .automatedMicroDeposits)
        instantMicroDeposits = try container.decode(Bool.self, forKey: .instantMicroDeposits)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("instant_auth")
        nonAdditionalPropertyKeys.insert("instant_match")
        nonAdditionalPropertyKeys.insert("automated_micro_deposits")
        nonAdditionalPropertyKeys.insert("instant_micro_deposits")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

