//
// PhysicalDocumentExtractedData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Data extracted from a user-submitted document. */
public struct PhysicalDocumentExtractedData: Codable, JSONEncodable, Hashable {

    static let issuingCountryRule = StringRule(minLength: 2, maxLength: nil, pattern: nil)
    /** Alpha-numeric ID number extracted via OCR from the user's document image. */
    public var idNumber: String?
    public var category: PhysicalDocumentCategory
    /** A date in the format YYYY-MM-DD (RFC 3339 Section 5.6). */
    public var expirationDate: Date?
    /** Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form. */
    public var issuingCountry: String
    /** An ISO 3166-2 subdivision code. Related terms would be \"state\", \"province\", \"prefecture\", \"zone\", \"subdivision\", etc. */
    public var issuingRegion: String?
    /** A date extracted from the document in the format YYYY-MM-DD (RFC 3339 Section 5.6). */
    public var dateOfBirth: Date?
    public var address: IdentityVerificationDocumentAddressResponse?

    public init(idNumber: String?, category: PhysicalDocumentCategory, expirationDate: Date?, issuingCountry: String, issuingRegion: String?, dateOfBirth: Date?, address: IdentityVerificationDocumentAddressResponse?) {
        self.idNumber = idNumber
        self.category = category
        self.expirationDate = expirationDate
        self.issuingCountry = issuingCountry
        self.issuingRegion = issuingRegion
        self.dateOfBirth = dateOfBirth
        self.address = address
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case idNumber = "id_number"
        case category
        case expirationDate = "expiration_date"
        case issuingCountry = "issuing_country"
        case issuingRegion = "issuing_region"
        case dateOfBirth = "date_of_birth"
        case address
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(idNumber, forKey: .idNumber)
        try container.encode(category, forKey: .category)
        try container.encode(expirationDate, forKey: .expirationDate)
        try container.encode(issuingCountry, forKey: .issuingCountry)
        try container.encode(issuingRegion, forKey: .issuingRegion)
        try container.encode(dateOfBirth, forKey: .dateOfBirth)
        try container.encode(address, forKey: .address)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        idNumber = try container.decodeIfPresent(String.self, forKey: .idNumber)
        category = try container.decode(PhysicalDocumentCategory.self, forKey: .category)
        expirationDate = try container.decodeIfPresent(Date.self, forKey: .expirationDate)
        issuingCountry = try container.decode(String.self, forKey: .issuingCountry)
        issuingRegion = try container.decodeIfPresent(String.self, forKey: .issuingRegion)
        dateOfBirth = try container.decodeIfPresent(Date.self, forKey: .dateOfBirth)
        address = try container.decodeIfPresent(IdentityVerificationDocumentAddressResponse.self, forKey: .address)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("id_number")
        nonAdditionalPropertyKeys.insert("category")
        nonAdditionalPropertyKeys.insert("expiration_date")
        nonAdditionalPropertyKeys.insert("issuing_country")
        nonAdditionalPropertyKeys.insert("issuing_region")
        nonAdditionalPropertyKeys.insert("date_of_birth")
        nonAdditionalPropertyKeys.insert("address")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

