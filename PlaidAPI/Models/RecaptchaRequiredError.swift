//
// RecaptchaRequiredError.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The request was flagged by Plaid&#39;s fraud system, and requires additional verification to ensure they are not a bot. */
public struct RecaptchaRequiredError: Codable, JSONEncodable, Hashable {

    /** RECAPTCHA_ERROR */
    public var errorType: String
    /** RECAPTCHA_REQUIRED */
    public var errorCode: String
    public var displayMessage: String
    /** 400 */
    public var httpCode: String
    /** Your user will be prompted to solve a Google reCAPTCHA challenge in the Link Recaptcha pane. If they solve the challenge successfully, the user's request is resubmitted and they are directed to the next Item creation step. */
    public var linkUserExperience: String
    /** Plaid's fraud system detects abusive traffic and considers a variety of parameters throughout Item creation requests. When a request is considered risky or possibly fraudulent, Link presents a reCAPTCHA for the user to solve. */
    public var commonCauses: String
    /** Link will automatically guide your user through reCAPTCHA verification. As a general rule, we recommend instrumenting basic fraud monitoring to detect and protect your website from spam and abuse.  If your user cannot verify their session, please submit a Support ticket with the following identifiers: `link_session_id` or `request_id` */
    public var troubleshootingSteps: String

    public init(errorType: String, errorCode: String, displayMessage: String, httpCode: String, linkUserExperience: String, commonCauses: String, troubleshootingSteps: String) {
        self.errorType = errorType
        self.errorCode = errorCode
        self.displayMessage = displayMessage
        self.httpCode = httpCode
        self.linkUserExperience = linkUserExperience
        self.commonCauses = commonCauses
        self.troubleshootingSteps = troubleshootingSteps
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case errorType = "error_type"
        case errorCode = "error_code"
        case displayMessage = "display_message"
        case httpCode = "http_code"
        case linkUserExperience = "link_user_experience"
        case commonCauses = "common_causes"
        case troubleshootingSteps = "troubleshooting_steps"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(errorType, forKey: .errorType)
        try container.encode(errorCode, forKey: .errorCode)
        try container.encode(displayMessage, forKey: .displayMessage)
        try container.encode(httpCode, forKey: .httpCode)
        try container.encode(linkUserExperience, forKey: .linkUserExperience)
        try container.encode(commonCauses, forKey: .commonCauses)
        try container.encode(troubleshootingSteps, forKey: .troubleshootingSteps)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        errorType = try container.decode(String.self, forKey: .errorType)
        errorCode = try container.decode(String.self, forKey: .errorCode)
        displayMessage = try container.decode(String.self, forKey: .displayMessage)
        httpCode = try container.decode(String.self, forKey: .httpCode)
        linkUserExperience = try container.decode(String.self, forKey: .linkUserExperience)
        commonCauses = try container.decode(String.self, forKey: .commonCauses)
        troubleshootingSteps = try container.decode(String.self, forKey: .troubleshootingSteps)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("error_type")
        nonAdditionalPropertyKeys.insert("error_code")
        nonAdditionalPropertyKeys.insert("display_message")
        nonAdditionalPropertyKeys.insert("http_code")
        nonAdditionalPropertyKeys.insert("link_user_experience")
        nonAdditionalPropertyKeys.insert("common_causes")
        nonAdditionalPropertyKeys.insert("troubleshooting_steps")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

