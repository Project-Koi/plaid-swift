//
// InvestmentsAuthGetNumbers.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Identifying information for transferring holdings to an investments account. */
public struct InvestmentsAuthGetNumbers: Codable, JSONEncodable, Hashable {

    public var acats: [NumbersACATS]?
    public var aton: [NumbersATON]?

    public init(acats: [NumbersACATS]? = nil, aton: [NumbersATON]? = nil) {
        self.acats = acats
        self.aton = aton
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case acats
        case aton
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(acats, forKey: .acats)
        try container.encodeIfPresent(aton, forKey: .aton)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        acats = try container.decodeIfPresent([NumbersACATS].self, forKey: .acats)
        aton = try container.decodeIfPresent([NumbersATON].self, forKey: .aton)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("acats")
        nonAdditionalPropertyKeys.insert("aton")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

