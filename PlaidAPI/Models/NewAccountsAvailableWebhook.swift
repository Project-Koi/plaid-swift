//
// NewAccountsAvailableWebhook.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Fired when Plaid detects a new account for Items created or updated with [Account Select v2](https://plaid.com/docs/link/customization/#account-select). Upon receiving this webhook, you can prompt your users to share new accounts with you through [Account Select v2 update mode](https://plaid.com/docs/link/update-mode/#using-update-mode-to-request-new-accounts). */
public struct NewAccountsAvailableWebhook: Codable, JSONEncodable, Hashable {

    /** `ITEM` */
    public var webhookType: String?
    /** `NEW_ACCOUNTS_AVAILABLE` */
    public var webhookCode: String?
    /** The `item_id` of the Item associated with this webhook, warning, or error */
    public var itemId: String?
    public var error: PlaidError?
    public var environment: WebhookEnvironmentValues?

    public init(webhookType: String? = nil, webhookCode: String? = nil, itemId: String? = nil, error: PlaidError? = nil, environment: WebhookEnvironmentValues? = nil) {
        self.webhookType = webhookType
        self.webhookCode = webhookCode
        self.itemId = itemId
        self.error = error
        self.environment = environment
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case webhookType = "webhook_type"
        case webhookCode = "webhook_code"
        case itemId = "item_id"
        case error
        case environment
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(webhookType, forKey: .webhookType)
        try container.encodeIfPresent(webhookCode, forKey: .webhookCode)
        try container.encodeIfPresent(itemId, forKey: .itemId)
        try container.encodeIfPresent(error, forKey: .error)
        try container.encodeIfPresent(environment, forKey: .environment)
    }
}

