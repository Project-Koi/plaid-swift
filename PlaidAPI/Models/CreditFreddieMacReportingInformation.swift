//
// CreditFreddieMacReportingInformation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Information about an report identifier and a report name. */
public struct CreditFreddieMacReportingInformation: Codable, JSONEncodable, Hashable {

    /** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
    public var reportDateTime: String?
    /** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. The value can only be \"ReportID\" */
    public var reportIdentifierType: String?
    /** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
    public var reportingInformationParentIdentifier: String?
    /** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
    public var reportingInformationIdentifier: String

    public init(reportDateTime: String? = nil, reportIdentifierType: String? = nil, reportingInformationParentIdentifier: String? = nil, reportingInformationIdentifier: String) {
        self.reportDateTime = reportDateTime
        self.reportIdentifierType = reportIdentifierType
        self.reportingInformationParentIdentifier = reportingInformationParentIdentifier
        self.reportingInformationIdentifier = reportingInformationIdentifier
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case reportDateTime = "ReportDateTime"
        case reportIdentifierType = "ReportIdentifierType"
        case reportingInformationParentIdentifier = "ReportingInformationParentIdentifier"
        case reportingInformationIdentifier = "ReportingInformationIdentifier"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(reportDateTime, forKey: .reportDateTime)
        try container.encodeIfPresent(reportIdentifierType, forKey: .reportIdentifierType)
        try container.encodeIfPresent(reportingInformationParentIdentifier, forKey: .reportingInformationParentIdentifier)
        try container.encode(reportingInformationIdentifier, forKey: .reportingInformationIdentifier)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        reportDateTime = try container.decodeIfPresent(String.self, forKey: .reportDateTime)
        reportIdentifierType = try container.decodeIfPresent(String.self, forKey: .reportIdentifierType)
        reportingInformationParentIdentifier = try container.decodeIfPresent(String.self, forKey: .reportingInformationParentIdentifier)
        reportingInformationIdentifier = try container.decode(String.self, forKey: .reportingInformationIdentifier)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("ReportDateTime")
        nonAdditionalPropertyKeys.insert("ReportIdentifierType")
        nonAdditionalPropertyKeys.insert("ReportingInformationParentIdentifier")
        nonAdditionalPropertyKeys.insert("ReportingInformationIdentifier")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

