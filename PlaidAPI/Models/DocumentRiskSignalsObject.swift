//
// DocumentRiskSignalsObject.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Object containing fraud risk data for a set of income documents. */
public struct DocumentRiskSignalsObject: Codable, JSONEncodable, Hashable {

    /** ID of the payroll provider account. */
    public var accountId: String?
    /** Array of document metadata and associated risk signals per document */
    public var singleDocumentRiskSignals: [SingleDocumentRiskSignal]
    /** Array of risk signals computed from a set of uploaded documents and the associated documents' metadata */
    public var multiDocumentRiskSignals: [MultiDocumentRiskSignal]

    public init(accountId: String?, singleDocumentRiskSignals: [SingleDocumentRiskSignal], multiDocumentRiskSignals: [MultiDocumentRiskSignal]) {
        self.accountId = accountId
        self.singleDocumentRiskSignals = singleDocumentRiskSignals
        self.multiDocumentRiskSignals = multiDocumentRiskSignals
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountId = "account_id"
        case singleDocumentRiskSignals = "single_document_risk_signals"
        case multiDocumentRiskSignals = "multi_document_risk_signals"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(accountId, forKey: .accountId)
        try container.encode(singleDocumentRiskSignals, forKey: .singleDocumentRiskSignals)
        try container.encode(multiDocumentRiskSignals, forKey: .multiDocumentRiskSignals)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        accountId = try container.decodeIfPresent(String.self, forKey: .accountId)
        singleDocumentRiskSignals = try container.decode([SingleDocumentRiskSignal].self, forKey: .singleDocumentRiskSignals)
        multiDocumentRiskSignals = try container.decode([MultiDocumentRiskSignal].self, forKey: .multiDocumentRiskSignals)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("account_id")
        nonAdditionalPropertyKeys.insert("single_document_risk_signals")
        nonAdditionalPropertyKeys.insert("multi_document_risk_signals")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

