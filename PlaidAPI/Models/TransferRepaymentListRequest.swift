//
// TransferRepaymentListRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Defines the request schema for &#x60;/transfer/repayment/list&#x60; */
public struct TransferRepaymentListRequest: Codable, JSONEncodable, Hashable {

    static let countRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 25, exclusiveMaximum: false, multipleOf: nil)
    static let offsetRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** The start datetime of repayments to return (RFC 3339 format). */
    public var startDate: Date?
    /** The end datetime of repayments to return (RFC 3339 format). */
    public var endDate: Date?
    /** The maximum number of repayments to return. */
    public var count: Int? = 25
    /** The number of repayments to skip before returning results. */
    public var offset: Int? = 0

    public init(clientId: String? = nil, secret: String? = nil, startDate: Date? = nil, endDate: Date? = nil, count: Int? = 25, offset: Int? = 0) {
        self.clientId = clientId
        self.secret = secret
        self.startDate = startDate
        self.endDate = endDate
        self.count = count
        self.offset = offset
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case startDate = "start_date"
        case endDate = "end_date"
        case count
        case offset
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encodeIfPresent(endDate, forKey: .endDate)
        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(offset, forKey: .offset)
    }
}

