//
// BaseReportWarning.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** It is possible for an Base Report to be returned with missing account owner information. In such cases, the Base Report will contain warning data in the response, indicating why obtaining the owner information failed. */
public struct BaseReportWarning: Codable, JSONEncodable, Hashable {

    /** The warning type, which will always be `BASE_REPORT_WARNING` */
    public var warningType: String
    public var warningCode: BaseReportWarningCode
    public var cause: Cause

    public init(warningType: String, warningCode: BaseReportWarningCode, cause: Cause) {
        self.warningType = warningType
        self.warningCode = warningCode
        self.cause = cause
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case warningType = "warning_type"
        case warningCode = "warning_code"
        case cause
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(warningType, forKey: .warningType)
        try container.encode(warningCode, forKey: .warningCode)
        try container.encode(cause, forKey: .cause)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        warningType = try container.decode(String.self, forKey: .warningType)
        warningCode = try container.decode(BaseReportWarningCode.self, forKey: .warningCode)
        cause = try container.decode(Cause.self, forKey: .cause)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("warning_type")
        nonAdditionalPropertyKeys.insert("warning_code")
        nonAdditionalPropertyKeys.insert("cause")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

