//
// CreditBankIncomeSource.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Detailed information for the income source. */
public struct CreditBankIncomeSource: Codable, JSONEncodable, Hashable {

    /** A unique identifier for an income source. */
    public var incomeSourceId: String?
    /** The most common name or original description for the underlying income transactions. */
    public var incomeDescription: String?
    public var incomeCategory: CreditBankIncomeCategory?
    /** Plaid's unique identifier for the account. */
    public var accountId: String?
    /** Minimum of all dates within the specific income sources in the user's bank account for days requested by the client. The date will be returned in an ISO 8601 format (YYYY-MM-DD). */
    public var startDate: Date?
    /** Maximum of all dates within the specific income sources in the user’s bank account for days requested by the client. The date will be returned in an ISO 8601 format (YYYY-MM-DD). */
    public var endDate: Date?
    public var payFrequency: CreditBankIncomePayFrequency?
    /** Total amount of earnings in the user’s bank account for the specific income source for days requested by the client. */
    public var totalAmount: Double?
    /** Number of transactions for the income source within the start and end date. */
    public var transactionCount: Int?
    public var historicalSummary: [CreditBankIncomeHistoricalSummary]?

    public init(incomeSourceId: String? = nil, incomeDescription: String? = nil, incomeCategory: CreditBankIncomeCategory? = nil, accountId: String? = nil, startDate: Date? = nil, endDate: Date? = nil, payFrequency: CreditBankIncomePayFrequency? = nil, totalAmount: Double? = nil, transactionCount: Int? = nil, historicalSummary: [CreditBankIncomeHistoricalSummary]? = nil) {
        self.incomeSourceId = incomeSourceId
        self.incomeDescription = incomeDescription
        self.incomeCategory = incomeCategory
        self.accountId = accountId
        self.startDate = startDate
        self.endDate = endDate
        self.payFrequency = payFrequency
        self.totalAmount = totalAmount
        self.transactionCount = transactionCount
        self.historicalSummary = historicalSummary
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case incomeSourceId = "income_source_id"
        case incomeDescription = "income_description"
        case incomeCategory = "income_category"
        case accountId = "account_id"
        case startDate = "start_date"
        case endDate = "end_date"
        case payFrequency = "pay_frequency"
        case totalAmount = "total_amount"
        case transactionCount = "transaction_count"
        case historicalSummary = "historical_summary"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(incomeSourceId, forKey: .incomeSourceId)
        try container.encodeIfPresent(incomeDescription, forKey: .incomeDescription)
        try container.encodeIfPresent(incomeCategory, forKey: .incomeCategory)
        try container.encodeIfPresent(accountId, forKey: .accountId)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encodeIfPresent(endDate, forKey: .endDate)
        try container.encodeIfPresent(payFrequency, forKey: .payFrequency)
        try container.encodeIfPresent(totalAmount, forKey: .totalAmount)
        try container.encodeIfPresent(transactionCount, forKey: .transactionCount)
        try container.encodeIfPresent(historicalSummary, forKey: .historicalSummary)
    }
}

