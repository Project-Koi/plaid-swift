//
// PaymentInitiationConsentGetResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** PaymentInitiationConsentGetResponse defines the response schema for &#x60;/payment_initation/consent/get&#x60; */
public struct PaymentInitiationConsentGetResponse: Codable, JSONEncodable, Hashable {

    static let consentIdRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let recipientIdRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    /** The consent ID. */
    public var consentId: String
    public var status: PaymentInitiationConsentStatus
    /** Consent creation timestamp, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. */
    public var createdAt: Date
    /** The ID of the recipient the payment consent is for. */
    public var recipientId: String
    /** A reference for the payment consent. */
    public var reference: String
    public var constraints: PaymentInitiationConsentConstraints
    /** An array of payment consent scopes. */
    public var scopes: [PaymentInitiationConsentScope]
    /** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
    public var requestId: String

    public init(consentId: String, status: PaymentInitiationConsentStatus, createdAt: Date, recipientId: String, reference: String, constraints: PaymentInitiationConsentConstraints, scopes: [PaymentInitiationConsentScope], requestId: String) {
        self.consentId = consentId
        self.status = status
        self.createdAt = createdAt
        self.recipientId = recipientId
        self.reference = reference
        self.constraints = constraints
        self.scopes = scopes
        self.requestId = requestId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case consentId = "consent_id"
        case status
        case createdAt = "created_at"
        case recipientId = "recipient_id"
        case reference
        case constraints
        case scopes
        case requestId = "request_id"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(consentId, forKey: .consentId)
        try container.encode(status, forKey: .status)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(recipientId, forKey: .recipientId)
        try container.encode(reference, forKey: .reference)
        try container.encode(constraints, forKey: .constraints)
        try container.encode(scopes, forKey: .scopes)
        try container.encode(requestId, forKey: .requestId)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        consentId = try container.decode(String.self, forKey: .consentId)
        status = try container.decode(PaymentInitiationConsentStatus.self, forKey: .status)
        createdAt = try container.decode(Date.self, forKey: .createdAt)
        recipientId = try container.decode(String.self, forKey: .recipientId)
        reference = try container.decode(String.self, forKey: .reference)
        constraints = try container.decode(PaymentInitiationConsentConstraints.self, forKey: .constraints)
        scopes = try container.decode([PaymentInitiationConsentScope].self, forKey: .scopes)
        requestId = try container.decode(String.self, forKey: .requestId)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("consent_id")
        nonAdditionalPropertyKeys.insert("status")
        nonAdditionalPropertyKeys.insert("created_at")
        nonAdditionalPropertyKeys.insert("recipient_id")
        nonAdditionalPropertyKeys.insert("reference")
        nonAdditionalPropertyKeys.insert("constraints")
        nonAdditionalPropertyKeys.insert("scopes")
        nonAdditionalPropertyKeys.insert("request_id")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

