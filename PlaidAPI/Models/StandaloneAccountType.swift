//
// StandaloneAccountType.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The schema below describes the various &#x60;types&#x60; and corresponding &#x60;subtypes&#x60; that Plaid recognizes and reports for financial institution accounts. */
public struct StandaloneAccountType: Codable, JSONEncodable, Hashable {

    /** An account type holding cash, in which funds are deposited. Supported products for `depository` accounts are: Auth (`checking` and `savings` types only), Transfer, Balance, Signal, Income, Transactions, Identity, Payment Initiation, Assets, and Investments (`cash management` type only). */
    public var depository: String
    /** A credit card type account. Supported products for `credit` accounts are: Balance, Transactions, Identity, Assets, and Liabilities. */
    public var credit: String
    /** A loan type account. Supported products for `loan` accounts are: Balance, Liabilities, Assets, and Transactions. */
    public var loan: String
    /** An investment account. Supported products for `investment` accounts are: Balance, Assets, and Investments. In API versions 2018-05-22 and earlier, this type is called `brokerage`. */
    public var investment: String
    /** Other or unknown account type. Supported products for `other` accounts are: Balance, Transactions, Identity, and Assets. */
    public var other: String

    public init(depository: String, credit: String, loan: String, investment: String, other: String) {
        self.depository = depository
        self.credit = credit
        self.loan = loan
        self.investment = investment
        self.other = other
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case depository
        case credit
        case loan
        case investment
        case other
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(depository, forKey: .depository)
        try container.encode(credit, forKey: .credit)
        try container.encode(loan, forKey: .loan)
        try container.encode(investment, forKey: .investment)
        try container.encode(other, forKey: .other)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        depository = try container.decode(String.self, forKey: .depository)
        credit = try container.decode(String.self, forKey: .credit)
        loan = try container.decode(String.self, forKey: .loan)
        investment = try container.decode(String.self, forKey: .investment)
        other = try container.decode(String.self, forKey: .other)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("depository")
        nonAdditionalPropertyKeys.insert("credit")
        nonAdditionalPropertyKeys.insert("loan")
        nonAdditionalPropertyKeys.insert("investment")
        nonAdditionalPropertyKeys.insert("other")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

