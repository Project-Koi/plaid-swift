//
// CreditBankStatementUploadObject.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An object containing data that has been parsed from a user-uploaded bank statement. */
public struct CreditBankStatementUploadObject: Codable, JSONEncodable, Hashable {

    /** An array of transactions appearing on the bank statement. */
    public var transactions: [CreditBankStatementUploadTransaction]
    public var documentMetadata: CreditDocumentMetadata
    /** An identifier of the document referenced by the document metadata. */
    public var documentId: String?
    /** An array of bank accounts associated with the uploaded bank statement. */
    public var bankAccounts: [CreditBankStatementUploadBankAccount]

    public init(transactions: [CreditBankStatementUploadTransaction], documentMetadata: CreditDocumentMetadata, documentId: String?, bankAccounts: [CreditBankStatementUploadBankAccount]) {
        self.transactions = transactions
        self.documentMetadata = documentMetadata
        self.documentId = documentId
        self.bankAccounts = bankAccounts
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case transactions
        case documentMetadata = "document_metadata"
        case documentId = "document_id"
        case bankAccounts = "bank_accounts"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(transactions, forKey: .transactions)
        try container.encode(documentMetadata, forKey: .documentMetadata)
        try container.encode(documentId, forKey: .documentId)
        try container.encode(bankAccounts, forKey: .bankAccounts)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        transactions = try container.decode([CreditBankStatementUploadTransaction].self, forKey: .transactions)
        documentMetadata = try container.decode(CreditDocumentMetadata.self, forKey: .documentMetadata)
        documentId = try container.decodeIfPresent(String.self, forKey: .documentId)
        bankAccounts = try container.decode([CreditBankStatementUploadBankAccount].self, forKey: .bankAccounts)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("transactions")
        nonAdditionalPropertyKeys.insert("document_metadata")
        nonAdditionalPropertyKeys.insert("document_id")
        nonAdditionalPropertyKeys.insert("bank_accounts")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

