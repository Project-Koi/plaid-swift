//
// InstitutionsGetRequestOptions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An optional object to filter &#x60;/institutions/get&#x60; results. */
public struct InstitutionsGetRequestOptions: Codable, JSONEncodable, Hashable {

    /** Filter the Institutions based on which products they support.  */
    public var products: [Products]?
    /** Specify an array of routing numbers to filter institutions. The response will only return institutions that match all of the routing numbers in the array. Routing number records used for this matching are generally comprehensive; however, failure to match a given routing number to an institution does not necessarily mean that the institution is unsupported by Plaid. */
    public var routingNumbers: [String]?
    /** Limit results to institutions with or without OAuth login flows. Note that institutions will have `oauth` set to `true` if some Items associated with that institution are required to use OAuth flows; institutions in a state of migration to OAuth will have the `oauth` attribute set to `true`. */
    public var oauth: Bool?
    /** When `true`, return the institution's homepage URL, logo and primary brand color.  Note that Plaid does not own any of the logos shared by the API, and that by accessing or using these logos, you agree that you are doing so at your own risk and will, if necessary, obtain all required permissions from the appropriate rights holders and adhere to any applicable usage guidelines. Plaid disclaims all express or implied warranties with respect to the logos. */
    public var includeOptionalMetadata: Bool?
    /** When `true`, returns metadata related to the Auth product indicating which auth methods are supported. */
    public var includeAuthMetadata: Bool? = false
    /** When `true`, returns metadata related to the Payment Initiation product indicating which payment configurations are supported. */
    public var includePaymentInitiationMetadata: Bool? = false

    public init(products: [Products]? = nil, routingNumbers: [String]? = nil, oauth: Bool? = nil, includeOptionalMetadata: Bool? = nil, includeAuthMetadata: Bool? = false, includePaymentInitiationMetadata: Bool? = false) {
        self.products = products
        self.routingNumbers = routingNumbers
        self.oauth = oauth
        self.includeOptionalMetadata = includeOptionalMetadata
        self.includeAuthMetadata = includeAuthMetadata
        self.includePaymentInitiationMetadata = includePaymentInitiationMetadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case products
        case routingNumbers = "routing_numbers"
        case oauth
        case includeOptionalMetadata = "include_optional_metadata"
        case includeAuthMetadata = "include_auth_metadata"
        case includePaymentInitiationMetadata = "include_payment_initiation_metadata"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(products, forKey: .products)
        try container.encodeIfPresent(routingNumbers, forKey: .routingNumbers)
        try container.encodeIfPresent(oauth, forKey: .oauth)
        try container.encodeIfPresent(includeOptionalMetadata, forKey: .includeOptionalMetadata)
        try container.encodeIfPresent(includeAuthMetadata, forKey: .includeAuthMetadata)
        try container.encodeIfPresent(includePaymentInitiationMetadata, forKey: .includePaymentInitiationMetadata)
    }
}

