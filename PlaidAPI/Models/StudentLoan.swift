//
// StudentLoan.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Contains details about a student loan account */
public struct StudentLoan: Codable, JSONEncodable, Hashable {

    /** The ID of the account that this liability belongs to. Each account can only contain one liability. */
    public var accountId: String?
    /** The account number of the loan. For some institutions, this may be a masked version of the number (e.g., the last 4 digits instead of the entire number). */
    public var accountNumber: String?
    /** The dates on which loaned funds were disbursed or will be disbursed. These are often in the past. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). */
    public var disbursementDates: [Date]?
    /** The date when the student loan is expected to be paid off. Availability for this field is limited. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). */
    public var expectedPayoffDate: Date?
    /** The guarantor of the student loan. */
    public var guarantor: String?
    /** The interest rate on the loan as a percentage. */
    public var interestRatePercentage: Double
    /** `true` if a payment is currently overdue. Availability for this field is limited. */
    public var isOverdue: Bool?
    /** The amount of the last payment. */
    public var lastPaymentAmount: Double?
    /** The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). */
    public var lastPaymentDate: Date?
    /** The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). */
    public var lastStatementIssueDate: Date?
    /** The type of loan, e.g., \"Consolidation Loans\". */
    public var loanName: String?
    public var loanStatus: StudentLoanStatus
    /** The minimum payment due for the next billing cycle. There are some exceptions: Some institutions require a minimum payment across all loans associated with an account number. Our API presents that same minimum payment amount on each loan. The institutions that do this are: Great Lakes ( `ins_116861`), Firstmark (`ins_116295`), Commonbond Firstmark Services (`ins_116950`), EdFinancial Services (`ins_116304`), Granite State (`ins_116308`), and Oklahoma Student Loan Authority (`ins_116945`). Firstmark (`ins_116295` ), EdFinancial Services (`ins_116304`),  and Navient (`ins_116248`) will display as $0 if there is an autopay program in effect. */
    public var minimumPaymentAmount: Double?
    /** The due date for the next payment. The due date is `null` if a payment is not expected. A payment is not expected if `loan_status.type` is `deferment`, `in_school`, `consolidated`, `paid in full`, or `transferred`. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). */
    public var nextPaymentDueDate: Date?
    /** The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).  */
    public var originationDate: Date?
    /** The original principal balance of the loan. */
    public var originationPrincipalAmount: Double?
    /** The total dollar amount of the accrued interest balance. For Sallie Mae ( `ins_116944`), this amount is included in the current balance of the loan, so this field will return as `null`. */
    public var outstandingInterestAmount: Double?
    /** The relevant account number that should be used to reference this loan for payments. In the majority of cases, `payment_reference_number` will match `account_number,` but in some institutions, such as Great Lakes (`ins_116861`), it will be different. */
    public var paymentReferenceNumber: String?
    public var pslfStatus: PSLFStatus
    public var repaymentPlan: StudentRepaymentPlan
    /** The sequence number of the student loan. Heartland ECSI (`ins_116948`) does not make this field available. */
    public var sequenceNumber: String?
    public var servicerAddress: ServicerAddressData
    /** The year to date (YTD) interest paid. Availability for this field is limited. */
    public var ytdInterestPaid: Double?
    /** The year to date (YTD) principal paid. Availability for this field is limited. */
    public var ytdPrincipalPaid: Double?

    public init(accountId: String?, accountNumber: String?, disbursementDates: [Date]?, expectedPayoffDate: Date?, guarantor: String?, interestRatePercentage: Double, isOverdue: Bool?, lastPaymentAmount: Double?, lastPaymentDate: Date?, lastStatementIssueDate: Date?, loanName: String?, loanStatus: StudentLoanStatus, minimumPaymentAmount: Double?, nextPaymentDueDate: Date?, originationDate: Date?, originationPrincipalAmount: Double?, outstandingInterestAmount: Double?, paymentReferenceNumber: String?, pslfStatus: PSLFStatus, repaymentPlan: StudentRepaymentPlan, sequenceNumber: String?, servicerAddress: ServicerAddressData, ytdInterestPaid: Double?, ytdPrincipalPaid: Double?) {
        self.accountId = accountId
        self.accountNumber = accountNumber
        self.disbursementDates = disbursementDates
        self.expectedPayoffDate = expectedPayoffDate
        self.guarantor = guarantor
        self.interestRatePercentage = interestRatePercentage
        self.isOverdue = isOverdue
        self.lastPaymentAmount = lastPaymentAmount
        self.lastPaymentDate = lastPaymentDate
        self.lastStatementIssueDate = lastStatementIssueDate
        self.loanName = loanName
        self.loanStatus = loanStatus
        self.minimumPaymentAmount = minimumPaymentAmount
        self.nextPaymentDueDate = nextPaymentDueDate
        self.originationDate = originationDate
        self.originationPrincipalAmount = originationPrincipalAmount
        self.outstandingInterestAmount = outstandingInterestAmount
        self.paymentReferenceNumber = paymentReferenceNumber
        self.pslfStatus = pslfStatus
        self.repaymentPlan = repaymentPlan
        self.sequenceNumber = sequenceNumber
        self.servicerAddress = servicerAddress
        self.ytdInterestPaid = ytdInterestPaid
        self.ytdPrincipalPaid = ytdPrincipalPaid
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountId = "account_id"
        case accountNumber = "account_number"
        case disbursementDates = "disbursement_dates"
        case expectedPayoffDate = "expected_payoff_date"
        case guarantor
        case interestRatePercentage = "interest_rate_percentage"
        case isOverdue = "is_overdue"
        case lastPaymentAmount = "last_payment_amount"
        case lastPaymentDate = "last_payment_date"
        case lastStatementIssueDate = "last_statement_issue_date"
        case loanName = "loan_name"
        case loanStatus = "loan_status"
        case minimumPaymentAmount = "minimum_payment_amount"
        case nextPaymentDueDate = "next_payment_due_date"
        case originationDate = "origination_date"
        case originationPrincipalAmount = "origination_principal_amount"
        case outstandingInterestAmount = "outstanding_interest_amount"
        case paymentReferenceNumber = "payment_reference_number"
        case pslfStatus = "pslf_status"
        case repaymentPlan = "repayment_plan"
        case sequenceNumber = "sequence_number"
        case servicerAddress = "servicer_address"
        case ytdInterestPaid = "ytd_interest_paid"
        case ytdPrincipalPaid = "ytd_principal_paid"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(accountId, forKey: .accountId)
        try container.encode(accountNumber, forKey: .accountNumber)
        try container.encode(disbursementDates, forKey: .disbursementDates)
        try container.encode(expectedPayoffDate, forKey: .expectedPayoffDate)
        try container.encode(guarantor, forKey: .guarantor)
        try container.encode(interestRatePercentage, forKey: .interestRatePercentage)
        try container.encode(isOverdue, forKey: .isOverdue)
        try container.encode(lastPaymentAmount, forKey: .lastPaymentAmount)
        try container.encode(lastPaymentDate, forKey: .lastPaymentDate)
        try container.encode(lastStatementIssueDate, forKey: .lastStatementIssueDate)
        try container.encode(loanName, forKey: .loanName)
        try container.encode(loanStatus, forKey: .loanStatus)
        try container.encode(minimumPaymentAmount, forKey: .minimumPaymentAmount)
        try container.encode(nextPaymentDueDate, forKey: .nextPaymentDueDate)
        try container.encode(originationDate, forKey: .originationDate)
        try container.encode(originationPrincipalAmount, forKey: .originationPrincipalAmount)
        try container.encode(outstandingInterestAmount, forKey: .outstandingInterestAmount)
        try container.encode(paymentReferenceNumber, forKey: .paymentReferenceNumber)
        try container.encode(pslfStatus, forKey: .pslfStatus)
        try container.encode(repaymentPlan, forKey: .repaymentPlan)
        try container.encode(sequenceNumber, forKey: .sequenceNumber)
        try container.encode(servicerAddress, forKey: .servicerAddress)
        try container.encode(ytdInterestPaid, forKey: .ytdInterestPaid)
        try container.encode(ytdPrincipalPaid, forKey: .ytdPrincipalPaid)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        accountId = try container.decodeIfPresent(String.self, forKey: .accountId)
        accountNumber = try container.decodeIfPresent(String.self, forKey: .accountNumber)
        disbursementDates = try container.decodeIfPresent([Date].self, forKey: .disbursementDates)
        expectedPayoffDate = try container.decodeIfPresent(Date.self, forKey: .expectedPayoffDate)
        guarantor = try container.decodeIfPresent(String.self, forKey: .guarantor)
        interestRatePercentage = try container.decode(Double.self, forKey: .interestRatePercentage)
        isOverdue = try container.decodeIfPresent(Bool.self, forKey: .isOverdue)
        lastPaymentAmount = try container.decodeIfPresent(Double.self, forKey: .lastPaymentAmount)
        lastPaymentDate = try container.decodeIfPresent(Date.self, forKey: .lastPaymentDate)
        lastStatementIssueDate = try container.decodeIfPresent(Date.self, forKey: .lastStatementIssueDate)
        loanName = try container.decodeIfPresent(String.self, forKey: .loanName)
        loanStatus = try container.decode(StudentLoanStatus.self, forKey: .loanStatus)
        minimumPaymentAmount = try container.decodeIfPresent(Double.self, forKey: .minimumPaymentAmount)
        nextPaymentDueDate = try container.decodeIfPresent(Date.self, forKey: .nextPaymentDueDate)
        originationDate = try container.decodeIfPresent(Date.self, forKey: .originationDate)
        originationPrincipalAmount = try container.decodeIfPresent(Double.self, forKey: .originationPrincipalAmount)
        outstandingInterestAmount = try container.decodeIfPresent(Double.self, forKey: .outstandingInterestAmount)
        paymentReferenceNumber = try container.decodeIfPresent(String.self, forKey: .paymentReferenceNumber)
        pslfStatus = try container.decode(PSLFStatus.self, forKey: .pslfStatus)
        repaymentPlan = try container.decode(StudentRepaymentPlan.self, forKey: .repaymentPlan)
        sequenceNumber = try container.decodeIfPresent(String.self, forKey: .sequenceNumber)
        servicerAddress = try container.decode(ServicerAddressData.self, forKey: .servicerAddress)
        ytdInterestPaid = try container.decodeIfPresent(Double.self, forKey: .ytdInterestPaid)
        ytdPrincipalPaid = try container.decodeIfPresent(Double.self, forKey: .ytdPrincipalPaid)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("account_id")
        nonAdditionalPropertyKeys.insert("account_number")
        nonAdditionalPropertyKeys.insert("disbursement_dates")
        nonAdditionalPropertyKeys.insert("expected_payoff_date")
        nonAdditionalPropertyKeys.insert("guarantor")
        nonAdditionalPropertyKeys.insert("interest_rate_percentage")
        nonAdditionalPropertyKeys.insert("is_overdue")
        nonAdditionalPropertyKeys.insert("last_payment_amount")
        nonAdditionalPropertyKeys.insert("last_payment_date")
        nonAdditionalPropertyKeys.insert("last_statement_issue_date")
        nonAdditionalPropertyKeys.insert("loan_name")
        nonAdditionalPropertyKeys.insert("loan_status")
        nonAdditionalPropertyKeys.insert("minimum_payment_amount")
        nonAdditionalPropertyKeys.insert("next_payment_due_date")
        nonAdditionalPropertyKeys.insert("origination_date")
        nonAdditionalPropertyKeys.insert("origination_principal_amount")
        nonAdditionalPropertyKeys.insert("outstanding_interest_amount")
        nonAdditionalPropertyKeys.insert("payment_reference_number")
        nonAdditionalPropertyKeys.insert("pslf_status")
        nonAdditionalPropertyKeys.insert("repayment_plan")
        nonAdditionalPropertyKeys.insert("sequence_number")
        nonAdditionalPropertyKeys.insert("servicer_address")
        nonAdditionalPropertyKeys.insert("ytd_interest_paid")
        nonAdditionalPropertyKeys.insert("ytd_principal_paid")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

