//
// LinkDeliveryCallbackWebhook.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Webhook containing metadata proxied over from Link callback e.g &#x60;onEvent&#x60;, &#x60;onExit&#x60;, &#x60;onSuccess&#x60;. */
public struct LinkDeliveryCallbackWebhook: Codable, JSONEncodable, Hashable {

    /** `LINK_DELIVERY` */
    public var webhookType: String
    /** `LINK_CALLBACK` */
    public var webhookCode: String
    /** The ID of the Hosted Link session. */
    public var linkDeliverySessionId: String
    /** Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. */
    public var timestamp: String
    public var error: PlaidError?
    public var linkCallbackMetadata: LinkCallbackMetadata

    public init(webhookType: String, webhookCode: String, linkDeliverySessionId: String, timestamp: String, error: PlaidError? = nil, linkCallbackMetadata: LinkCallbackMetadata) {
        self.webhookType = webhookType
        self.webhookCode = webhookCode
        self.linkDeliverySessionId = linkDeliverySessionId
        self.timestamp = timestamp
        self.error = error
        self.linkCallbackMetadata = linkCallbackMetadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case webhookType = "webhook_type"
        case webhookCode = "webhook_code"
        case linkDeliverySessionId = "link_delivery_session_id"
        case timestamp
        case error
        case linkCallbackMetadata = "link_callback_metadata"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(webhookType, forKey: .webhookType)
        try container.encode(webhookCode, forKey: .webhookCode)
        try container.encode(linkDeliverySessionId, forKey: .linkDeliverySessionId)
        try container.encode(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(error, forKey: .error)
        try container.encode(linkCallbackMetadata, forKey: .linkCallbackMetadata)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        webhookType = try container.decode(String.self, forKey: .webhookType)
        webhookCode = try container.decode(String.self, forKey: .webhookCode)
        linkDeliverySessionId = try container.decode(String.self, forKey: .linkDeliverySessionId)
        timestamp = try container.decode(String.self, forKey: .timestamp)
        error = try container.decodeIfPresent(PlaidError.self, forKey: .error)
        linkCallbackMetadata = try container.decode(LinkCallbackMetadata.self, forKey: .linkCallbackMetadata)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("webhook_type")
        nonAdditionalPropertyKeys.insert("webhook_code")
        nonAdditionalPropertyKeys.insert("link_delivery_session_id")
        nonAdditionalPropertyKeys.insert("timestamp")
        nonAdditionalPropertyKeys.insert("error")
        nonAdditionalPropertyKeys.insert("link_callback_metadata")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

