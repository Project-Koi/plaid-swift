//
// CraBankIncomeCreateRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** CraBankIncomeCreateRequest defines the request schema for &#x60;/cra/bank_income/create&#x60;. */
public struct CraBankIncomeCreateRequest: Codable, JSONEncodable, Hashable {

    static let daysRequestedRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 731, exclusiveMaximum: false, multipleOf: nil)
    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** The user token associated with the User data is being requested for. */
    public var userToken: String?
    /** The destination URL to which webhooks will be sent  */
    public var webhook: String?
    /** The number of days of data to request for the Bank Income product */
    public var daysRequested: Int?
    public var consumerReportPermissiblePurpose: ConsumerReportPermissiblePurpose?

    public init(clientId: String? = nil, secret: String? = nil, userToken: String? = nil, webhook: String? = nil, daysRequested: Int? = nil, consumerReportPermissiblePurpose: ConsumerReportPermissiblePurpose? = nil) {
        self.clientId = clientId
        self.secret = secret
        self.userToken = userToken
        self.webhook = webhook
        self.daysRequested = daysRequested
        self.consumerReportPermissiblePurpose = consumerReportPermissiblePurpose
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case userToken = "user_token"
        case webhook
        case daysRequested = "days_requested"
        case consumerReportPermissiblePurpose = "consumer_report_permissible_purpose"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encodeIfPresent(userToken, forKey: .userToken)
        try container.encodeIfPresent(webhook, forKey: .webhook)
        try container.encodeIfPresent(daysRequested, forKey: .daysRequested)
        try container.encodeIfPresent(consumerReportPermissiblePurpose, forKey: .consumerReportPermissiblePurpose)
    }
}

