//
// EntityWatchlistScreeningHit.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Data from a government watchlist that has been attached to the screening. */
public struct EntityWatchlistScreeningHit: Codable, JSONEncodable, Hashable {

    static let sourceUidRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    /** ID of the associated entity screening hit. */
    public var id: String
    public var reviewStatus: WatchlistScreeningHitStatus
    /** An ISO8601 formatted timestamp. */
    public var firstActive: Date
    /** An ISO8601 formatted timestamp. */
    public var inactiveSince: Date?
    /** An ISO8601 formatted timestamp. */
    public var historicalSince: Date?
    public var listCode: EntityWatchlistCode
    /** A universal identifier for a watchlist individual that is stable across searches and updates. */
    public var plaidUid: String
    /** The identifier provided by the source sanction or watchlist. When one is not provided by the source, this is `null`. */
    public var sourceUid: String?
    public var analysis: EntityScreeningHitAnalysis?
    public var data: EntityScreeningHitData?

    public init(id: String, reviewStatus: WatchlistScreeningHitStatus, firstActive: Date, inactiveSince: Date?, historicalSince: Date?, listCode: EntityWatchlistCode, plaidUid: String, sourceUid: String?, analysis: EntityScreeningHitAnalysis? = nil, data: EntityScreeningHitData? = nil) {
        self.id = id
        self.reviewStatus = reviewStatus
        self.firstActive = firstActive
        self.inactiveSince = inactiveSince
        self.historicalSince = historicalSince
        self.listCode = listCode
        self.plaidUid = plaidUid
        self.sourceUid = sourceUid
        self.analysis = analysis
        self.data = data
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case reviewStatus = "review_status"
        case firstActive = "first_active"
        case inactiveSince = "inactive_since"
        case historicalSince = "historical_since"
        case listCode = "list_code"
        case plaidUid = "plaid_uid"
        case sourceUid = "source_uid"
        case analysis
        case data
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(reviewStatus, forKey: .reviewStatus)
        try container.encode(firstActive, forKey: .firstActive)
        try container.encode(inactiveSince, forKey: .inactiveSince)
        try container.encode(historicalSince, forKey: .historicalSince)
        try container.encode(listCode, forKey: .listCode)
        try container.encode(plaidUid, forKey: .plaidUid)
        try container.encode(sourceUid, forKey: .sourceUid)
        try container.encodeIfPresent(analysis, forKey: .analysis)
        try container.encodeIfPresent(data, forKey: .data)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decode(String.self, forKey: .id)
        reviewStatus = try container.decode(WatchlistScreeningHitStatus.self, forKey: .reviewStatus)
        firstActive = try container.decode(Date.self, forKey: .firstActive)
        inactiveSince = try container.decodeIfPresent(Date.self, forKey: .inactiveSince)
        historicalSince = try container.decodeIfPresent(Date.self, forKey: .historicalSince)
        listCode = try container.decode(EntityWatchlistCode.self, forKey: .listCode)
        plaidUid = try container.decode(String.self, forKey: .plaidUid)
        sourceUid = try container.decodeIfPresent(String.self, forKey: .sourceUid)
        analysis = try container.decodeIfPresent(EntityScreeningHitAnalysis.self, forKey: .analysis)
        data = try container.decodeIfPresent(EntityScreeningHitData.self, forKey: .data)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("id")
        nonAdditionalPropertyKeys.insert("review_status")
        nonAdditionalPropertyKeys.insert("first_active")
        nonAdditionalPropertyKeys.insert("inactive_since")
        nonAdditionalPropertyKeys.insert("historical_since")
        nonAdditionalPropertyKeys.insert("list_code")
        nonAdditionalPropertyKeys.insert("plaid_uid")
        nonAdditionalPropertyKeys.insert("source_uid")
        nonAdditionalPropertyKeys.insert("analysis")
        nonAdditionalPropertyKeys.insert("data")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

