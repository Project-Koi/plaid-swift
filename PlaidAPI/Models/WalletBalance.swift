//
// WalletBalance.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An object representing the e-wallet balance */
public struct WalletBalance: Codable, JSONEncodable, Hashable {

    /** The ISO-4217 currency code of the balance */
    public var isoCurrencyCode: String
    /** The total amount of funds in the account */
    public var current: Double
    /** The total amount of funds in the account after subtracting pending debit transaction amounts */
    public var available: Double

    public init(isoCurrencyCode: String, current: Double, available: Double) {
        self.isoCurrencyCode = isoCurrencyCode
        self.current = current
        self.available = available
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case isoCurrencyCode = "iso_currency_code"
        case current
        case available
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(isoCurrencyCode, forKey: .isoCurrencyCode)
        try container.encode(current, forKey: .current)
        try container.encode(available, forKey: .available)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        isoCurrencyCode = try container.decode(String.self, forKey: .isoCurrencyCode)
        current = try container.decode(Double.self, forKey: .current)
        available = try container.decode(Double.self, forKey: .available)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("iso_currency_code")
        nonAdditionalPropertyKeys.insert("current")
        nonAdditionalPropertyKeys.insert("available")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

