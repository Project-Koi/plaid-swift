//
// WalletListRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** WalletListRequest defines the request schema for &#x60;/wallet/list&#x60; */
public struct WalletListRequest: Codable, JSONEncodable, Hashable {

    static let cursorRule = StringRule(minLength: nil, maxLength: 256, pattern: nil)
    static let countRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 20, exclusiveMaximum: false, multipleOf: nil)
    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    public var isoCurrencyCode: WalletISOCurrencyCode?
    /** A base64 value representing the latest e-wallet that has already been requested. Set this to `next_cursor` received from the previous `/wallet/list` request. If provided, the response will only contain e-wallets created before that e-wallet. If omitted, the response will contain e-wallets starting from the most recent, and in descending order. */
    public var cursor: String?
    /** The number of e-wallets to fetch */
    public var count: Int? = 10

    public init(clientId: String? = nil, secret: String? = nil, isoCurrencyCode: WalletISOCurrencyCode? = nil, cursor: String? = nil, count: Int? = 10) {
        self.clientId = clientId
        self.secret = secret
        self.isoCurrencyCode = isoCurrencyCode
        self.cursor = cursor
        self.count = count
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case isoCurrencyCode = "iso_currency_code"
        case cursor
        case count
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encodeIfPresent(isoCurrencyCode, forKey: .isoCurrencyCode)
        try container.encodeIfPresent(cursor, forKey: .cursor)
        try container.encodeIfPresent(count, forKey: .count)
    }
}

