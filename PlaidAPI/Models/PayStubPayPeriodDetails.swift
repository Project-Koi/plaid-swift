//
// PayStubPayPeriodDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Details about the pay period. */
public struct PayStubPayPeriodDetails: Codable, JSONEncodable, Hashable {

    /** The amount of the paycheck. */
    public var payAmount: Double?
    public var distributionBreakdown: [PayStubDistributionBreakdown]
    /** The date on which the pay period ended, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (\"yyyy-mm-dd\"). */
    public var endDate: Date?
    /** Total earnings before tax/deductions. */
    public var grossEarnings: Double?
    /** The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null. */
    public var isoCurrencyCode: String?
    /** The date on which the pay stub was issued, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (\"yyyy-mm-dd\"). */
    public var payDate: Date?
    /** The frequency at which an individual is paid. */
    public var payFrequency: String?
    public var payBasis: CreditPayStubPayBasisType?
    /** The date on which the pay period started, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (\"yyyy-mm-dd\"). */
    public var startDate: Date?
    /** The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s. */
    public var unofficialCurrencyCode: String?

    public init(payAmount: Double?, distributionBreakdown: [PayStubDistributionBreakdown], endDate: Date?, grossEarnings: Double?, isoCurrencyCode: String?, payDate: Date?, payFrequency: String?, payBasis: CreditPayStubPayBasisType? = nil, startDate: Date?, unofficialCurrencyCode: String?) {
        self.payAmount = payAmount
        self.distributionBreakdown = distributionBreakdown
        self.endDate = endDate
        self.grossEarnings = grossEarnings
        self.isoCurrencyCode = isoCurrencyCode
        self.payDate = payDate
        self.payFrequency = payFrequency
        self.payBasis = payBasis
        self.startDate = startDate
        self.unofficialCurrencyCode = unofficialCurrencyCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case payAmount = "pay_amount"
        case distributionBreakdown = "distribution_breakdown"
        case endDate = "end_date"
        case grossEarnings = "gross_earnings"
        case isoCurrencyCode = "iso_currency_code"
        case payDate = "pay_date"
        case payFrequency = "pay_frequency"
        case payBasis = "pay_basis"
        case startDate = "start_date"
        case unofficialCurrencyCode = "unofficial_currency_code"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(payAmount, forKey: .payAmount)
        try container.encode(distributionBreakdown, forKey: .distributionBreakdown)
        try container.encode(endDate, forKey: .endDate)
        try container.encode(grossEarnings, forKey: .grossEarnings)
        try container.encode(isoCurrencyCode, forKey: .isoCurrencyCode)
        try container.encode(payDate, forKey: .payDate)
        try container.encode(payFrequency, forKey: .payFrequency)
        try container.encodeIfPresent(payBasis, forKey: .payBasis)
        try container.encode(startDate, forKey: .startDate)
        try container.encode(unofficialCurrencyCode, forKey: .unofficialCurrencyCode)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        payAmount = try container.decodeIfPresent(Double.self, forKey: .payAmount)
        distributionBreakdown = try container.decode([PayStubDistributionBreakdown].self, forKey: .distributionBreakdown)
        endDate = try container.decodeIfPresent(Date.self, forKey: .endDate)
        grossEarnings = try container.decodeIfPresent(Double.self, forKey: .grossEarnings)
        isoCurrencyCode = try container.decodeIfPresent(String.self, forKey: .isoCurrencyCode)
        payDate = try container.decodeIfPresent(Date.self, forKey: .payDate)
        payFrequency = try container.decodeIfPresent(String.self, forKey: .payFrequency)
        payBasis = try container.decodeIfPresent(CreditPayStubPayBasisType.self, forKey: .payBasis)
        startDate = try container.decodeIfPresent(Date.self, forKey: .startDate)
        unofficialCurrencyCode = try container.decodeIfPresent(String.self, forKey: .unofficialCurrencyCode)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("pay_amount")
        nonAdditionalPropertyKeys.insert("distribution_breakdown")
        nonAdditionalPropertyKeys.insert("end_date")
        nonAdditionalPropertyKeys.insert("gross_earnings")
        nonAdditionalPropertyKeys.insert("iso_currency_code")
        nonAdditionalPropertyKeys.insert("pay_date")
        nonAdditionalPropertyKeys.insert("pay_frequency")
        nonAdditionalPropertyKeys.insert("pay_basis")
        nonAdditionalPropertyKeys.insert("start_date")
        nonAdditionalPropertyKeys.insert("unofficial_currency_code")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

