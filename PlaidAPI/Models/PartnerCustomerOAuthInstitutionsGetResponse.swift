//
// PartnerCustomerOAuthInstitutionsGetResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Response schema for &#x60;/partner/customer/oauth_institutions/get&#x60;. */
public struct PartnerCustomerOAuthInstitutionsGetResponse: Codable, JSONEncodable, Hashable {

    public var flowdownStatus: PartnerEndCustomerFlowdownStatus?
    public var questionnaireStatus: PartnerEndCustomerQuestionnaireStatus?
    /** The OAuth institutions with which the end customer's application is being registered. */
    public var institutions: [PartnerEndCustomerOAuthInstitution]?
    /** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
    public var requestId: String?

    public init(flowdownStatus: PartnerEndCustomerFlowdownStatus? = nil, questionnaireStatus: PartnerEndCustomerQuestionnaireStatus? = nil, institutions: [PartnerEndCustomerOAuthInstitution]? = nil, requestId: String? = nil) {
        self.flowdownStatus = flowdownStatus
        self.questionnaireStatus = questionnaireStatus
        self.institutions = institutions
        self.requestId = requestId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case flowdownStatus = "flowdown_status"
        case questionnaireStatus = "questionnaire_status"
        case institutions
        case requestId = "request_id"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(flowdownStatus, forKey: .flowdownStatus)
        try container.encodeIfPresent(questionnaireStatus, forKey: .questionnaireStatus)
        try container.encodeIfPresent(institutions, forKey: .institutions)
        try container.encodeIfPresent(requestId, forKey: .requestId)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        flowdownStatus = try container.decodeIfPresent(PartnerEndCustomerFlowdownStatus.self, forKey: .flowdownStatus)
        questionnaireStatus = try container.decodeIfPresent(PartnerEndCustomerQuestionnaireStatus.self, forKey: .questionnaireStatus)
        institutions = try container.decodeIfPresent([PartnerEndCustomerOAuthInstitution].self, forKey: .institutions)
        requestId = try container.decodeIfPresent(String.self, forKey: .requestId)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("flowdown_status")
        nonAdditionalPropertyKeys.insert("questionnaire_status")
        nonAdditionalPropertyKeys.insert("institutions")
        nonAdditionalPropertyKeys.insert("request_id")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

