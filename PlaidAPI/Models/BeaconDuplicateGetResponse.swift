//
// BeaconDuplicateGetResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Beacon Duplicate represents a pair of matching Beacon Users and an analysis of the fields they matched on. */
public struct BeaconDuplicateGetResponse: Codable, JSONEncodable, Hashable {

    /** ID of the associated Beacon Duplicate. */
    public var id: String
    public var beaconUser1: BeaconUserRevision
    public var beaconUser2: BeaconUserRevision
    public var analysis: BeaconMatchSummaryAnalysis
    /** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
    public var requestId: String

    public init(id: String, beaconUser1: BeaconUserRevision, beaconUser2: BeaconUserRevision, analysis: BeaconMatchSummaryAnalysis, requestId: String) {
        self.id = id
        self.beaconUser1 = beaconUser1
        self.beaconUser2 = beaconUser2
        self.analysis = analysis
        self.requestId = requestId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case beaconUser1 = "beacon_user1"
        case beaconUser2 = "beacon_user2"
        case analysis
        case requestId = "request_id"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(beaconUser1, forKey: .beaconUser1)
        try container.encode(beaconUser2, forKey: .beaconUser2)
        try container.encode(analysis, forKey: .analysis)
        try container.encode(requestId, forKey: .requestId)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decode(String.self, forKey: .id)
        beaconUser1 = try container.decode(BeaconUserRevision.self, forKey: .beaconUser1)
        beaconUser2 = try container.decode(BeaconUserRevision.self, forKey: .beaconUser2)
        analysis = try container.decode(BeaconMatchSummaryAnalysis.self, forKey: .analysis)
        requestId = try container.decode(String.self, forKey: .requestId)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("id")
        nonAdditionalPropertyKeys.insert("beacon_user1")
        nonAdditionalPropertyKeys.insert("beacon_user2")
        nonAdditionalPropertyKeys.insert("analysis")
        nonAdditionalPropertyKeys.insert("request_id")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

