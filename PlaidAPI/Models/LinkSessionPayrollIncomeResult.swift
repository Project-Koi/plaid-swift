//
// LinkSessionPayrollIncomeResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The details of a digital payroll income verification in Link. */
public struct LinkSessionPayrollIncomeResult: Codable, JSONEncodable, Hashable {

    /** The number of paystubs retrieved from a payroll provider. */
    public var numPaystubsRetrieved: Int
    /** The number of W-2s retrieved from a payroll provider. */
    public var numW2sRetrieved: Int
    public var institution: LinkSessionSuccessMetadataInstitution?

    public init(numPaystubsRetrieved: Int, numW2sRetrieved: Int, institution: LinkSessionSuccessMetadataInstitution?) {
        self.numPaystubsRetrieved = numPaystubsRetrieved
        self.numW2sRetrieved = numW2sRetrieved
        self.institution = institution
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case numPaystubsRetrieved = "num_paystubs_retrieved"
        case numW2sRetrieved = "num_w2s_retrieved"
        case institution
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(numPaystubsRetrieved, forKey: .numPaystubsRetrieved)
        try container.encode(numW2sRetrieved, forKey: .numW2sRetrieved)
        try container.encode(institution, forKey: .institution)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        numPaystubsRetrieved = try container.decode(Int.self, forKey: .numPaystubsRetrieved)
        numW2sRetrieved = try container.decode(Int.self, forKey: .numW2sRetrieved)
        institution = try container.decodeIfPresent(LinkSessionSuccessMetadataInstitution.self, forKey: .institution)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("num_paystubs_retrieved")
        nonAdditionalPropertyKeys.insert("num_w2s_retrieved")
        nonAdditionalPropertyKeys.insert("institution")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

