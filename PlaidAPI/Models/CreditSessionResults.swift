//
// CreditSessionResults.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The set of results for a Link session. */
public struct CreditSessionResults: Codable, JSONEncodable, Hashable {

    /** The set of Item adds for the Link session. */
    public var itemAddResults: [CreditSessionItemAddResult]?
    /** The set of bank income verifications for the Link session. */
    public var bankIncomeResults: [CreditSessionBankIncomeResult]?
    /** The set of bank employment verifications for the Link session. */
    public var bankEmploymentResults: [CreditSessionBankEmploymentResult]?
    /** The set of payroll income verifications for the Link session. */
    public var payrollIncomeResults: [CreditSessionPayrollIncomeResult]?
    public var documentIncomeResults: CreditSessionDocumentIncomeResult?

    public init(itemAddResults: [CreditSessionItemAddResult]? = nil, bankIncomeResults: [CreditSessionBankIncomeResult]? = nil, bankEmploymentResults: [CreditSessionBankEmploymentResult]? = nil, payrollIncomeResults: [CreditSessionPayrollIncomeResult]? = nil, documentIncomeResults: CreditSessionDocumentIncomeResult? = nil) {
        self.itemAddResults = itemAddResults
        self.bankIncomeResults = bankIncomeResults
        self.bankEmploymentResults = bankEmploymentResults
        self.payrollIncomeResults = payrollIncomeResults
        self.documentIncomeResults = documentIncomeResults
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case itemAddResults = "item_add_results"
        case bankIncomeResults = "bank_income_results"
        case bankEmploymentResults = "bank_employment_results"
        case payrollIncomeResults = "payroll_income_results"
        case documentIncomeResults = "document_income_results"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(itemAddResults, forKey: .itemAddResults)
        try container.encodeIfPresent(bankIncomeResults, forKey: .bankIncomeResults)
        try container.encodeIfPresent(bankEmploymentResults, forKey: .bankEmploymentResults)
        try container.encodeIfPresent(payrollIncomeResults, forKey: .payrollIncomeResults)
        try container.encodeIfPresent(documentIncomeResults, forKey: .documentIncomeResults)
    }
}

