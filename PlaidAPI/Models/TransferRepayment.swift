//
// TransferRepayment.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A repayment is created automatically after one or more guaranteed transactions receive a return. If there are multiple eligible returns in a day, they are batched together into a single repayment.  Repayments are sent over ACH, with funds typically available on the next banking day. */
public struct TransferRepayment: Codable, JSONEncodable, Hashable {

    /** Identifier of the repayment. */
    public var repaymentId: String
    /** The datetime when the repayment occurred, in RFC 3339 format. */
    public var created: Date
    /** Decimal amount of the repayment as it appears on your account ledger. */
    public var amount: String
    /** The currency of the repayment, e.g. \"USD\". */
    public var isoCurrencyCode: String

    public init(repaymentId: String, created: Date, amount: String, isoCurrencyCode: String) {
        self.repaymentId = repaymentId
        self.created = created
        self.amount = amount
        self.isoCurrencyCode = isoCurrencyCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case repaymentId = "repayment_id"
        case created
        case amount
        case isoCurrencyCode = "iso_currency_code"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(repaymentId, forKey: .repaymentId)
        try container.encode(created, forKey: .created)
        try container.encode(amount, forKey: .amount)
        try container.encode(isoCurrencyCode, forKey: .isoCurrencyCode)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        repaymentId = try container.decode(String.self, forKey: .repaymentId)
        created = try container.decode(Date.self, forKey: .created)
        amount = try container.decode(String.self, forKey: .amount)
        isoCurrencyCode = try container.decode(String.self, forKey: .isoCurrencyCode)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("repayment_id")
        nonAdditionalPropertyKeys.insert("created")
        nonAdditionalPropertyKeys.insert("amount")
        nonAdditionalPropertyKeys.insert("iso_currency_code")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

