//
// PartnerCustomerCreateRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Request schema for &#x60;/partner/customer/create&#x60;. */
public struct PartnerCustomerCreateRequest: Codable, JSONEncodable, Hashable {

    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** The company name of the end customer being created. This will be used to display the end customer in the Plaid Dashboard. It will not be shown to end users. */
    public var companyName: String
    /** Denotes whether or not the partner has completed attestation of diligence for the end customer to be created. */
    public var isDiligenceAttested: Bool
    /** The products to be enabled for the end customer. If empty or `null`, this field will default to the products enabled for the reseller at the time this endpoint is called. */
    public var products: [Products]?
    /** If `true`, the end customer's default Link customization will be set to match the partner's. You can always change the end customer's Link customization in the Plaid Dashboard. See the [Link Customization docs](https://plaid.com/docs/link/customization/) for more information. */
    public var createLinkCustomization: Bool?
    /** Base64-encoded representation of the end customer's logo. Must be a PNG of size 1024x1024 under 4MB. The logo will be shared with financial institutions and shown to the end user during Link flows. A logo is required if `create_link_customization` is `true`. If `create_link_customization` is `false` and the logo is omitted, the partner's logo will be used if one exists, otherwise a stock logo will be used. */
    public var logo: String?
    /** The end customer's legal name. This will be shared with financial institutions as part of the OAuth registration process. It will not be shown to end users. */
    public var legalEntityName: String
    /** The end customer's website. */
    public var website: String
    /** The name of the end customer's application. This will be shown to end users when they go through the Plaid Link flow. */
    public var applicationName: String
    public var technicalContact: PartnerEndCustomerTechnicalContact?
    public var billingContact: PartnerEndCustomerBillingContact?
    public var customerSupportInfo: PartnerEndCustomerCustomerSupportInfo?
    public var address: PartnerEndCustomerAddress
    /** Denotes whether the partner has forwarded the Plaid bank addendum to the end customer. */
    public var isBankAddendumCompleted: Bool
    public var assetsUnderManagement: PartnerEndCustomerAssetsUnderManagement?
    /** A list of URIs indicating the destination(s) where a user can be forwarded after completing the Link flow; used to support OAuth authentication flows when launching Link in the browser or another app. URIs should not contain any query parameters. When used in Production or Development, URIs must use https. To specify any subdomain, use `*` as a wildcard character, e.g. `https://_*.example.com/oauth.html`. To modify redirect URIs for an end customer after creating them, go to the end customer's [API page](https://dashboard.plaid.com/team/api) in the Dashboard. */
    public var redirectUris: [String]?
    /** The unique identifier assigned to a financial institution by regulatory authorities, if applicable. For banks, this is the FDIC Certificate Number. For credit unions, this is the Credit Union Charter Number. */
    public var registrationNumber: String?

    public init(clientId: String? = nil, secret: String? = nil, companyName: String, isDiligenceAttested: Bool, products: [Products]? = nil, createLinkCustomization: Bool? = nil, logo: String? = nil, legalEntityName: String, website: String, applicationName: String, technicalContact: PartnerEndCustomerTechnicalContact? = nil, billingContact: PartnerEndCustomerBillingContact? = nil, customerSupportInfo: PartnerEndCustomerCustomerSupportInfo? = nil, address: PartnerEndCustomerAddress, isBankAddendumCompleted: Bool, assetsUnderManagement: PartnerEndCustomerAssetsUnderManagement? = nil, redirectUris: [String]? = nil, registrationNumber: String? = nil) {
        self.clientId = clientId
        self.secret = secret
        self.companyName = companyName
        self.isDiligenceAttested = isDiligenceAttested
        self.products = products
        self.createLinkCustomization = createLinkCustomization
        self.logo = logo
        self.legalEntityName = legalEntityName
        self.website = website
        self.applicationName = applicationName
        self.technicalContact = technicalContact
        self.billingContact = billingContact
        self.customerSupportInfo = customerSupportInfo
        self.address = address
        self.isBankAddendumCompleted = isBankAddendumCompleted
        self.assetsUnderManagement = assetsUnderManagement
        self.redirectUris = redirectUris
        self.registrationNumber = registrationNumber
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case companyName = "company_name"
        case isDiligenceAttested = "is_diligence_attested"
        case products
        case createLinkCustomization = "create_link_customization"
        case logo
        case legalEntityName = "legal_entity_name"
        case website
        case applicationName = "application_name"
        case technicalContact = "technical_contact"
        case billingContact = "billing_contact"
        case customerSupportInfo = "customer_support_info"
        case address
        case isBankAddendumCompleted = "is_bank_addendum_completed"
        case assetsUnderManagement = "assets_under_management"
        case redirectUris = "redirect_uris"
        case registrationNumber = "registration_number"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encode(companyName, forKey: .companyName)
        try container.encode(isDiligenceAttested, forKey: .isDiligenceAttested)
        try container.encodeIfPresent(products, forKey: .products)
        try container.encodeIfPresent(createLinkCustomization, forKey: .createLinkCustomization)
        try container.encodeIfPresent(logo, forKey: .logo)
        try container.encode(legalEntityName, forKey: .legalEntityName)
        try container.encode(website, forKey: .website)
        try container.encode(applicationName, forKey: .applicationName)
        try container.encodeIfPresent(technicalContact, forKey: .technicalContact)
        try container.encodeIfPresent(billingContact, forKey: .billingContact)
        try container.encodeIfPresent(customerSupportInfo, forKey: .customerSupportInfo)
        try container.encode(address, forKey: .address)
        try container.encode(isBankAddendumCompleted, forKey: .isBankAddendumCompleted)
        try container.encodeIfPresent(assetsUnderManagement, forKey: .assetsUnderManagement)
        try container.encodeIfPresent(redirectUris, forKey: .redirectUris)
        try container.encodeIfPresent(registrationNumber, forKey: .registrationNumber)
    }
}

