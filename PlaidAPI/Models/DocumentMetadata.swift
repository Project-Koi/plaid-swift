//
// DocumentMetadata.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An object representing metadata from the end user&#39;s uploaded document. */
public struct DocumentMetadata: Codable, JSONEncodable, Hashable {

    /** The name of the document. */
    public var name: String?
    /** The processing status of the document.  `PROCESSING_COMPLETE`: The document was successfully processed.  `DOCUMENT_ERROR`: The document could not be processed. Possible causes include: The document was an unacceptable document type such as an offer letter or bank statement, the document image was cropped or blurry, or the document was corrupted.  `UNKNOWN` or `null`: An internal error occurred. If this happens repeatedly, contact support or your Plaid account manager. */
    public var status: String?
    /** An identifier of the document that is also present in the paystub response. */
    public var docId: String?
    public var docType: DocType?

    public init(name: String? = nil, status: String? = nil, docId: String? = nil, docType: DocType? = nil) {
        self.name = name
        self.status = status
        self.docId = docId
        self.docType = docType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case status
        case docId = "doc_id"
        case docType = "doc_type"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(docId, forKey: .docId)
        try container.encodeIfPresent(docType, forKey: .docType)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        name = try container.decodeIfPresent(String.self, forKey: .name)
        status = try container.decodeIfPresent(String.self, forKey: .status)
        docId = try container.decodeIfPresent(String.self, forKey: .docId)
        docType = try container.decodeIfPresent(DocType.self, forKey: .docType)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("name")
        nonAdditionalPropertyKeys.insert("status")
        nonAdditionalPropertyKeys.insert("doc_id")
        nonAdditionalPropertyKeys.insert("doc_type")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

