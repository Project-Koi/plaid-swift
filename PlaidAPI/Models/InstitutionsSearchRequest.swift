//
// InstitutionsSearchRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** InstitutionsSearchRequest defines the request schema for &#x60;/institutions/search&#x60; */
public struct InstitutionsSearchRequest: Codable, JSONEncodable, Hashable {

    static let queryRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** The search query. Institutions with names matching the query are returned */
    public var query: String
    /** Filter the Institutions based on whether they support all products listed in `products`. Provide `null` to get institutions regardless of supported products. Note that when `auth` is specified as a product, if you are enabled for Instant Match or Automated Micro-deposits, institutions that support those products will be returned even if `auth` is not present in their product array. */
    public var products: [Products]?
    /** Specify which country or countries to include institutions from, using the ISO-3166-1 alpha-2 country code standard. In API versions 2019-05-29 and earlier, the `country_codes` parameter is an optional parameter within the `options` object and will default to `[US]` if it is not supplied.  */
    public var countryCodes: [CountryCode]
    public var options: InstitutionsSearchRequestOptions?

    public init(clientId: String? = nil, secret: String? = nil, query: String, products: [Products]? = nil, countryCodes: [CountryCode], options: InstitutionsSearchRequestOptions? = nil) {
        self.clientId = clientId
        self.secret = secret
        self.query = query
        self.products = products
        self.countryCodes = countryCodes
        self.options = options
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case query
        case products
        case countryCodes = "country_codes"
        case options
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encode(query, forKey: .query)
        try container.encodeIfPresent(products, forKey: .products)
        try container.encode(countryCodes, forKey: .countryCodes)
        try container.encodeIfPresent(options, forKey: .options)
    }
}

