//
// DepositSwitchTargetUser.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The deposit switch target user */
public struct DepositSwitchTargetUser: Codable, JSONEncodable, Hashable {

    /** The given name (first name) of the user. */
    public var givenName: String
    /** The family name (last name) of the user. */
    public var familyName: String
    /** The phone number of the user. The endpoint can accept a variety of phone number formats, including E.164. */
    public var phone: String
    /** The email address of the user. */
    public var email: String
    public var address: DepositSwitchAddressData?
    /** The taxpayer ID of the user, generally their SSN, EIN, or TIN. */
    public var taxPayerId: String?

    public init(givenName: String, familyName: String, phone: String, email: String, address: DepositSwitchAddressData? = nil, taxPayerId: String? = nil) {
        self.givenName = givenName
        self.familyName = familyName
        self.phone = phone
        self.email = email
        self.address = address
        self.taxPayerId = taxPayerId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case givenName = "given_name"
        case familyName = "family_name"
        case phone
        case email
        case address
        case taxPayerId = "tax_payer_id"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(givenName, forKey: .givenName)
        try container.encode(familyName, forKey: .familyName)
        try container.encode(phone, forKey: .phone)
        try container.encode(email, forKey: .email)
        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(taxPayerId, forKey: .taxPayerId)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        givenName = try container.decode(String.self, forKey: .givenName)
        familyName = try container.decode(String.self, forKey: .familyName)
        phone = try container.decode(String.self, forKey: .phone)
        email = try container.decode(String.self, forKey: .email)
        address = try container.decodeIfPresent(DepositSwitchAddressData.self, forKey: .address)
        taxPayerId = try container.decodeIfPresent(String.self, forKey: .taxPayerId)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("given_name")
        nonAdditionalPropertyKeys.insert("family_name")
        nonAdditionalPropertyKeys.insert("phone")
        nonAdditionalPropertyKeys.insert("email")
        nonAdditionalPropertyKeys.insert("address")
        nonAdditionalPropertyKeys.insert("tax_payer_id")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

