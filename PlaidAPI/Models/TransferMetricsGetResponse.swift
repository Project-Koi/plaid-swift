//
// TransferMetricsGetResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Defines the response schema for &#x60;/transfer/metrics/get&#x60; */
public struct TransferMetricsGetResponse: Codable, JSONEncodable, Hashable {

    /** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
    public var requestId: String
    /** Sum of dollar amount of debit transfers in last 24 hours (decimal string with two digits of precision e.g. \"10.00\"). */
    public var dailyDebitTransferVolume: String
    /** Sum of dollar amount of credit transfers in last 24 hours (decimal string with two digits of precision e.g. \"10.00\"). */
    public var dailyCreditTransferVolume: String
    /** Sum of dollar amount of credit and debit transfers in current calendar month (decimal string with two digits of precision e.g. \"10.00\"). */
    @available(*, deprecated, message: "This property is deprecated.")
    public var monthlyTransferVolume: String
    /** Sum of dollar amount of debit transfers in current calendar month (decimal string with two digits of precision e.g. \"10.00\"). */
    public var monthlyDebitTransferVolume: String
    /** Sum of dollar amount of credit transfers in current calendar month (decimal string with two digits of precision e.g. \"10.00\"). */
    public var monthlyCreditTransferVolume: String
    /** The currency of the dollar amount, e.g. \"USD\". */
    public var isoCurrencyCode: String

    public init(requestId: String, dailyDebitTransferVolume: String, dailyCreditTransferVolume: String, monthlyTransferVolume: String, monthlyDebitTransferVolume: String, monthlyCreditTransferVolume: String, isoCurrencyCode: String) {
        self.requestId = requestId
        self.dailyDebitTransferVolume = dailyDebitTransferVolume
        self.dailyCreditTransferVolume = dailyCreditTransferVolume
        self.monthlyTransferVolume = monthlyTransferVolume
        self.monthlyDebitTransferVolume = monthlyDebitTransferVolume
        self.monthlyCreditTransferVolume = monthlyCreditTransferVolume
        self.isoCurrencyCode = isoCurrencyCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case requestId = "request_id"
        case dailyDebitTransferVolume = "daily_debit_transfer_volume"
        case dailyCreditTransferVolume = "daily_credit_transfer_volume"
        case monthlyTransferVolume = "monthly_transfer_volume"
        case monthlyDebitTransferVolume = "monthly_debit_transfer_volume"
        case monthlyCreditTransferVolume = "monthly_credit_transfer_volume"
        case isoCurrencyCode = "iso_currency_code"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(requestId, forKey: .requestId)
        try container.encode(dailyDebitTransferVolume, forKey: .dailyDebitTransferVolume)
        try container.encode(dailyCreditTransferVolume, forKey: .dailyCreditTransferVolume)
        try container.encode(monthlyTransferVolume, forKey: .monthlyTransferVolume)
        try container.encode(monthlyDebitTransferVolume, forKey: .monthlyDebitTransferVolume)
        try container.encode(monthlyCreditTransferVolume, forKey: .monthlyCreditTransferVolume)
        try container.encode(isoCurrencyCode, forKey: .isoCurrencyCode)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        requestId = try container.decode(String.self, forKey: .requestId)
        dailyDebitTransferVolume = try container.decode(String.self, forKey: .dailyDebitTransferVolume)
        dailyCreditTransferVolume = try container.decode(String.self, forKey: .dailyCreditTransferVolume)
        monthlyTransferVolume = try container.decode(String.self, forKey: .monthlyTransferVolume)
        monthlyDebitTransferVolume = try container.decode(String.self, forKey: .monthlyDebitTransferVolume)
        monthlyCreditTransferVolume = try container.decode(String.self, forKey: .monthlyCreditTransferVolume)
        isoCurrencyCode = try container.decode(String.self, forKey: .isoCurrencyCode)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("request_id")
        nonAdditionalPropertyKeys.insert("daily_debit_transfer_volume")
        nonAdditionalPropertyKeys.insert("daily_credit_transfer_volume")
        nonAdditionalPropertyKeys.insert("monthly_transfer_volume")
        nonAdditionalPropertyKeys.insert("monthly_debit_transfer_volume")
        nonAdditionalPropertyKeys.insert("monthly_credit_transfer_volume")
        nonAdditionalPropertyKeys.insert("iso_currency_code")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

