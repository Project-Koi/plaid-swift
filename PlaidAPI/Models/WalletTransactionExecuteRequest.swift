//
// WalletTransactionExecuteRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** WalletTransactionExecuteRequest defines the request schema for &#x60;/wallet/transaction/execute&#x60; */
public struct WalletTransactionExecuteRequest: Codable, JSONEncodable, Hashable {

    static let idempotencyKeyRule = StringRule(minLength: 1, maxLength: 128, pattern: nil)
    static let walletIdRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let referenceRule = StringRule(minLength: 6, maxLength: 18, pattern: nil)
    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** A random key provided by the client, per unique wallet transaction. Maximum of 128 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. If a request to execute a wallet transaction fails due to a network connection error, then after a minimum delay of one minute, you can retry the request with the same idempotency key to guarantee that only a single wallet transaction is created. If the request was successfully processed, it will prevent any transaction that uses the same idempotency key, and was received within 24 hours of the first request, from being processed. */
    public var idempotencyKey: String
    /** The ID of the e-wallet to debit from */
    public var walletId: String
    public var counterparty: WalletTransactionCounterparty
    public var amount: WalletTransactionAmount
    /** A reference for the transaction. This must be an alphanumeric string with 6 to 18 characters and must not contain any special characters or spaces. Ensure that the `reference` field is unique for each transaction. */
    public var reference: String

    public init(clientId: String? = nil, secret: String? = nil, idempotencyKey: String, walletId: String, counterparty: WalletTransactionCounterparty, amount: WalletTransactionAmount, reference: String) {
        self.clientId = clientId
        self.secret = secret
        self.idempotencyKey = idempotencyKey
        self.walletId = walletId
        self.counterparty = counterparty
        self.amount = amount
        self.reference = reference
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case idempotencyKey = "idempotency_key"
        case walletId = "wallet_id"
        case counterparty
        case amount
        case reference
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encode(idempotencyKey, forKey: .idempotencyKey)
        try container.encode(walletId, forKey: .walletId)
        try container.encode(counterparty, forKey: .counterparty)
        try container.encode(amount, forKey: .amount)
        try container.encode(reference, forKey: .reference)
    }
}

