//
// Activity.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Describes a consent activity. */
public struct Activity: Codable, JSONEncodable, Hashable {

    public var activity: ActivityType
    /** The date this activity was initiated [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC. */
    public var initiatedDate: Date
    /** A unique identifier for the activity */
    public var id: String
    /** Application ID of the client who initiated the activity. */
    public var initiator: String
    public var state: ActionState
    /** This field will map to the application ID that is returned from /item/application/list, or provided to the institution in an oauth redirect. */
    public var targetApplicationId: String?
    public var scopes: ScopesNullable?

    public init(activity: ActivityType, initiatedDate: Date, id: String, initiator: String, state: ActionState, targetApplicationId: String? = nil, scopes: ScopesNullable? = nil) {
        self.activity = activity
        self.initiatedDate = initiatedDate
        self.id = id
        self.initiator = initiator
        self.state = state
        self.targetApplicationId = targetApplicationId
        self.scopes = scopes
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case activity
        case initiatedDate = "initiated_date"
        case id
        case initiator
        case state
        case targetApplicationId = "target_application_id"
        case scopes
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(activity, forKey: .activity)
        try container.encode(initiatedDate, forKey: .initiatedDate)
        try container.encode(id, forKey: .id)
        try container.encode(initiator, forKey: .initiator)
        try container.encode(state, forKey: .state)
        try container.encodeIfPresent(targetApplicationId, forKey: .targetApplicationId)
        try container.encodeIfPresent(scopes, forKey: .scopes)
    }
}

