//
// MerchantInsights.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Insights into a userâ€™s top merchants. */
public struct MerchantInsights: Codable, JSONEncodable, Hashable {

    /** The counterparty name. */
    public var name: String
    /** A unique, stable, Plaid-generated id that maps to the merchant. */
    public var entityId: String?
    /** The website associated with the merchant. */
    public var website: String?
    /** The number of transactions associated with merchant of this type. */
    public var transactionCount: Int
    /** The primary personal finance category associated with this merchant. */
    public var personalFinanceCategoryPrimary: String?
    /** The detailed personal finance category associated with this merchant. */
    public var personalFinanceCategoryDetailed: String?
    /** Sum of outflow amounts. */
    public var totalOutflows: Double
    /** Sum of inflow amounts. */
    public var totalInflows: Double

    public init(name: String, entityId: String? = nil, website: String?, transactionCount: Int, personalFinanceCategoryPrimary: String?, personalFinanceCategoryDetailed: String?, totalOutflows: Double, totalInflows: Double) {
        self.name = name
        self.entityId = entityId
        self.website = website
        self.transactionCount = transactionCount
        self.personalFinanceCategoryPrimary = personalFinanceCategoryPrimary
        self.personalFinanceCategoryDetailed = personalFinanceCategoryDetailed
        self.totalOutflows = totalOutflows
        self.totalInflows = totalInflows
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case entityId = "entity_id"
        case website
        case transactionCount = "transaction_count"
        case personalFinanceCategoryPrimary = "personal_finance_category_primary"
        case personalFinanceCategoryDetailed = "personal_finance_category_detailed"
        case totalOutflows = "total_outflows"
        case totalInflows = "total_inflows"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(entityId, forKey: .entityId)
        try container.encode(website, forKey: .website)
        try container.encode(transactionCount, forKey: .transactionCount)
        try container.encode(personalFinanceCategoryPrimary, forKey: .personalFinanceCategoryPrimary)
        try container.encode(personalFinanceCategoryDetailed, forKey: .personalFinanceCategoryDetailed)
        try container.encode(totalOutflows, forKey: .totalOutflows)
        try container.encode(totalInflows, forKey: .totalInflows)
    }
}

