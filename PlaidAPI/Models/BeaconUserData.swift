//
// BeaconUserData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Beacon User&#39;s data and resulting analysis when checked against duplicate records and the Beacon Fraud Network. */
public struct BeaconUserData: Codable, JSONEncodable, Hashable {

    /** A date in the format YYYY-MM-DD (RFC 3339 Section 5.6). */
    public var dateOfBirth: Date
    public var name: BeaconUserName
    public var address: BeaconUserAddress
    /** A valid email address. */
    public var emailAddress: String?
    /** A phone number in E.164 format. */
    public var phoneNumber: String?
    public var idNumber: BeaconUserIDNumber?
    /** An IPv4 or IPV6 address. */
    public var ipAddress: String?

    public init(dateOfBirth: Date, name: BeaconUserName, address: BeaconUserAddress, emailAddress: String?, phoneNumber: String?, idNumber: BeaconUserIDNumber?, ipAddress: String?) {
        self.dateOfBirth = dateOfBirth
        self.name = name
        self.address = address
        self.emailAddress = emailAddress
        self.phoneNumber = phoneNumber
        self.idNumber = idNumber
        self.ipAddress = ipAddress
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case dateOfBirth = "date_of_birth"
        case name
        case address
        case emailAddress = "email_address"
        case phoneNumber = "phone_number"
        case idNumber = "id_number"
        case ipAddress = "ip_address"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(dateOfBirth, forKey: .dateOfBirth)
        try container.encode(name, forKey: .name)
        try container.encode(address, forKey: .address)
        try container.encode(emailAddress, forKey: .emailAddress)
        try container.encode(phoneNumber, forKey: .phoneNumber)
        try container.encode(idNumber, forKey: .idNumber)
        try container.encode(ipAddress, forKey: .ipAddress)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        dateOfBirth = try container.decode(Date.self, forKey: .dateOfBirth)
        name = try container.decode(BeaconUserName.self, forKey: .name)
        address = try container.decode(BeaconUserAddress.self, forKey: .address)
        emailAddress = try container.decodeIfPresent(String.self, forKey: .emailAddress)
        phoneNumber = try container.decodeIfPresent(String.self, forKey: .phoneNumber)
        idNumber = try container.decodeIfPresent(BeaconUserIDNumber.self, forKey: .idNumber)
        ipAddress = try container.decodeIfPresent(String.self, forKey: .ipAddress)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("date_of_birth")
        nonAdditionalPropertyKeys.insert("name")
        nonAdditionalPropertyKeys.insert("address")
        nonAdditionalPropertyKeys.insert("email_address")
        nonAdditionalPropertyKeys.insert("phone_number")
        nonAdditionalPropertyKeys.insert("id_number")
        nonAdditionalPropertyKeys.insert("ip_address")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

