//
// InvestmentsTransactionsOverride.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Specify the list of investments transactions on the account. */
public struct InvestmentsTransactionsOverride: Codable, JSONEncodable, Hashable {

    /** Posting date for the transaction. Must be formatted as an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date. */
    public var date: Date
    /** The institution's description of the transaction. */
    public var name: String
    /** The number of units of the security involved in this transaction. Must be positive if the type is a buy and negative if the type is a sell. */
    public var quantity: Double
    /** The price of the security at which this transaction occurred. */
    public var price: Double
    /** The combined value of all fees applied to this transaction. */
    public var fees: Double?
    /** The type of the investment transaction. Possible values are: `buy`: Buying an investment `sell`: Selling an investment `cash`: Activity that modifies a cash position `fee`: A fee on the account `transfer`: Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer */
    public var type: String
    /** Either a valid `iso_currency_code` or `unofficial_currency_code` */
    public var currency: String
    public var security: SecurityOverride?

    public init(date: Date, name: String, quantity: Double, price: Double, fees: Double? = nil, type: String, currency: String, security: SecurityOverride? = nil) {
        self.date = date
        self.name = name
        self.quantity = quantity
        self.price = price
        self.fees = fees
        self.type = type
        self.currency = currency
        self.security = security
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case date
        case name
        case quantity
        case price
        case fees
        case type
        case currency
        case security
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(date, forKey: .date)
        try container.encode(name, forKey: .name)
        try container.encode(quantity, forKey: .quantity)
        try container.encode(price, forKey: .price)
        try container.encodeIfPresent(fees, forKey: .fees)
        try container.encode(type, forKey: .type)
        try container.encode(currency, forKey: .currency)
        try container.encodeIfPresent(security, forKey: .security)
    }
}

