//
// TransferCreateRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Defines the request schema for &#x60;/transfer/create&#x60; */
public struct TransferCreateRequest: Codable, JSONEncodable, Hashable {

    static let idempotencyKeyRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    static let descriptionRule = StringRule(minLength: nil, maxLength: 15, pattern: nil)
    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** Deprecated. `authorization_id` is now used as idempotency instead.  A random key provided by the client, per unique transfer. Maximum of 50 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a transfer fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single transfer is created. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var idempotencyKey: String?
    /** The Plaid `access_token` for the account that will be debited or credited. */
    public var accessToken: String
    /** The Plaid `account_id` corresponding to the end-user account that will be debited or credited. */
    public var accountId: String
    /** Plaid’s unique identifier for a transfer authorization. This parameter also serves the purpose of acting as an idempotency identifier. */
    public var authorizationId: String
    @available(*, deprecated, message: "This property is deprecated.")
    public var type: TransferType?
    @available(*, deprecated, message: "This property is deprecated.")
    public var network: TransferNetwork?
    /** The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\"). When calling `/transfer/authorization/create`, specify the maximum amount to authorize. When calling `/transfer/create`, specify the exact amount of the transfer, up to a maximum of the amount authorized. If this field is left blank when calling `/transfer/create`, the maximum amount authorized in the `authorization_id` will be sent. */
    public var amount: String?
    /** The transfer description. Maximum of 15 characters. If reprocessing a returned transfer, please note that the `description` field must be `\"Retry 1\"` or `\"Retry 2\"` to indicate that it's a retry of a previously returned transfer. You may retry a transfer up to 2 times, within 180 days of creating the original transfer. Only transfers that were returned with code `R01` or `R09` may be retried. For a full listing of ACH return codes, see [Transfer errors](https://plaid.com/docs/errors/transfer/#ach-return-codes). */
    public var description: String
    @available(*, deprecated, message: "This property is deprecated.")
    public var achClass: ACHClass?
    @available(*, deprecated, message: "This property is deprecated.")
    public var user: TransferUserInRequestDeprecated?
    /** The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: The JSON values must be Strings (no nested JSON objects allowed) Only ASCII characters may be used Maximum of 50 key/value pairs Maximum key length of 40 characters Maximum value length of 500 characters  */
    public var metadata: [String: String]?
    /** Plaid’s unique identifier for the origination account for this transfer. If you have more than one origination account, this value must be specified. Otherwise, this field should be left blank. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var originationAccountId: String?
    /** The currency of the transfer amount. The default value is \"USD\". */
    @available(*, deprecated, message: "This property is deprecated.")
    public var isoCurrencyCode: String?
    /** Plaid’s unique identifier for a test clock. This field may only be used when using `sandbox` environment. If provided, the `transfer` is created at the `virtual_time` on the provided `test_clock`. */
    public var testClockId: String?
    /** The amount to deduct from `transfer.amount` and distribute to the platform’s Ledger balance as a facilitator fee (decimal string with two digits of precision e.g. \"10.00\"). The remainder will go to the end-customer’s Ledger balance. This must be less than or equal to the `transfer.amount`. */
    public var facilitatorFee: String?

    public init(clientId: String? = nil, secret: String? = nil, idempotencyKey: String? = nil, accessToken: String, accountId: String, authorizationId: String, type: TransferType? = nil, network: TransferNetwork? = nil, amount: String? = nil, description: String, achClass: ACHClass? = nil, user: TransferUserInRequestDeprecated? = nil, metadata: [String: String]? = nil, originationAccountId: String? = nil, isoCurrencyCode: String? = nil, testClockId: String? = nil, facilitatorFee: String? = nil) {
        self.clientId = clientId
        self.secret = secret
        self.idempotencyKey = idempotencyKey
        self.accessToken = accessToken
        self.accountId = accountId
        self.authorizationId = authorizationId
        self.type = type
        self.network = network
        self.amount = amount
        self.description = description
        self.achClass = achClass
        self.user = user
        self.metadata = metadata
        self.originationAccountId = originationAccountId
        self.isoCurrencyCode = isoCurrencyCode
        self.testClockId = testClockId
        self.facilitatorFee = facilitatorFee
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case idempotencyKey = "idempotency_key"
        case accessToken = "access_token"
        case accountId = "account_id"
        case authorizationId = "authorization_id"
        case type
        case network
        case amount
        case description
        case achClass = "ach_class"
        case user
        case metadata
        case originationAccountId = "origination_account_id"
        case isoCurrencyCode = "iso_currency_code"
        case testClockId = "test_clock_id"
        case facilitatorFee = "facilitator_fee"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encodeIfPresent(idempotencyKey, forKey: .idempotencyKey)
        try container.encode(accessToken, forKey: .accessToken)
        try container.encode(accountId, forKey: .accountId)
        try container.encode(authorizationId, forKey: .authorizationId)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(network, forKey: .network)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encode(description, forKey: .description)
        try container.encodeIfPresent(achClass, forKey: .achClass)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encodeIfPresent(metadata, forKey: .metadata)
        try container.encodeIfPresent(originationAccountId, forKey: .originationAccountId)
        try container.encodeIfPresent(isoCurrencyCode, forKey: .isoCurrencyCode)
        try container.encodeIfPresent(testClockId, forKey: .testClockId)
        try container.encodeIfPresent(facilitatorFee, forKey: .facilitatorFee)
    }
}

