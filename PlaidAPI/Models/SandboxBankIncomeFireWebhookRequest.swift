//
// SandboxBankIncomeFireWebhookRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** SandboxBankIncomeFireWebhookRequest defines the request schema for &#x60;/sandbox/bank_income/fire_webhook&#x60; */
public struct SandboxBankIncomeFireWebhookRequest: Codable, JSONEncodable, Hashable {

    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** The URL to which the webhook should be sent. If provided, this will override the URL set in the dashboard. */
    public var webhookOverride: String?
    public var webhookCode: SandboxBankIncomeWebhookFireRequestWebhookCode
    public var webhookFields: SandboxBankIncomeWebhookFireRequestWebhookFields

    public init(clientId: String? = nil, secret: String? = nil, webhookOverride: String? = nil, webhookCode: SandboxBankIncomeWebhookFireRequestWebhookCode, webhookFields: SandboxBankIncomeWebhookFireRequestWebhookFields) {
        self.clientId = clientId
        self.secret = secret
        self.webhookOverride = webhookOverride
        self.webhookCode = webhookCode
        self.webhookFields = webhookFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case webhookOverride = "webhook_override"
        case webhookCode = "webhook_code"
        case webhookFields = "webhook_fields"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encodeIfPresent(webhookOverride, forKey: .webhookOverride)
        try container.encode(webhookCode, forKey: .webhookCode)
        try container.encode(webhookFields, forKey: .webhookFields)
    }
}

