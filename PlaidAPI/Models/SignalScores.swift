//
// SignalScores.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Risk scoring details broken down by risk category. */
public struct SignalScores: Codable, JSONEncodable, Hashable {

    public var customerInitiatedReturnRisk: CustomerInitiatedReturnRisk?
    public var bankInitiatedReturnRisk: BankInitiatedReturnRisk?

    public init(customerInitiatedReturnRisk: CustomerInitiatedReturnRisk? = nil, bankInitiatedReturnRisk: BankInitiatedReturnRisk? = nil) {
        self.customerInitiatedReturnRisk = customerInitiatedReturnRisk
        self.bankInitiatedReturnRisk = bankInitiatedReturnRisk
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case customerInitiatedReturnRisk = "customer_initiated_return_risk"
        case bankInitiatedReturnRisk = "bank_initiated_return_risk"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(customerInitiatedReturnRisk, forKey: .customerInitiatedReturnRisk)
        try container.encodeIfPresent(bankInitiatedReturnRisk, forKey: .bankInitiatedReturnRisk)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        customerInitiatedReturnRisk = try container.decodeIfPresent(CustomerInitiatedReturnRisk.self, forKey: .customerInitiatedReturnRisk)
        bankInitiatedReturnRisk = try container.decodeIfPresent(BankInitiatedReturnRisk.self, forKey: .bankInitiatedReturnRisk)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("customer_initiated_return_risk")
        nonAdditionalPropertyKeys.insert("bank_initiated_return_risk")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

