//
// AssetReportInvestmentSecurity.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Investment security associated with the account. */
public struct AssetReportInvestmentSecurity: Codable, JSONEncodable, Hashable {

    /** A unique, Plaid-specific identifier for the security, used to associate securities with holdings. Like all Plaid identifiers, the `security_id` is case sensitive. The `security_id` may change if inherent details of the security change due to a corporate action, for example, in the event of a ticker symbol change or CUSIP change. */
    public var securityId: String
    /** A descriptive name for the security, suitable for display. */
    public var name: String?
    /** The securityâ€™s trading symbol for publicly traded securities, and otherwise a short identifier if available. */
    public var tickerSymbol: String?
    /** The security type of the holding. Valid security types are:  `cash`: Cash, currency, and money market funds  `cryptocurrency`: Digital or virtual currencies  `derivative`: Options, warrants, and other derivative instruments  `equity`: Domestic and foreign equities  `etf`: Multi-asset exchange-traded investment funds  `fixed income`: Bonds and certificates of deposit (CDs)  `loan`: Loans and loan receivables  `mutual fund`: Open- and closed-end vehicles pooling funds of multiple investors  `other`: Unknown or other investment types */
    public var type: String?

    public init(securityId: String, name: String?, tickerSymbol: String?, type: String?) {
        self.securityId = securityId
        self.name = name
        self.tickerSymbol = tickerSymbol
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case securityId = "security_id"
        case name
        case tickerSymbol = "ticker_symbol"
        case type
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(securityId, forKey: .securityId)
        try container.encode(name, forKey: .name)
        try container.encode(tickerSymbol, forKey: .tickerSymbol)
        try container.encode(type, forKey: .type)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        securityId = try container.decode(String.self, forKey: .securityId)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        tickerSymbol = try container.decodeIfPresent(String.self, forKey: .tickerSymbol)
        type = try container.decodeIfPresent(String.self, forKey: .type)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("security_id")
        nonAdditionalPropertyKeys.insert("name")
        nonAdditionalPropertyKeys.insert("ticker_symbol")
        nonAdditionalPropertyKeys.insert("type")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

