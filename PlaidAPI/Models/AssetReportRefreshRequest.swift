//
// AssetReportRefreshRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** AssetReportRefreshRequest defines the request schema for &#x60;/asset_report/refresh&#x60; */
public struct AssetReportRefreshRequest: Codable, JSONEncodable, Hashable {

    static let daysRequestedRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 731, exclusiveMaximum: false, multipleOf: nil)
    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** The `asset_report_token` returned by the original call to `/asset_report/create` */
    public var assetReportToken: String
    /** The maximum number of days of history to include in the Asset Report. Must be an integer. If not specified, the value from the original call to `/asset_report/create` will be used. */
    public var daysRequested: Int?
    public var options: AssetReportRefreshRequestOptions?

    public init(clientId: String? = nil, secret: String? = nil, assetReportToken: String, daysRequested: Int? = nil, options: AssetReportRefreshRequestOptions? = nil) {
        self.clientId = clientId
        self.secret = secret
        self.assetReportToken = assetReportToken
        self.daysRequested = daysRequested
        self.options = options
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case assetReportToken = "asset_report_token"
        case daysRequested = "days_requested"
        case options
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encode(assetReportToken, forKey: .assetReportToken)
        try container.encodeIfPresent(daysRequested, forKey: .daysRequested)
        try container.encodeIfPresent(options, forKey: .options)
    }
}

