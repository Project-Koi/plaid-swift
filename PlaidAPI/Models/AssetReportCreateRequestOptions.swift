//
// AssetReportCreateRequestOptions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An optional object to filter &#x60;/asset_report/create&#x60; results. If provided, must be non-&#x60;null&#x60;. The optional &#x60;user&#x60; object is required for the report to be eligible for Fannie Mae&#39;s Day 1 Certainty program. */
public struct AssetReportCreateRequestOptions: Codable, JSONEncodable, Hashable {

    /** Client-generated identifier, which can be used by lenders to track loan applications. */
    public var clientReportId: String?
    /** URL to which Plaid will send Assets webhooks, for example when the requested Asset Report is ready. */
    public var webhook: String?
    /** true to return balance and identity earlier as a fast report. Defaults to false if omitted. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var includeFastReport: Bool?
    /** Additional information that can be included in the asset report. Possible values: `\"investments\"` */
    @available(*, deprecated, message: "This property is deprecated.")
    public var products: [String]?
    /** Use this field to request a `fast_asset` report. When Fast Assets is requested, Plaid will create two versions of the Asset Report: first, the Fast Asset Report, which will contain only current identity and balance information, and later, the Full Asset Report, which will also contain historical balance information and transaction data. A `PRODUCT_READY` webhook will be fired for each Asset Report when it is ready, and the `report_type` field will indicate whether the webhook is firing for the `full` or `fast` Asset Report. To retrieve the Fast Asset Report, call `/asset_report/get` with `fast_report` set to `true`. There is no additional charge for using Fast Assets. */
    public var addOns: [AssetReportAddOns]?
    public var user: AssetReportUser?

    public init(clientReportId: String? = nil, webhook: String? = nil, includeFastReport: Bool? = nil, products: [String]? = nil, addOns: [AssetReportAddOns]? = nil, user: AssetReportUser? = nil) {
        self.clientReportId = clientReportId
        self.webhook = webhook
        self.includeFastReport = includeFastReport
        self.products = products
        self.addOns = addOns
        self.user = user
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientReportId = "client_report_id"
        case webhook
        case includeFastReport = "include_fast_report"
        case products
        case addOns = "add_ons"
        case user
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientReportId, forKey: .clientReportId)
        try container.encodeIfPresent(webhook, forKey: .webhook)
        try container.encodeIfPresent(includeFastReport, forKey: .includeFastReport)
        try container.encodeIfPresent(products, forKey: .products)
        try container.encodeIfPresent(addOns, forKey: .addOns)
        try container.encodeIfPresent(user, forKey: .user)
    }
}

