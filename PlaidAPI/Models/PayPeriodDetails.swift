//
// PayPeriodDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Details about the pay period. */
public struct PayPeriodDetails: Codable, JSONEncodable, Hashable {

    /** The amount of the paycheck. */
    public var checkAmount: Double?
    public var distributionBreakdown: [DistributionBreakdown]?
    /** The pay period end date, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format: \"yyyy-mm-dd\". */
    public var endDate: Date?
    /** Total earnings before tax/deductions. */
    public var grossEarnings: Double?
    /** The date on which the paystub was issued, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (\"yyyy-mm-dd\"). */
    public var payDate: Date?
    public var payFrequency: PayPeriodDetailsPayFrequency?
    /** The date on which the paystub was issued, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (\"yyyy-mm-dd\"). */
    @available(*, deprecated, message: "This property is deprecated.")
    public var payDay: Date?
    /** The pay period start date, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format: \"yyyy-mm-dd\". */
    public var startDate: Date?

    public init(checkAmount: Double? = nil, distributionBreakdown: [DistributionBreakdown]? = nil, endDate: Date? = nil, grossEarnings: Double? = nil, payDate: Date? = nil, payFrequency: PayPeriodDetailsPayFrequency? = nil, payDay: Date? = nil, startDate: Date? = nil) {
        self.checkAmount = checkAmount
        self.distributionBreakdown = distributionBreakdown
        self.endDate = endDate
        self.grossEarnings = grossEarnings
        self.payDate = payDate
        self.payFrequency = payFrequency
        self.payDay = payDay
        self.startDate = startDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case checkAmount = "check_amount"
        case distributionBreakdown = "distribution_breakdown"
        case endDate = "end_date"
        case grossEarnings = "gross_earnings"
        case payDate = "pay_date"
        case payFrequency = "pay_frequency"
        case payDay = "pay_day"
        case startDate = "start_date"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(checkAmount, forKey: .checkAmount)
        try container.encodeIfPresent(distributionBreakdown, forKey: .distributionBreakdown)
        try container.encodeIfPresent(endDate, forKey: .endDate)
        try container.encodeIfPresent(grossEarnings, forKey: .grossEarnings)
        try container.encodeIfPresent(payDate, forKey: .payDate)
        try container.encodeIfPresent(payFrequency, forKey: .payFrequency)
        try container.encodeIfPresent(payDay, forKey: .payDay)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        checkAmount = try container.decodeIfPresent(Double.self, forKey: .checkAmount)
        distributionBreakdown = try container.decodeIfPresent([DistributionBreakdown].self, forKey: .distributionBreakdown)
        endDate = try container.decodeIfPresent(Date.self, forKey: .endDate)
        grossEarnings = try container.decodeIfPresent(Double.self, forKey: .grossEarnings)
        payDate = try container.decodeIfPresent(Date.self, forKey: .payDate)
        payFrequency = try container.decodeIfPresent(PayPeriodDetailsPayFrequency.self, forKey: .payFrequency)
        payDay = try container.decodeIfPresent(Date.self, forKey: .payDay)
        startDate = try container.decodeIfPresent(Date.self, forKey: .startDate)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("check_amount")
        nonAdditionalPropertyKeys.insert("distribution_breakdown")
        nonAdditionalPropertyKeys.insert("end_date")
        nonAdditionalPropertyKeys.insert("gross_earnings")
        nonAdditionalPropertyKeys.insert("pay_date")
        nonAdditionalPropertyKeys.insert("pay_frequency")
        nonAdditionalPropertyKeys.insert("pay_day")
        nonAdditionalPropertyKeys.insert("start_date")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

