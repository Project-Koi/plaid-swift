//
// RiskCheckBehavior.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Result summary object specifying values for &#x60;behavior&#x60; attributes of risk check, when available. */
public struct RiskCheckBehavior: Codable, JSONEncodable, Hashable {

    public var userInteractions: RiskCheckBehaviorUserInteractionsLabel
    public var fraudRingDetected: RiskCheckBehaviorFraudRingDetectedLabel
    public var botDetected: RiskCheckBehaviorBotDetectedLabel

    public init(userInteractions: RiskCheckBehaviorUserInteractionsLabel, fraudRingDetected: RiskCheckBehaviorFraudRingDetectedLabel, botDetected: RiskCheckBehaviorBotDetectedLabel) {
        self.userInteractions = userInteractions
        self.fraudRingDetected = fraudRingDetected
        self.botDetected = botDetected
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case userInteractions = "user_interactions"
        case fraudRingDetected = "fraud_ring_detected"
        case botDetected = "bot_detected"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(userInteractions, forKey: .userInteractions)
        try container.encode(fraudRingDetected, forKey: .fraudRingDetected)
        try container.encode(botDetected, forKey: .botDetected)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        userInteractions = try container.decode(RiskCheckBehaviorUserInteractionsLabel.self, forKey: .userInteractions)
        fraudRingDetected = try container.decode(RiskCheckBehaviorFraudRingDetectedLabel.self, forKey: .fraudRingDetected)
        botDetected = try container.decode(RiskCheckBehaviorBotDetectedLabel.self, forKey: .botDetected)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("user_interactions")
        nonAdditionalPropertyKeys.insert("fraud_ring_detected")
        nonAdditionalPropertyKeys.insert("bot_detected")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

