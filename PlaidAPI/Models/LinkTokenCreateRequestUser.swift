//
// LinkTokenCreateRequestUser.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An object specifying information about the end user who will be linking their account. */
public struct LinkTokenCreateRequestUser: Codable, JSONEncodable, Hashable {

    static let clientUserIdRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    /** A unique ID representing the end user. Typically this will be a user ID number from your application. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`. It is currently used as a means of searching logs for the given user in the Plaid Dashboard. */
    public var clientUserId: String
    /** The user's full legal name, used for [micro-deposit based verification flows](https://plaid.com/docs/auth/coverage/). For a small number of customers on legacy flows, providing this field is required to enable micro-deposit-based flows. For all other customers, this field is optional. Providing the user's name in this field when using micro-deposit-based verification will streamline the end user experience, as the user will not be prompted to enter their name during the Link flow; Plaid will use the provided legal name instead. */
    public var legalName: String?
    public var name: LinkTokenCreateRequestUserName?
    /** The user's phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. If supplied, will be used when applicable to prefill phone number fields in Link for the [returning user flow](https://www.plaid.com/docs/link/returning/user) and the [Identity Verification flow](https://www.plaid.com/docs/identity-verification). */
    public var phoneNumber: String?
    /** The date and time the phone number was verified in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDThh:mm:ssZ`). This was previously an optional field used in the [returning user experience](https://plaid.com/docs/link/returning-user). This field is no longer required to enable the returning user experience.   Only pass a verification time for a phone number that you have verified. If you have performed verification but don’t have the time, you may supply a signal value of the start of the UNIX epoch.   Example: `2020-01-01T00:00:00Z`  */
    @available(*, deprecated, message: "This property is deprecated.")
    public var phoneNumberVerifiedTime: Date?
    /** The user's email address. Can be used to prefill Link fields when used with [Identity Verification](https://www.plaid.com/docs/identity-verification). */
    public var emailAddress: String?
    /** The date and time the email address was verified in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDThh:mm:ssZ`). This was previously an optional field used in the [returning user experience](https://plaid.com/docs/link/returning-user). This field is no longer required to enable the returning user experience.   Only pass a verification time for an email address that you have verified. If you have performed verification but don’t have the time, you may supply a signal value of the start of the UNIX epoch.   Example: `2020-01-01T00:00:00Z` */
    @available(*, deprecated, message: "This property is deprecated.")
    public var emailAddressVerifiedTime: Date?
    /** Deprecated and not currently used, use the `id_number` field instead. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var ssn: String?
    /** To be provided in the format \"yyyy-mm-dd\". Can be used to prefill Link fields when used with Identity Verification. */
    public var dateOfBirth: Date?
    public var address: LinkTokenCreateRequestUserAddress?
    public var idNumber: LinkTokenCreateRequestUserIdNumber?

    public init(clientUserId: String, legalName: String? = nil, name: LinkTokenCreateRequestUserName? = nil, phoneNumber: String? = nil, phoneNumberVerifiedTime: Date? = nil, emailAddress: String? = nil, emailAddressVerifiedTime: Date? = nil, ssn: String? = nil, dateOfBirth: Date? = nil, address: LinkTokenCreateRequestUserAddress? = nil, idNumber: LinkTokenCreateRequestUserIdNumber? = nil) {
        self.clientUserId = clientUserId
        self.legalName = legalName
        self.name = name
        self.phoneNumber = phoneNumber
        self.phoneNumberVerifiedTime = phoneNumberVerifiedTime
        self.emailAddress = emailAddress
        self.emailAddressVerifiedTime = emailAddressVerifiedTime
        self.ssn = ssn
        self.dateOfBirth = dateOfBirth
        self.address = address
        self.idNumber = idNumber
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientUserId = "client_user_id"
        case legalName = "legal_name"
        case name
        case phoneNumber = "phone_number"
        case phoneNumberVerifiedTime = "phone_number_verified_time"
        case emailAddress = "email_address"
        case emailAddressVerifiedTime = "email_address_verified_time"
        case ssn
        case dateOfBirth = "date_of_birth"
        case address
        case idNumber = "id_number"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(clientUserId, forKey: .clientUserId)
        try container.encodeIfPresent(legalName, forKey: .legalName)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(phoneNumber, forKey: .phoneNumber)
        try container.encodeIfPresent(phoneNumberVerifiedTime, forKey: .phoneNumberVerifiedTime)
        try container.encodeIfPresent(emailAddress, forKey: .emailAddress)
        try container.encodeIfPresent(emailAddressVerifiedTime, forKey: .emailAddressVerifiedTime)
        try container.encodeIfPresent(ssn, forKey: .ssn)
        try container.encodeIfPresent(dateOfBirth, forKey: .dateOfBirth)
        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(idNumber, forKey: .idNumber)
    }
}

