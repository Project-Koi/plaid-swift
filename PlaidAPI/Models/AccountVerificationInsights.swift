//
// AccountVerificationInsights.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Insights from performing database verification for the account. */
public struct AccountVerificationInsights: Codable, JSONEncodable, Hashable {

    public var networkStatus: AccountVerificationInsightsNetworkStatus
    public var previousReturns: AccountVerificationInsightsPreviousReturns?
    public var accountNumberFormat: AccountVerificationInsightsAccountNumberFormat

    public init(networkStatus: AccountVerificationInsightsNetworkStatus, previousReturns: AccountVerificationInsightsPreviousReturns? = nil, accountNumberFormat: AccountVerificationInsightsAccountNumberFormat) {
        self.networkStatus = networkStatus
        self.previousReturns = previousReturns
        self.accountNumberFormat = accountNumberFormat
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case networkStatus = "network_status"
        case previousReturns = "previous_returns"
        case accountNumberFormat = "account_number_format"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(networkStatus, forKey: .networkStatus)
        try container.encodeIfPresent(previousReturns, forKey: .previousReturns)
        try container.encode(accountNumberFormat, forKey: .accountNumberFormat)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        networkStatus = try container.decode(AccountVerificationInsightsNetworkStatus.self, forKey: .networkStatus)
        previousReturns = try container.decodeIfPresent(AccountVerificationInsightsPreviousReturns.self, forKey: .previousReturns)
        accountNumberFormat = try container.decode(AccountVerificationInsightsAccountNumberFormat.self, forKey: .accountNumberFormat)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("network_status")
        nonAdditionalPropertyKeys.insert("previous_returns")
        nonAdditionalPropertyKeys.insert("account_number_format")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

