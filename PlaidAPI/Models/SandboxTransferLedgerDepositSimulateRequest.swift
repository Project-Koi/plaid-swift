//
// SandboxTransferLedgerDepositSimulateRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Defines the request schema for &#x60;/sandbox/transfer/ledger/deposit/simulate&#x60; */
public struct SandboxTransferLedgerDepositSimulateRequest: Codable, JSONEncodable, Hashable {

    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** Plaidâ€™s unique identifier for a sweep. */
    public var sweepId: String
    public var eventType: TransferLedgerSweepSimulateEventType
    public var failureReason: TransferFailure?

    public init(clientId: String? = nil, secret: String? = nil, sweepId: String, eventType: TransferLedgerSweepSimulateEventType, failureReason: TransferFailure? = nil) {
        self.clientId = clientId
        self.secret = secret
        self.sweepId = sweepId
        self.eventType = eventType
        self.failureReason = failureReason
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case sweepId = "sweep_id"
        case eventType = "event_type"
        case failureReason = "failure_reason"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encode(sweepId, forKey: .sweepId)
        try container.encode(eventType, forKey: .eventType)
        try container.encodeIfPresent(failureReason, forKey: .failureReason)
    }
}

