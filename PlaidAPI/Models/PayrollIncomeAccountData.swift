//
// PayrollIncomeAccountData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An object containing account level data. */
public struct PayrollIncomeAccountData: Codable, JSONEncodable, Hashable {

    /** ID of the payroll provider account. */
    public var accountId: String?
    public var rateOfPay: PayrollIncomeRateOfPay
    /** The frequency at which an individual is paid. */
    public var payFrequency: String?

    public init(accountId: String?, rateOfPay: PayrollIncomeRateOfPay, payFrequency: String?) {
        self.accountId = accountId
        self.rateOfPay = rateOfPay
        self.payFrequency = payFrequency
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountId = "account_id"
        case rateOfPay = "rate_of_pay"
        case payFrequency = "pay_frequency"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(accountId, forKey: .accountId)
        try container.encode(rateOfPay, forKey: .rateOfPay)
        try container.encode(payFrequency, forKey: .payFrequency)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        accountId = try container.decodeIfPresent(String.self, forKey: .accountId)
        rateOfPay = try container.decode(PayrollIncomeRateOfPay.self, forKey: .rateOfPay)
        payFrequency = try container.decodeIfPresent(String.self, forKey: .payFrequency)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("account_id")
        nonAdditionalPropertyKeys.insert("rate_of_pay")
        nonAdditionalPropertyKeys.insert("pay_frequency")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

