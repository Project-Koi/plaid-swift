//
// LinkSessionResults.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The set of results for a Link session. */
public struct LinkSessionResults: Codable, JSONEncodable, Hashable {

    /** The set of Item adds for the Link session. */
    public var itemAddResults: [LinkSessionItemAddResult]?
    /** The set of bank income verifications for the Link session. */
    public var bankIncomeResults: [LinkSessionBankIncomeResult]?
    /** The set of payroll income verifications for the Link session. */
    public var payrollIncomeResults: [LinkSessionPayrollIncomeResult]?
    public var documentIncomeResults: CreditSessionDocumentIncomeResult?

    public init(itemAddResults: [LinkSessionItemAddResult]? = nil, bankIncomeResults: [LinkSessionBankIncomeResult]? = nil, payrollIncomeResults: [LinkSessionPayrollIncomeResult]? = nil, documentIncomeResults: CreditSessionDocumentIncomeResult? = nil) {
        self.itemAddResults = itemAddResults
        self.bankIncomeResults = bankIncomeResults
        self.payrollIncomeResults = payrollIncomeResults
        self.documentIncomeResults = documentIncomeResults
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case itemAddResults = "item_add_results"
        case bankIncomeResults = "bank_income_results"
        case payrollIncomeResults = "payroll_income_results"
        case documentIncomeResults = "document_income_results"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(itemAddResults, forKey: .itemAddResults)
        try container.encodeIfPresent(bankIncomeResults, forKey: .bankIncomeResults)
        try container.encodeIfPresent(payrollIncomeResults, forKey: .payrollIncomeResults)
        try container.encodeIfPresent(documentIncomeResults, forKey: .documentIncomeResults)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        itemAddResults = try container.decodeIfPresent([LinkSessionItemAddResult].self, forKey: .itemAddResults)
        bankIncomeResults = try container.decodeIfPresent([LinkSessionBankIncomeResult].self, forKey: .bankIncomeResults)
        payrollIncomeResults = try container.decodeIfPresent([LinkSessionPayrollIncomeResult].self, forKey: .payrollIncomeResults)
        documentIncomeResults = try container.decodeIfPresent(CreditSessionDocumentIncomeResult.self, forKey: .documentIncomeResults)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("item_add_results")
        nonAdditionalPropertyKeys.insert("bank_income_results")
        nonAdditionalPropertyKeys.insert("payroll_income_results")
        nonAdditionalPropertyKeys.insert("document_income_results")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

