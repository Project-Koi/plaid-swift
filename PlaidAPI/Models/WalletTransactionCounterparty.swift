//
// WalletTransactionCounterparty.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An object representing the e-wallet transaction&#39;s counterparty */
public struct WalletTransactionCounterparty: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    /** The name of the counterparty */
    public var name: String
    public var numbers: WalletTransactionCounterpartyNumbers
    public var address: PaymentInitiationAddress?
    /** The counterparty's birthdate, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. */
    public var dateOfBirth: Date?

    public init(name: String, numbers: WalletTransactionCounterpartyNumbers, address: PaymentInitiationAddress? = nil, dateOfBirth: Date? = nil) {
        self.name = name
        self.numbers = numbers
        self.address = address
        self.dateOfBirth = dateOfBirth
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case numbers
        case address
        case dateOfBirth = "date_of_birth"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(numbers, forKey: .numbers)
        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(dateOfBirth, forKey: .dateOfBirth)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        name = try container.decode(String.self, forKey: .name)
        numbers = try container.decode(WalletTransactionCounterpartyNumbers.self, forKey: .numbers)
        address = try container.decodeIfPresent(PaymentInitiationAddress.self, forKey: .address)
        dateOfBirth = try container.decodeIfPresent(Date.self, forKey: .dateOfBirth)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("name")
        nonAdditionalPropertyKeys.insert("numbers")
        nonAdditionalPropertyKeys.insert("address")
        nonAdditionalPropertyKeys.insert("date_of_birth")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

