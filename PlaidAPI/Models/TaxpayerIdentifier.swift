//
// TaxpayerIdentifier.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Information about the Taxpayer identification values assigned to the individual or legal entity.Information about the Taxpayer identification values assigned to the individual or legal entity. */
public struct TaxpayerIdentifier: Codable, JSONEncodable, Hashable {

    public var taxpayerIdentifierType: TaxpayerIdentifierType?
    /** The value of the taxpayer identifier as assigned by the IRS to the individual or legal entity. */
    public var taxpayerIdentifierValue: String?

    public init(taxpayerIdentifierType: TaxpayerIdentifierType?, taxpayerIdentifierValue: String?) {
        self.taxpayerIdentifierType = taxpayerIdentifierType
        self.taxpayerIdentifierValue = taxpayerIdentifierValue
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case taxpayerIdentifierType = "TaxpayerIdentifierType"
        case taxpayerIdentifierValue = "TaxpayerIdentifierValue"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(taxpayerIdentifierType, forKey: .taxpayerIdentifierType)
        try container.encode(taxpayerIdentifierValue, forKey: .taxpayerIdentifierValue)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        taxpayerIdentifierType = try container.decodeIfPresent(TaxpayerIdentifierType.self, forKey: .taxpayerIdentifierType)
        taxpayerIdentifierValue = try container.decodeIfPresent(String.self, forKey: .taxpayerIdentifierValue)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("TaxpayerIdentifierType")
        nonAdditionalPropertyKeys.insert("TaxpayerIdentifierValue")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

