//
// CreditBankIncomeTransaction.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The transactions data for the end user&#39;s income source(s). */
public struct CreditBankIncomeTransaction: Codable, JSONEncodable, Hashable {

    /** The settled value of the transaction, denominated in the transactions's currency as stated in `iso_currency_code` or `unofficial_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, credit card purchases are positive; credit card payment, direct deposits, and refunds are negative. */
    public var amount: Double?
    /** For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an ISO 8601 format (YYYY-MM-DD). */
    public var date: Date?
    /** The merchant name or transaction description. */
    public var name: String?
    /** The string returned by the financial institution to describe the transaction. */
    public var originalDescription: String?
    /** When true, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled. */
    public var pending: Bool?
    /** The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive. */
    public var transactionId: String?
    /** The check number of the transaction. This field is only populated for check transactions. */
    public var checkNumber: String?
    /** The ISO 4217 currency code of the amount or balance. */
    public var isoCurrencyCode: String?
    /** The unofficial currency code associated with the amount or balance. Always `null` if `iso_currency_code` is non-null. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries. */
    public var unofficialCurrencyCode: String?

    public init(amount: Double? = nil, date: Date? = nil, name: String? = nil, originalDescription: String? = nil, pending: Bool? = nil, transactionId: String? = nil, checkNumber: String? = nil, isoCurrencyCode: String? = nil, unofficialCurrencyCode: String? = nil) {
        self.amount = amount
        self.date = date
        self.name = name
        self.originalDescription = originalDescription
        self.pending = pending
        self.transactionId = transactionId
        self.checkNumber = checkNumber
        self.isoCurrencyCode = isoCurrencyCode
        self.unofficialCurrencyCode = unofficialCurrencyCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case amount
        case date
        case name
        case originalDescription = "original_description"
        case pending
        case transactionId = "transaction_id"
        case checkNumber = "check_number"
        case isoCurrencyCode = "iso_currency_code"
        case unofficialCurrencyCode = "unofficial_currency_code"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(date, forKey: .date)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(originalDescription, forKey: .originalDescription)
        try container.encodeIfPresent(pending, forKey: .pending)
        try container.encodeIfPresent(transactionId, forKey: .transactionId)
        try container.encodeIfPresent(checkNumber, forKey: .checkNumber)
        try container.encodeIfPresent(isoCurrencyCode, forKey: .isoCurrencyCode)
        try container.encodeIfPresent(unofficialCurrencyCode, forKey: .unofficialCurrencyCode)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        amount = try container.decodeIfPresent(Double.self, forKey: .amount)
        date = try container.decodeIfPresent(Date.self, forKey: .date)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        originalDescription = try container.decodeIfPresent(String.self, forKey: .originalDescription)
        pending = try container.decodeIfPresent(Bool.self, forKey: .pending)
        transactionId = try container.decodeIfPresent(String.self, forKey: .transactionId)
        checkNumber = try container.decodeIfPresent(String.self, forKey: .checkNumber)
        isoCurrencyCode = try container.decodeIfPresent(String.self, forKey: .isoCurrencyCode)
        unofficialCurrencyCode = try container.decodeIfPresent(String.self, forKey: .unofficialCurrencyCode)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("amount")
        nonAdditionalPropertyKeys.insert("date")
        nonAdditionalPropertyKeys.insert("name")
        nonAdditionalPropertyKeys.insert("original_description")
        nonAdditionalPropertyKeys.insert("pending")
        nonAdditionalPropertyKeys.insert("transaction_id")
        nonAdditionalPropertyKeys.insert("check_number")
        nonAdditionalPropertyKeys.insert("iso_currency_code")
        nonAdditionalPropertyKeys.insert("unofficial_currency_code")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

