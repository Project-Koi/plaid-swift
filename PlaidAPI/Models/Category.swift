//
// Category.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Information describing a transaction category */
public struct Category: Codable, JSONEncodable, Hashable {

    /** An identifying number for the category. `category_id` is a Plaid-specific identifier and does not necessarily correspond to merchant category codes. */
    public var categoryId: String
    /** `place` for physical transactions or `special` for other transactions such as bank charges. */
    public var group: String
    /** A hierarchical array of the categories to which this `category_id` belongs. */
    public var hierarchy: [String]

    public init(categoryId: String, group: String, hierarchy: [String]) {
        self.categoryId = categoryId
        self.group = group
        self.hierarchy = hierarchy
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case categoryId = "category_id"
        case group
        case hierarchy
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(categoryId, forKey: .categoryId)
        try container.encode(group, forKey: .group)
        try container.encode(hierarchy, forKey: .hierarchy)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        categoryId = try container.decode(String.self, forKey: .categoryId)
        group = try container.decode(String.self, forKey: .group)
        hierarchy = try container.decode([String].self, forKey: .hierarchy)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("category_id")
        nonAdditionalPropertyKeys.insert("group")
        nonAdditionalPropertyKeys.insert("hierarchy")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

