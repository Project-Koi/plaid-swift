//
// PaymentInitiationRecipient.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** PaymentInitiationRecipient defines a payment initiation recipient */
public struct PaymentInitiationRecipient: Codable, JSONEncodable, Hashable {

    /** The ID of the recipient. */
    public var recipientId: String
    /** The name of the recipient. */
    public var name: String
    public var address: PaymentInitiationAddress?
    /** The International Bank Account Number (IBAN) for the recipient. */
    public var iban: String?
    public var bacs: RecipientBACSNullable?

    public init(recipientId: String, name: String, address: PaymentInitiationAddress? = nil, iban: String? = nil, bacs: RecipientBACSNullable? = nil) {
        self.recipientId = recipientId
        self.name = name
        self.address = address
        self.iban = iban
        self.bacs = bacs
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case recipientId = "recipient_id"
        case name
        case address
        case iban
        case bacs
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(recipientId, forKey: .recipientId)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(iban, forKey: .iban)
        try container.encodeIfPresent(bacs, forKey: .bacs)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        recipientId = try container.decode(String.self, forKey: .recipientId)
        name = try container.decode(String.self, forKey: .name)
        address = try container.decodeIfPresent(PaymentInitiationAddress.self, forKey: .address)
        iban = try container.decodeIfPresent(String.self, forKey: .iban)
        bacs = try container.decodeIfPresent(RecipientBACSNullable.self, forKey: .bacs)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("recipient_id")
        nonAdditionalPropertyKeys.insert("name")
        nonAdditionalPropertyKeys.insert("address")
        nonAdditionalPropertyKeys.insert("iban")
        nonAdditionalPropertyKeys.insert("bacs")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

