//
// AssetReportInvestmentHolding.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A securities holding at an institution. */
public struct AssetReportInvestmentHolding: Codable, JSONEncodable, Hashable {

    /** The Plaid `account_id` associated with the holding. */
    public var accountId: String
    /** The Plaid `security_id` associated with the holding. Security data is not specific to a user's account; any user who held the same security at the same financial institution at the same time would have identical security data. The `security_id` for the same security will typically be the same across different institutions, but this is not guaranteed. The `security_id` does not typically change, but may change if inherent details of the security change due to a corporate action, for example, in the event of a ticker symbol change or CUSIP change. */
    public var securityId: String
    /** The holding's trading symbol for publicly traded holdings, and otherwise a short identifier if available. */
    public var tickerSymbol: String?
    /** The last price given by the institution for this security. */
    public var institutionPrice: Double
    /** The date at which `institution_price` was current. */
    public var institutionPriceAsOf: Date?
    /** The value of the holding, as reported by the institution. */
    public var institutionValue: Double
    /** The original total value of the holding. This field is calculated by Plaid as the sum of the purchase price of all of the shares in the holding. */
    public var costBasis: Double?
    /** The total quantity of the asset held, as reported by the financial institution. If the security is an option, `quantity` will reflect the total number of options (typically the number of contracts multiplied by 100), not the number of contracts. */
    public var quantity: Double
    /** The ISO-4217 currency code of the holding. Always `null` if `unofficial_currency_code` is non-`null`. */
    public var isoCurrencyCode: String?
    /** The unofficial currency code associated with the holding. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.  */
    public var unofficialCurrencyCode: String?

    public init(accountId: String, securityId: String, tickerSymbol: String?, institutionPrice: Double, institutionPriceAsOf: Date? = nil, institutionValue: Double, costBasis: Double?, quantity: Double, isoCurrencyCode: String?, unofficialCurrencyCode: String?) {
        self.accountId = accountId
        self.securityId = securityId
        self.tickerSymbol = tickerSymbol
        self.institutionPrice = institutionPrice
        self.institutionPriceAsOf = institutionPriceAsOf
        self.institutionValue = institutionValue
        self.costBasis = costBasis
        self.quantity = quantity
        self.isoCurrencyCode = isoCurrencyCode
        self.unofficialCurrencyCode = unofficialCurrencyCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountId = "account_id"
        case securityId = "security_id"
        case tickerSymbol = "ticker_symbol"
        case institutionPrice = "institution_price"
        case institutionPriceAsOf = "institution_price_as_of"
        case institutionValue = "institution_value"
        case costBasis = "cost_basis"
        case quantity
        case isoCurrencyCode = "iso_currency_code"
        case unofficialCurrencyCode = "unofficial_currency_code"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(accountId, forKey: .accountId)
        try container.encode(securityId, forKey: .securityId)
        try container.encode(tickerSymbol, forKey: .tickerSymbol)
        try container.encode(institutionPrice, forKey: .institutionPrice)
        try container.encodeIfPresent(institutionPriceAsOf, forKey: .institutionPriceAsOf)
        try container.encode(institutionValue, forKey: .institutionValue)
        try container.encode(costBasis, forKey: .costBasis)
        try container.encode(quantity, forKey: .quantity)
        try container.encode(isoCurrencyCode, forKey: .isoCurrencyCode)
        try container.encode(unofficialCurrencyCode, forKey: .unofficialCurrencyCode)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        accountId = try container.decode(String.self, forKey: .accountId)
        securityId = try container.decode(String.self, forKey: .securityId)
        tickerSymbol = try container.decodeIfPresent(String.self, forKey: .tickerSymbol)
        institutionPrice = try container.decode(Double.self, forKey: .institutionPrice)
        institutionPriceAsOf = try container.decodeIfPresent(Date.self, forKey: .institutionPriceAsOf)
        institutionValue = try container.decode(Double.self, forKey: .institutionValue)
        costBasis = try container.decodeIfPresent(Double.self, forKey: .costBasis)
        quantity = try container.decode(Double.self, forKey: .quantity)
        isoCurrencyCode = try container.decodeIfPresent(String.self, forKey: .isoCurrencyCode)
        unofficialCurrencyCode = try container.decodeIfPresent(String.self, forKey: .unofficialCurrencyCode)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("account_id")
        nonAdditionalPropertyKeys.insert("security_id")
        nonAdditionalPropertyKeys.insert("ticker_symbol")
        nonAdditionalPropertyKeys.insert("institution_price")
        nonAdditionalPropertyKeys.insert("institution_price_as_of")
        nonAdditionalPropertyKeys.insert("institution_value")
        nonAdditionalPropertyKeys.insert("cost_basis")
        nonAdditionalPropertyKeys.insert("quantity")
        nonAdditionalPropertyKeys.insert("iso_currency_code")
        nonAdditionalPropertyKeys.insert("unofficial_currency_code")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

