//
// CreditEmploymentItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The object containing employment items. */
public struct CreditEmploymentItem: Codable, JSONEncodable, Hashable {

    /** The `item_id` of the Item associated with this webhook, warning, or error */
    public var itemId: String
    public var employments: [CreditEmploymentVerification]
    /** Token to represent the underlying Employment data */
    public var employmentReportToken: String?

    public init(itemId: String, employments: [CreditEmploymentVerification], employmentReportToken: String? = nil) {
        self.itemId = itemId
        self.employments = employments
        self.employmentReportToken = employmentReportToken
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case itemId = "item_id"
        case employments
        case employmentReportToken = "employment_report_token"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(itemId, forKey: .itemId)
        try container.encode(employments, forKey: .employments)
        try container.encodeIfPresent(employmentReportToken, forKey: .employmentReportToken)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        itemId = try container.decode(String.self, forKey: .itemId)
        employments = try container.decode([CreditEmploymentVerification].self, forKey: .employments)
        employmentReportToken = try container.decodeIfPresent(String.self, forKey: .employmentReportToken)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("item_id")
        nonAdditionalPropertyKeys.insert("employments")
        nonAdditionalPropertyKeys.insert("employment_report_token")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

