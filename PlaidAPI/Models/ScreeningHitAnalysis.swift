//
// ScreeningHitAnalysis.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Analysis information describing why a screening hit matched the provided user information */
public struct ScreeningHitAnalysis: Codable, JSONEncodable, Hashable {

    public var datesOfBirth: MatchSummaryCode?
    public var documents: MatchSummaryCode?
    public var locations: MatchSummaryCode?
    public var names: MatchSummaryCode?
    /** The version of the screening's `search_terms` that were compared when the screening hit was added. screening hits are immutable once they have been reviewed. If changes are detected due to updates to the screening's `search_terms`, the associated program, or the list's source data prior to review, the screening hit will be updated to reflect those changes. */
    public var searchTermsVersion: Int

    public init(datesOfBirth: MatchSummaryCode? = nil, documents: MatchSummaryCode? = nil, locations: MatchSummaryCode? = nil, names: MatchSummaryCode? = nil, searchTermsVersion: Int) {
        self.datesOfBirth = datesOfBirth
        self.documents = documents
        self.locations = locations
        self.names = names
        self.searchTermsVersion = searchTermsVersion
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case datesOfBirth = "dates_of_birth"
        case documents
        case locations
        case names
        case searchTermsVersion = "search_terms_version"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(datesOfBirth, forKey: .datesOfBirth)
        try container.encodeIfPresent(documents, forKey: .documents)
        try container.encodeIfPresent(locations, forKey: .locations)
        try container.encodeIfPresent(names, forKey: .names)
        try container.encode(searchTermsVersion, forKey: .searchTermsVersion)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        datesOfBirth = try container.decodeIfPresent(MatchSummaryCode.self, forKey: .datesOfBirth)
        documents = try container.decodeIfPresent(MatchSummaryCode.self, forKey: .documents)
        locations = try container.decodeIfPresent(MatchSummaryCode.self, forKey: .locations)
        names = try container.decodeIfPresent(MatchSummaryCode.self, forKey: .names)
        searchTermsVersion = try container.decode(Int.self, forKey: .searchTermsVersion)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("dates_of_birth")
        nonAdditionalPropertyKeys.insert("documents")
        nonAdditionalPropertyKeys.insert("locations")
        nonAdditionalPropertyKeys.insert("names")
        nonAdditionalPropertyKeys.insert("search_terms_version")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

