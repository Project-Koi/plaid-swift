//
// AccountVerificationInsightsNetworkStatus.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Status information about the account and routing number in the Plaid network. */
public struct AccountVerificationInsightsNetworkStatus: Codable, JSONEncodable, Hashable {

    /** Indicates whether we found at least one matching account for the ACH account and routing number. */
    public var hasNumbersMatch: Bool
    /** Indicates if at least one matching account for the ACH account and routing number is already verified. */
    public var isNumbersMatchVerified: Bool

    public init(hasNumbersMatch: Bool, isNumbersMatchVerified: Bool) {
        self.hasNumbersMatch = hasNumbersMatch
        self.isNumbersMatchVerified = isNumbersMatchVerified
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case hasNumbersMatch = "has_numbers_match"
        case isNumbersMatchVerified = "is_numbers_match_verified"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(hasNumbersMatch, forKey: .hasNumbersMatch)
        try container.encode(isNumbersMatchVerified, forKey: .isNumbersMatchVerified)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        hasNumbersMatch = try container.decode(Bool.self, forKey: .hasNumbersMatch)
        isNumbersMatchVerified = try container.decode(Bool.self, forKey: .isNumbersMatchVerified)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("has_numbers_match")
        nonAdditionalPropertyKeys.insert("is_numbers_match_verified")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

