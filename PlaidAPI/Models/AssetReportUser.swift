//
// AssetReportUser.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The user object allows you to provide additional information about the user to be appended to the Asset Report. All fields are optional. The &#x60;first_name&#x60;, &#x60;last_name&#x60;, and &#x60;ssn&#x60; fields are required if you would like the Report to be eligible for Fannie Mae’s Day 1 Certainty™ program. */
public struct AssetReportUser: Codable, JSONEncodable, Hashable {

    /** An identifier you determine and submit for the user. */
    public var clientUserId: String?
    /** The user's first name. Required for the Fannie Mae Day 1 Certainty™ program. */
    public var firstName: String?
    /** The user's middle name */
    public var middleName: String?
    /** The user's last name.  Required for the Fannie Mae Day 1 Certainty™ program. */
    public var lastName: String?
    /** The user's Social Security Number. Required for the Fannie Mae Day 1 Certainty™ program.  Format: \"ddd-dd-dddd\" */
    public var ssn: String?
    /** The user's phone number, in E.164 format: +{countrycode}{number}. For example: \"+14151234567\". Phone numbers provided in other formats will be parsed on a best-effort basis. */
    public var phoneNumber: String?
    /** The user's email address. */
    public var email: String?

    public init(clientUserId: String? = nil, firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, ssn: String? = nil, phoneNumber: String? = nil, email: String? = nil) {
        self.clientUserId = clientUserId
        self.firstName = firstName
        self.middleName = middleName
        self.lastName = lastName
        self.ssn = ssn
        self.phoneNumber = phoneNumber
        self.email = email
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientUserId = "client_user_id"
        case firstName = "first_name"
        case middleName = "middle_name"
        case lastName = "last_name"
        case ssn
        case phoneNumber = "phone_number"
        case email
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientUserId, forKey: .clientUserId)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(middleName, forKey: .middleName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(ssn, forKey: .ssn)
        try container.encodeIfPresent(phoneNumber, forKey: .phoneNumber)
        try container.encodeIfPresent(email, forKey: .email)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        clientUserId = try container.decodeIfPresent(String.self, forKey: .clientUserId)
        firstName = try container.decodeIfPresent(String.self, forKey: .firstName)
        middleName = try container.decodeIfPresent(String.self, forKey: .middleName)
        lastName = try container.decodeIfPresent(String.self, forKey: .lastName)
        ssn = try container.decodeIfPresent(String.self, forKey: .ssn)
        phoneNumber = try container.decodeIfPresent(String.self, forKey: .phoneNumber)
        email = try container.decodeIfPresent(String.self, forKey: .email)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("client_user_id")
        nonAdditionalPropertyKeys.insert("first_name")
        nonAdditionalPropertyKeys.insert("middle_name")
        nonAdditionalPropertyKeys.insert("last_name")
        nonAdditionalPropertyKeys.insert("ssn")
        nonAdditionalPropertyKeys.insert("phone_number")
        nonAdditionalPropertyKeys.insert("email")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

