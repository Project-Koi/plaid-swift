//
// BaseReportAverageMonthlyBalances.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Average balance in dollar amount per month */
public struct BaseReportAverageMonthlyBalances: Codable, JSONEncodable, Hashable {

    /** The start date of this time period. The date will be returned in an ISO 8601 format (YYYY-MM-DD). */
    public var startDate: String?
    /** The end date of this time period. The date will be returned in an ISO 8601 format (YYYY-MM-DD). */
    public var endDate: String?
    public var averageBalance: CreditAmountWithCurrency?

    public init(startDate: String? = nil, endDate: String? = nil, averageBalance: CreditAmountWithCurrency? = nil) {
        self.startDate = startDate
        self.endDate = endDate
        self.averageBalance = averageBalance
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case startDate = "start_date"
        case endDate = "end_date"
        case averageBalance = "average_balance"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encodeIfPresent(endDate, forKey: .endDate)
        try container.encodeIfPresent(averageBalance, forKey: .averageBalance)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        startDate = try container.decodeIfPresent(String.self, forKey: .startDate)
        endDate = try container.decodeIfPresent(String.self, forKey: .endDate)
        averageBalance = try container.decodeIfPresent(CreditAmountWithCurrency.self, forKey: .averageBalance)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("start_date")
        nonAdditionalPropertyKeys.insert("end_date")
        nonAdditionalPropertyKeys.insert("average_balance")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

