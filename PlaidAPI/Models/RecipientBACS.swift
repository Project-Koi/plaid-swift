//
// RecipientBACS.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An object containing a BACS account number and sort code. If an IBAN is not provided or if you need to accept domestic GBP-denominated payments, BACS data is required. */
public struct RecipientBACS: Codable, JSONEncodable, Hashable {

    static let accountRule = StringRule(minLength: 1, maxLength: 10, pattern: nil)
    static let sortCodeRule = StringRule(minLength: 6, maxLength: 6, pattern: nil)
    /** The account number of the account. Maximum of 10 characters. */
    public var account: String?
    /** The 6-character sort code of the account. */
    public var sortCode: String?

    public init(account: String? = nil, sortCode: String? = nil) {
        self.account = account
        self.sortCode = sortCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case account
        case sortCode = "sort_code"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(account, forKey: .account)
        try container.encodeIfPresent(sortCode, forKey: .sortCode)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        account = try container.decodeIfPresent(String.self, forKey: .account)
        sortCode = try container.decodeIfPresent(String.self, forKey: .sortCode)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("account")
        nonAdditionalPropertyKeys.insert("sort_code")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

