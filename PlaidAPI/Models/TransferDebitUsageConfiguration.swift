//
// TransferDebitUsageConfiguration.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Specifies the originator&#39;s expected usage of debits. For all dollar amounts, use a decimal string with two digits of precision e.g. \&quot;10.00\&quot;. This field is required if the originator is expected to process debit transfers. */
public struct TransferDebitUsageConfiguration: Codable, JSONEncodable, Hashable {

    public var expectedFrequency: OriginatorExpectedTransferFrequency
    /** The originator’s expected highest amount for a single debit transfer. */
    public var expectedHighestAmount: String
    /** The originator’s expected average amount per debit. */
    public var expectedAverageAmount: String
    /** The originator’s monthly expected ACH debit processing amount for the next 6-12 months. */
    public var expectedMonthlyAmount: String
    /** Specifies the expected use cases for the originator’s debit transfers. This should be a list that contains one or more of the following codes:  `\"ccd\"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts  `\"ppd\"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment  `\"tel\"` - Telephone-Initiated Entry  `\"web\"` - Internet-Initiated Entry - debits from a consumer’s account where their authorization is obtained over the Internet */
    public var secCodes: [ACHClass]

    public init(expectedFrequency: OriginatorExpectedTransferFrequency, expectedHighestAmount: String, expectedAverageAmount: String, expectedMonthlyAmount: String, secCodes: [ACHClass]) {
        self.expectedFrequency = expectedFrequency
        self.expectedHighestAmount = expectedHighestAmount
        self.expectedAverageAmount = expectedAverageAmount
        self.expectedMonthlyAmount = expectedMonthlyAmount
        self.secCodes = secCodes
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case expectedFrequency = "expected_frequency"
        case expectedHighestAmount = "expected_highest_amount"
        case expectedAverageAmount = "expected_average_amount"
        case expectedMonthlyAmount = "expected_monthly_amount"
        case secCodes = "sec_codes"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(expectedFrequency, forKey: .expectedFrequency)
        try container.encode(expectedHighestAmount, forKey: .expectedHighestAmount)
        try container.encode(expectedAverageAmount, forKey: .expectedAverageAmount)
        try container.encode(expectedMonthlyAmount, forKey: .expectedMonthlyAmount)
        try container.encode(secCodes, forKey: .secCodes)
    }
}

