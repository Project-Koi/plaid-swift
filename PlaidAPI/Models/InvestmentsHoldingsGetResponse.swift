//
// InvestmentsHoldingsGetResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** InvestmentsHoldingsGetResponse defines the response schema for &#x60;/investments/holdings/get&#x60; */
public struct InvestmentsHoldingsGetResponse: Codable, JSONEncodable, Hashable {

    /** The accounts associated with the Item */
    public var accounts: [AccountBase]
    /** The holdings belonging to investment accounts associated with the Item. Details of the securities in the holdings are provided in the `securities` field.  */
    public var holdings: [Holding]
    /** Objects describing the securities held in the accounts associated with the Item.  */
    public var securities: [Security]
    public var item: Item
    /** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
    public var requestId: String
    /** When true, this field indicates that the Item's portfolio was manually created with the Investments Fallback flow. */
    public var isInvestmentsFallbackItem: Bool?

    public init(accounts: [AccountBase], holdings: [Holding], securities: [Security], item: Item, requestId: String, isInvestmentsFallbackItem: Bool? = nil) {
        self.accounts = accounts
        self.holdings = holdings
        self.securities = securities
        self.item = item
        self.requestId = requestId
        self.isInvestmentsFallbackItem = isInvestmentsFallbackItem
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accounts
        case holdings
        case securities
        case item
        case requestId = "request_id"
        case isInvestmentsFallbackItem = "is_investments_fallback_item"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(accounts, forKey: .accounts)
        try container.encode(holdings, forKey: .holdings)
        try container.encode(securities, forKey: .securities)
        try container.encode(item, forKey: .item)
        try container.encode(requestId, forKey: .requestId)
        try container.encodeIfPresent(isInvestmentsFallbackItem, forKey: .isInvestmentsFallbackItem)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        accounts = try container.decode([AccountBase].self, forKey: .accounts)
        holdings = try container.decode([Holding].self, forKey: .holdings)
        securities = try container.decode([Security].self, forKey: .securities)
        item = try container.decode(Item.self, forKey: .item)
        requestId = try container.decode(String.self, forKey: .requestId)
        isInvestmentsFallbackItem = try container.decodeIfPresent(Bool.self, forKey: .isInvestmentsFallbackItem)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("accounts")
        nonAdditionalPropertyKeys.insert("holdings")
        nonAdditionalPropertyKeys.insert("securities")
        nonAdditionalPropertyKeys.insert("item")
        nonAdditionalPropertyKeys.insert("request_id")
        nonAdditionalPropertyKeys.insert("is_investments_fallback_item")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

