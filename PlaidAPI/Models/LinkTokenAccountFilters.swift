//
// LinkTokenAccountFilters.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** By default, Link will provide limited account filtering: it will only display Institutions that are compatible with all products supplied in the &#x60;products&#x60; parameter of &#x60;/link/token/create&#x60;, and, if &#x60;auth&#x60; is specified in the &#x60;products&#x60; array, will also filter out accounts other than &#x60;checking&#x60; and &#x60;savings&#x60; accounts on the Account Select pane. You can further limit the accounts shown in Link by using &#x60;account_filters&#x60; to specify the account subtypes to be shown in Link. Only the specified subtypes will be shown. This filtering applies to both the Account Select view (if enabled) and the Institution Select view. Institutions that do not support the selected subtypes will be omitted from Link. To indicate that all subtypes should be shown, use the value &#x60;\&quot;all\&quot;&#x60;. If the &#x60;account_filters&#x60; filter is used, any account type for which a filter is not specified will be entirely omitted from Link. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).  The filter may or may not impact the list of accounts shown by the institution in the OAuth account selection flow, depending on the specific institution. If the user selects excluded account subtypes in the OAuth flow, these accounts will not be added to the Item. If the user selects only excluded account subtypes, the link attempt will fail and the user will be prompted to try again.  */
public struct LinkTokenAccountFilters: Codable, JSONEncodable, Hashable {

    public var depository: DepositoryFilter?
    public var credit: CreditFilter?
    public var loan: LoanFilter?
    public var investment: InvestmentFilter?
    public var other: OtherFilter?

    public init(depository: DepositoryFilter? = nil, credit: CreditFilter? = nil, loan: LoanFilter? = nil, investment: InvestmentFilter? = nil, other: OtherFilter? = nil) {
        self.depository = depository
        self.credit = credit
        self.loan = loan
        self.investment = investment
        self.other = other
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case depository
        case credit
        case loan
        case investment
        case other
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(depository, forKey: .depository)
        try container.encodeIfPresent(credit, forKey: .credit)
        try container.encodeIfPresent(loan, forKey: .loan)
        try container.encodeIfPresent(investment, forKey: .investment)
        try container.encodeIfPresent(other, forKey: .other)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        depository = try container.decodeIfPresent(DepositoryFilter.self, forKey: .depository)
        credit = try container.decodeIfPresent(CreditFilter.self, forKey: .credit)
        loan = try container.decodeIfPresent(LoanFilter.self, forKey: .loan)
        investment = try container.decodeIfPresent(InvestmentFilter.self, forKey: .investment)
        other = try container.decodeIfPresent(OtherFilter.self, forKey: .other)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("depository")
        nonAdditionalPropertyKeys.insert("credit")
        nonAdditionalPropertyKeys.insert("loan")
        nonAdditionalPropertyKeys.insert("investment")
        nonAdditionalPropertyKeys.insert("other")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

