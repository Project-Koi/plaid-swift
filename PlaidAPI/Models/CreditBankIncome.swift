//
// CreditBankIncome.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The report of the Bank Income data for an end user. */
public struct CreditBankIncome: Codable, JSONEncodable, Hashable {

    /** The unique identifier associated with the Bank Income Report. */
    public var bankIncomeId: String?
    /** The time when the Bank Income Report was generated. */
    public var generatedTime: Date?
    /** The number of days requested by the customer for the Bank Income Report. */
    public var daysRequested: Int?
    /** The list of Items in the report along with the associated metadata about the Item. */
    public var items: [CreditBankIncomeItem]?
    public var bankIncomeSummary: CreditBankIncomeSummary?
    /** If data from the Bank Income report was unable to be retrieved, the warnings will contain information about the error that caused the data to be incomplete. */
    public var warnings: [CreditBankIncomeWarning]?

    public init(bankIncomeId: String? = nil, generatedTime: Date? = nil, daysRequested: Int? = nil, items: [CreditBankIncomeItem]? = nil, bankIncomeSummary: CreditBankIncomeSummary? = nil, warnings: [CreditBankIncomeWarning]? = nil) {
        self.bankIncomeId = bankIncomeId
        self.generatedTime = generatedTime
        self.daysRequested = daysRequested
        self.items = items
        self.bankIncomeSummary = bankIncomeSummary
        self.warnings = warnings
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case bankIncomeId = "bank_income_id"
        case generatedTime = "generated_time"
        case daysRequested = "days_requested"
        case items
        case bankIncomeSummary = "bank_income_summary"
        case warnings
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(bankIncomeId, forKey: .bankIncomeId)
        try container.encodeIfPresent(generatedTime, forKey: .generatedTime)
        try container.encodeIfPresent(daysRequested, forKey: .daysRequested)
        try container.encodeIfPresent(items, forKey: .items)
        try container.encodeIfPresent(bankIncomeSummary, forKey: .bankIncomeSummary)
        try container.encodeIfPresent(warnings, forKey: .warnings)
    }
}

