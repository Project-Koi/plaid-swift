//
// PaymentInitiationConsentCreateRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** PaymentInitiationConsentCreateRequest defines the request schema for &#x60;/payment_initiation/consent/create&#x60; */
public struct PaymentInitiationConsentCreateRequest: Codable, JSONEncodable, Hashable {

    static let referenceRule = StringRule(minLength: 1, maxLength: 18, pattern: nil)
    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** The ID of the recipient the payment consent is for. The created consent can be used to transfer funds to this recipient only. */
    public var recipientId: String
    /** A reference for the payment consent. This must be an alphanumeric string with at most 18 characters and must not contain any special characters. */
    public var reference: String
    /** An array of payment consent scopes. */
    public var scopes: Set<PaymentInitiationConsentScope>
    public var constraints: PaymentInitiationConsentConstraints
    public var options: ExternalPaymentInitiationConsentOptions?

    public init(clientId: String? = nil, secret: String? = nil, recipientId: String, reference: String, scopes: Set<PaymentInitiationConsentScope>, constraints: PaymentInitiationConsentConstraints, options: ExternalPaymentInitiationConsentOptions? = nil) {
        self.clientId = clientId
        self.secret = secret
        self.recipientId = recipientId
        self.reference = reference
        self.scopes = scopes
        self.constraints = constraints
        self.options = options
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case recipientId = "recipient_id"
        case reference
        case scopes
        case constraints
        case options
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encode(recipientId, forKey: .recipientId)
        try container.encode(reference, forKey: .reference)
        try container.encode(scopes, forKey: .scopes)
        try container.encode(constraints, forKey: .constraints)
        try container.encodeIfPresent(options, forKey: .options)
    }
}

