//
// TransactionStream.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A grouping of related transactions */
public struct TransactionStream: Codable, JSONEncodable, Hashable {

    /** The ID of the account to which the stream belongs */
    public var accountId: String
    /** A unique id for the stream */
    public var streamId: String
    /** A hierarchical array of the categories to which this transaction belongs. See [Categories](https://plaid.com/docs/api/products/transactions/#categoriesget).  All implementations are encouraged to use the new `personal_finance_category` instead of `category`. `personal_finance_category` provides more meaningful categorization and greater accuracy. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var category: [String]
    /** The ID of the category to which this transaction belongs. See [Categories](https://plaid.com/docs/api/products/transactions/#categoriesget).  All implementations are encouraged to use the new `personal_finance_category` instead of `category`. `personal_finance_category` provides more meaningful categorization and greater accuracy. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var categoryId: String
    /** A description of the transaction stream. */
    public var description: String
    /** The merchant associated with the transaction stream. */
    public var merchantName: String?
    /** The posted date of the earliest transaction in the stream. */
    public var firstDate: Date
    /** The posted date of the latest transaction in the stream. */
    public var lastDate: Date
    public var frequency: RecurringTransactionFrequency
    /** An array of Plaid transaction IDs belonging to the stream, sorted by posted date. */
    public var transactionIds: [String]
    public var averageAmount: TransactionStreamAmount
    public var lastAmount: TransactionStreamAmount
    /** Indicates whether the transaction stream is still live. */
    public var isActive: Bool
    public var status: TransactionStreamStatus
    public var personalFinanceCategory: PersonalFinanceCategory?
    /** This will be set to `true` if the stream has been modified by request to a `/transactions/recurring/streams` endpoint. It will be `false` for all other streams. */
    public var isUserModified: Bool
    /** The date and time of the most recent user modification. This will only be set if `is_user_modified` is `true`. */
    public var lastUserModifiedDatetime: Date?

    public init(accountId: String, streamId: String, category: [String], categoryId: String, description: String, merchantName: String?, firstDate: Date, lastDate: Date, frequency: RecurringTransactionFrequency, transactionIds: [String], averageAmount: TransactionStreamAmount, lastAmount: TransactionStreamAmount, isActive: Bool, status: TransactionStreamStatus, personalFinanceCategory: PersonalFinanceCategory? = nil, isUserModified: Bool, lastUserModifiedDatetime: Date? = nil) {
        self.accountId = accountId
        self.streamId = streamId
        self.category = category
        self.categoryId = categoryId
        self.description = description
        self.merchantName = merchantName
        self.firstDate = firstDate
        self.lastDate = lastDate
        self.frequency = frequency
        self.transactionIds = transactionIds
        self.averageAmount = averageAmount
        self.lastAmount = lastAmount
        self.isActive = isActive
        self.status = status
        self.personalFinanceCategory = personalFinanceCategory
        self.isUserModified = isUserModified
        self.lastUserModifiedDatetime = lastUserModifiedDatetime
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountId = "account_id"
        case streamId = "stream_id"
        case category
        case categoryId = "category_id"
        case description
        case merchantName = "merchant_name"
        case firstDate = "first_date"
        case lastDate = "last_date"
        case frequency
        case transactionIds = "transaction_ids"
        case averageAmount = "average_amount"
        case lastAmount = "last_amount"
        case isActive = "is_active"
        case status
        case personalFinanceCategory = "personal_finance_category"
        case isUserModified = "is_user_modified"
        case lastUserModifiedDatetime = "last_user_modified_datetime"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(accountId, forKey: .accountId)
        try container.encode(streamId, forKey: .streamId)
        try container.encode(category, forKey: .category)
        try container.encode(categoryId, forKey: .categoryId)
        try container.encode(description, forKey: .description)
        try container.encode(merchantName, forKey: .merchantName)
        try container.encode(firstDate, forKey: .firstDate)
        try container.encode(lastDate, forKey: .lastDate)
        try container.encode(frequency, forKey: .frequency)
        try container.encode(transactionIds, forKey: .transactionIds)
        try container.encode(averageAmount, forKey: .averageAmount)
        try container.encode(lastAmount, forKey: .lastAmount)
        try container.encode(isActive, forKey: .isActive)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(personalFinanceCategory, forKey: .personalFinanceCategory)
        try container.encode(isUserModified, forKey: .isUserModified)
        try container.encodeIfPresent(lastUserModifiedDatetime, forKey: .lastUserModifiedDatetime)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        accountId = try container.decode(String.self, forKey: .accountId)
        streamId = try container.decode(String.self, forKey: .streamId)
        category = try container.decode([String].self, forKey: .category)
        categoryId = try container.decode(String.self, forKey: .categoryId)
        description = try container.decode(String.self, forKey: .description)
        merchantName = try container.decodeIfPresent(String.self, forKey: .merchantName)
        firstDate = try container.decode(Date.self, forKey: .firstDate)
        lastDate = try container.decode(Date.self, forKey: .lastDate)
        frequency = try container.decode(RecurringTransactionFrequency.self, forKey: .frequency)
        transactionIds = try container.decode([String].self, forKey: .transactionIds)
        averageAmount = try container.decode(TransactionStreamAmount.self, forKey: .averageAmount)
        lastAmount = try container.decode(TransactionStreamAmount.self, forKey: .lastAmount)
        isActive = try container.decode(Bool.self, forKey: .isActive)
        status = try container.decode(TransactionStreamStatus.self, forKey: .status)
        personalFinanceCategory = try container.decodeIfPresent(PersonalFinanceCategory.self, forKey: .personalFinanceCategory)
        isUserModified = try container.decode(Bool.self, forKey: .isUserModified)
        lastUserModifiedDatetime = try container.decodeIfPresent(Date.self, forKey: .lastUserModifiedDatetime)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("account_id")
        nonAdditionalPropertyKeys.insert("stream_id")
        nonAdditionalPropertyKeys.insert("category")
        nonAdditionalPropertyKeys.insert("category_id")
        nonAdditionalPropertyKeys.insert("description")
        nonAdditionalPropertyKeys.insert("merchant_name")
        nonAdditionalPropertyKeys.insert("first_date")
        nonAdditionalPropertyKeys.insert("last_date")
        nonAdditionalPropertyKeys.insert("frequency")
        nonAdditionalPropertyKeys.insert("transaction_ids")
        nonAdditionalPropertyKeys.insert("average_amount")
        nonAdditionalPropertyKeys.insert("last_amount")
        nonAdditionalPropertyKeys.insert("is_active")
        nonAdditionalPropertyKeys.insert("status")
        nonAdditionalPropertyKeys.insert("personal_finance_category")
        nonAdditionalPropertyKeys.insert("is_user_modified")
        nonAdditionalPropertyKeys.insert("last_user_modified_datetime")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

