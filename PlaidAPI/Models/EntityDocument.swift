//
// EntityDocument.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An official document, usually issued by a governing body or institution, with an associated identifier. */
public struct EntityDocument: Codable, JSONEncodable, Hashable {

    static let numberRule = StringRule(minLength: 4, maxLength: nil, pattern: nil)
    public var type: EntityDocumentType
    /** The numeric or alphanumeric identifier associated with this document. */
    public var number: String

    public init(type: EntityDocumentType, number: String) {
        self.type = type
        self.number = number
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case number
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(number, forKey: .number)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        type = try container.decode(EntityDocumentType.self, forKey: .type)
        number = try container.decode(String.self, forKey: .number)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("type")
        nonAdditionalPropertyKeys.insert("number")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

