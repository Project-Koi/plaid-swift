//
// StatementsStatement.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A statement&#39;s metadata associated with an account */
public struct StatementsStatement: Codable, JSONEncodable, Hashable {

    static let yearRule = NumericRule<Int>(minimum: 2010, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** Plaid's unique identifier for the statement. */
    public var statementId: String
    /** Month of the year. Possible values: 1 through 12 (January through December). */
    public var month: Int
    /** The year of statement. */
    public var year: Int

    public init(statementId: String, month: Int, year: Int) {
        self.statementId = statementId
        self.month = month
        self.year = year
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case statementId = "statement_id"
        case month
        case year
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(statementId, forKey: .statementId)
        try container.encode(month, forKey: .month)
        try container.encode(year, forKey: .year)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        statementId = try container.decode(String.self, forKey: .statementId)
        month = try container.decode(Int.self, forKey: .month)
        year = try container.decode(Int.self, forKey: .year)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("statement_id")
        nonAdditionalPropertyKeys.insert("month")
        nonAdditionalPropertyKeys.insert("year")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

