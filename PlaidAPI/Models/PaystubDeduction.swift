//
// PaystubDeduction.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Deduction on the paystub */
public struct PaystubDeduction: Codable, JSONEncodable, Hashable {

    /** The description of the deduction, as provided on the paystub. For example: `\"401(k)\"`, `\"FICA MED TAX\"`. */
    public var type: String?
    /** `true` if the deduction is pre-tax; `false` otherwise. */
    public var isPretax: Bool?
    /** The amount of the deduction. */
    public var total: Double?

    public init(type: String?, isPretax: Bool?, total: Double?) {
        self.type = type
        self.isPretax = isPretax
        self.total = total
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case isPretax = "is_pretax"
        case total
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(isPretax, forKey: .isPretax)
        try container.encode(total, forKey: .total)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        type = try container.decodeIfPresent(String.self, forKey: .type)
        isPretax = try container.decodeIfPresent(Bool.self, forKey: .isPretax)
        total = try container.decodeIfPresent(Double.self, forKey: .total)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("type")
        nonAdditionalPropertyKeys.insert("is_pretax")
        nonAdditionalPropertyKeys.insert("total")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

