//
// HoldingsOverride.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Specify the holdings on the account. */
public struct HoldingsOverride: Codable, JSONEncodable, Hashable {

    /** The last price given by the institution for this security */
    public var institutionPrice: Double
    /** The date at which `institution_price` was current. Must be formatted as an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date. */
    public var institutionPriceAsOf: Date?
    /** The total cost basis of the holding (e.g., the total amount spent to acquire all assets currently in the holding). */
    public var costBasis: Double?
    /** The total quantity of the asset held, as reported by the financial institution. */
    public var quantity: Double
    /** Either a valid `iso_currency_code` or `unofficial_currency_code` */
    public var currency: String
    public var security: SecurityOverride

    public init(institutionPrice: Double, institutionPriceAsOf: Date? = nil, costBasis: Double? = nil, quantity: Double, currency: String, security: SecurityOverride) {
        self.institutionPrice = institutionPrice
        self.institutionPriceAsOf = institutionPriceAsOf
        self.costBasis = costBasis
        self.quantity = quantity
        self.currency = currency
        self.security = security
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case institutionPrice = "institution_price"
        case institutionPriceAsOf = "institution_price_as_of"
        case costBasis = "cost_basis"
        case quantity
        case currency
        case security
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(institutionPrice, forKey: .institutionPrice)
        try container.encodeIfPresent(institutionPriceAsOf, forKey: .institutionPriceAsOf)
        try container.encodeIfPresent(costBasis, forKey: .costBasis)
        try container.encode(quantity, forKey: .quantity)
        try container.encode(currency, forKey: .currency)
        try container.encode(security, forKey: .security)
    }
}

