//
// ConnectedApplication.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Describes the connected application for a particular end user. */
public struct ConnectedApplication: Codable, JSONEncodable, Hashable {

    /** This field will map to the application ID that is returned from /item/application/list, or provided to the institution in an oauth redirect. */
    public var applicationId: String
    /** The name of the application */
    public var name: String
    /** A human-readable name of the application for display purposes */
    public var displayName: String?
    /** A URL that links to the application logo image. */
    public var logoUrl: String?
    /** The URL for the application's website */
    public var applicationUrl: String?
    /** A string provided by the connected app stating why they use their respective enabled products. */
    public var reasonForAccess: String?
    /** The date this application was linked in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC. */
    public var createdAt: Date
    public var scopes: ScopesNullable?

    public init(applicationId: String, name: String, displayName: String? = nil, logoUrl: String? = nil, applicationUrl: String? = nil, reasonForAccess: String? = nil, createdAt: Date, scopes: ScopesNullable? = nil) {
        self.applicationId = applicationId
        self.name = name
        self.displayName = displayName
        self.logoUrl = logoUrl
        self.applicationUrl = applicationUrl
        self.reasonForAccess = reasonForAccess
        self.createdAt = createdAt
        self.scopes = scopes
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case applicationId = "application_id"
        case name
        case displayName = "display_name"
        case logoUrl = "logo_url"
        case applicationUrl = "application_url"
        case reasonForAccess = "reason_for_access"
        case createdAt = "created_at"
        case scopes
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(applicationId, forKey: .applicationId)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(displayName, forKey: .displayName)
        try container.encodeIfPresent(logoUrl, forKey: .logoUrl)
        try container.encodeIfPresent(applicationUrl, forKey: .applicationUrl)
        try container.encodeIfPresent(reasonForAccess, forKey: .reasonForAccess)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(scopes, forKey: .scopes)
    }
}

