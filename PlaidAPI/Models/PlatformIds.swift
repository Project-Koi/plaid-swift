//
// PlatformIds.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An object containing a set of ids related to an employee */
public struct PlatformIds: Codable, JSONEncodable, Hashable {

    /** The ID of an employee as given by their employer */
    public var employeeId: String?
    /** The ID of an employee as given by their payroll */
    public var payrollId: String?
    /** The ID of the position of the employee */
    public var positionId: String?

    public init(employeeId: String? = nil, payrollId: String? = nil, positionId: String? = nil) {
        self.employeeId = employeeId
        self.payrollId = payrollId
        self.positionId = positionId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case employeeId = "employee_id"
        case payrollId = "payroll_id"
        case positionId = "position_id"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(employeeId, forKey: .employeeId)
        try container.encodeIfPresent(payrollId, forKey: .payrollId)
        try container.encodeIfPresent(positionId, forKey: .positionId)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        employeeId = try container.decodeIfPresent(String.self, forKey: .employeeId)
        payrollId = try container.decodeIfPresent(String.self, forKey: .payrollId)
        positionId = try container.decodeIfPresent(String.self, forKey: .positionId)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("employee_id")
        nonAdditionalPropertyKeys.insert("payroll_id")
        nonAdditionalPropertyKeys.insert("position_id")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

