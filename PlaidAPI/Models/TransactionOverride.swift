//
// TransactionOverride.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Data to populate as test transaction data. If not specified, random transactions will be generated instead. */
public struct TransactionOverride: Codable, JSONEncodable, Hashable {

    /** The date of the transaction, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Transactions in Sandbox will move from pending to posted once their transaction date has been reached. If a `date_transacted` is not provided by the institution, a transaction date may be available in the [`authorized_date`](https://plaid.com/docs/api/products/transactions/#transactions-get-response-transactions-authorized-date) field. */
    public var dateTransacted: Date
    /** The date the transaction posted, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Posted dates in the past or present will result in posted transactions; posted dates in the future will result in pending transactions. */
    public var datePosted: Date
    /** The transaction amount. Can be negative. */
    public var amount: Double
    /** The transaction description. */
    public var description: String
    /** The ISO-4217 format currency code for the transaction. */
    public var currency: String?

    public init(dateTransacted: Date, datePosted: Date, amount: Double, description: String, currency: String? = nil) {
        self.dateTransacted = dateTransacted
        self.datePosted = datePosted
        self.amount = amount
        self.description = description
        self.currency = currency
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case dateTransacted = "date_transacted"
        case datePosted = "date_posted"
        case amount
        case description
        case currency
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(dateTransacted, forKey: .dateTransacted)
        try container.encode(datePosted, forKey: .datePosted)
        try container.encode(amount, forKey: .amount)
        try container.encode(description, forKey: .description)
        try container.encodeIfPresent(currency, forKey: .currency)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        dateTransacted = try container.decode(Date.self, forKey: .dateTransacted)
        datePosted = try container.decode(Date.self, forKey: .datePosted)
        amount = try container.decode(Double.self, forKey: .amount)
        description = try container.decode(String.self, forKey: .description)
        currency = try container.decodeIfPresent(String.self, forKey: .currency)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("date_transacted")
        nonAdditionalPropertyKeys.insert("date_posted")
        nonAdditionalPropertyKeys.insert("amount")
        nonAdditionalPropertyKeys.insert("description")
        nonAdditionalPropertyKeys.insert("currency")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

