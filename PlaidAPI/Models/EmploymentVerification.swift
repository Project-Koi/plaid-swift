//
// EmploymentVerification.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An object containing proof of employment data for an individual */
public struct EmploymentVerification: Codable, JSONEncodable, Hashable {

    public var status: EmploymentVerificationStatus?
    /** Start of employment in ISO 8601 format (YYYY-MM-DD). */
    public var startDate: Date?
    /** End of employment, if applicable. Provided in ISO 8601 format (YYY-MM-DD). */
    public var endDate: Date?
    public var employer: EmployerVerification?
    /** Current title of employee. */
    public var title: String?
    public var platformIds: PlatformIds?

    public init(status: EmploymentVerificationStatus? = nil, startDate: Date? = nil, endDate: Date? = nil, employer: EmployerVerification? = nil, title: String? = nil, platformIds: PlatformIds? = nil) {
        self.status = status
        self.startDate = startDate
        self.endDate = endDate
        self.employer = employer
        self.title = title
        self.platformIds = platformIds
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case status
        case startDate = "start_date"
        case endDate = "end_date"
        case employer
        case title
        case platformIds = "platform_ids"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encodeIfPresent(endDate, forKey: .endDate)
        try container.encodeIfPresent(employer, forKey: .employer)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(platformIds, forKey: .platformIds)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        status = try container.decodeIfPresent(EmploymentVerificationStatus.self, forKey: .status)
        startDate = try container.decodeIfPresent(Date.self, forKey: .startDate)
        endDate = try container.decodeIfPresent(Date.self, forKey: .endDate)
        employer = try container.decodeIfPresent(EmployerVerification.self, forKey: .employer)
        title = try container.decodeIfPresent(String.self, forKey: .title)
        platformIds = try container.decodeIfPresent(PlatformIds.self, forKey: .platformIds)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("status")
        nonAdditionalPropertyKeys.insert("start_date")
        nonAdditionalPropertyKeys.insert("end_date")
        nonAdditionalPropertyKeys.insert("employer")
        nonAdditionalPropertyKeys.insert("title")
        nonAdditionalPropertyKeys.insert("platform_ids")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

