//
// PayrollIncomeObject.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An object representing payroll data. */
public struct PayrollIncomeObject: Codable, JSONEncodable, Hashable {

    /** ID of the payroll provider account. */
    public var accountId: String?
    /** Array of pay stubs for the user. */
    public var payStubs: [CreditPayStub]
    /** Array of tax form W-2s. */
    public var w2s: [CreditW2]
    /** Array of tax form 1099s. */
    public var form1099s: [Credit1099]

    public init(accountId: String?, payStubs: [CreditPayStub], w2s: [CreditW2], form1099s: [Credit1099]) {
        self.accountId = accountId
        self.payStubs = payStubs
        self.w2s = w2s
        self.form1099s = form1099s
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountId = "account_id"
        case payStubs = "pay_stubs"
        case w2s
        case form1099s
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(accountId, forKey: .accountId)
        try container.encode(payStubs, forKey: .payStubs)
        try container.encode(w2s, forKey: .w2s)
        try container.encode(form1099s, forKey: .form1099s)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        accountId = try container.decodeIfPresent(String.self, forKey: .accountId)
        payStubs = try container.decode([CreditPayStub].self, forKey: .payStubs)
        w2s = try container.decode([CreditW2].self, forKey: .w2s)
        form1099s = try container.decode([Credit1099].self, forKey: .form1099s)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("account_id")
        nonAdditionalPropertyKeys.insert("pay_stubs")
        nonAdditionalPropertyKeys.insert("w2s")
        nonAdditionalPropertyKeys.insert("form1099s")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

