//
// TransferRefund.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Represents a refund within the Transfers API. */
public struct TransferRefund: Codable, JSONEncodable, Hashable {

    /** Plaidâ€™s unique identifier for a refund. */
    public var id: String
    /** The ID of the transfer to refund. */
    public var transferId: String
    /** The amount of the refund (decimal string with two digits of precision e.g. \"10.00\"). */
    public var amount: String
    public var status: TransferRefundStatus
    public var failureReason: TransferRefundFailure?
    /** The datetime when this refund was created. This will be of the form `2006-01-02T15:04:05Z` */
    public var created: Date
    /** The trace identifier for the transfer based on its network. This will only be set after the transfer has posted.  For `ach` or `same-day-ach` transfers, this is the ACH trace number. For `rtp` transfers, this is the Transaction Identification number. For `wire` transfers, this is the IMAD (Input Message Accountability Data) number. */
    public var networkTraceId: String?

    public init(id: String, transferId: String, amount: String, status: TransferRefundStatus, failureReason: TransferRefundFailure?, created: Date, networkTraceId: String? = nil) {
        self.id = id
        self.transferId = transferId
        self.amount = amount
        self.status = status
        self.failureReason = failureReason
        self.created = created
        self.networkTraceId = networkTraceId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case transferId = "transfer_id"
        case amount
        case status
        case failureReason = "failure_reason"
        case created
        case networkTraceId = "network_trace_id"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(transferId, forKey: .transferId)
        try container.encode(amount, forKey: .amount)
        try container.encode(status, forKey: .status)
        try container.encode(failureReason, forKey: .failureReason)
        try container.encode(created, forKey: .created)
        try container.encodeIfPresent(networkTraceId, forKey: .networkTraceId)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decode(String.self, forKey: .id)
        transferId = try container.decode(String.self, forKey: .transferId)
        amount = try container.decode(String.self, forKey: .amount)
        status = try container.decode(TransferRefundStatus.self, forKey: .status)
        failureReason = try container.decodeIfPresent(TransferRefundFailure.self, forKey: .failureReason)
        created = try container.decode(Date.self, forKey: .created)
        networkTraceId = try container.decodeIfPresent(String.self, forKey: .networkTraceId)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("id")
        nonAdditionalPropertyKeys.insert("transfer_id")
        nonAdditionalPropertyKeys.insert("amount")
        nonAdditionalPropertyKeys.insert("status")
        nonAdditionalPropertyKeys.insert("failure_reason")
        nonAdditionalPropertyKeys.insert("created")
        nonAdditionalPropertyKeys.insert("network_trace_id")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

