//
// TransferEventSyncRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Defines the request schema for &#x60;/transfer/event/sync&#x60; */
public struct TransferEventSyncRequest: Codable, JSONEncodable, Hashable {

    static let afterIdRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let countRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 25, exclusiveMaximum: false, multipleOf: nil)
    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** The latest (largest) `event_id` fetched via the sync endpoint, or 0 initially. */
    public var afterId: Int
    /** The maximum number of transfer events to return. */
    public var count: Int? = 25

    public init(clientId: String? = nil, secret: String? = nil, afterId: Int, count: Int? = 25) {
        self.clientId = clientId
        self.secret = secret
        self.afterId = afterId
        self.count = count
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case afterId = "after_id"
        case count
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encode(afterId, forKey: .afterId)
        try container.encodeIfPresent(count, forKey: .count)
    }
}

