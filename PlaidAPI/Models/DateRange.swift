//
// DateRange.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A date range with a start and end date */
public struct DateRange: Codable, JSONEncodable, Hashable {

    /** A date in the format YYYY-MM-DD (RFC 3339 Section 5.6). */
    public var beginning: Date
    /** A date in the format YYYY-MM-DD (RFC 3339 Section 5.6). */
    public var ending: Date

    public init(beginning: Date, ending: Date) {
        self.beginning = beginning
        self.ending = ending
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case beginning
        case ending
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(beginning, forKey: .beginning)
        try container.encode(ending, forKey: .ending)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        beginning = try container.decode(Date.self, forKey: .beginning)
        ending = try container.decode(Date.self, forKey: .ending)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("beginning")
        nonAdditionalPropertyKeys.insert("ending")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

