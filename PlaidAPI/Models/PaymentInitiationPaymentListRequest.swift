//
// PaymentInitiationPaymentListRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** PaymentInitiationPaymentListRequest defines the request schema for &#x60;/payment_initiation/payment/list&#x60; */
public struct PaymentInitiationPaymentListRequest: Codable, JSONEncodable, Hashable {

    static let countRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 200, exclusiveMaximum: false, multipleOf: nil)
    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** The maximum number of payments to return. If `count` is not specified, a maximum of 10 payments will be returned, beginning with the most recent payment before the cursor (if specified). */
    public var count: Int? = 10
    /** A string in RFC 3339 format (i.e. \"2019-12-06T22:35:49Z\"). Only payments created before the cursor will be returned. */
    public var cursor: Date?
    /** The consent ID. If specified, only payments, executed using this consent, will be returned. */
    public var consentId: String?

    public init(clientId: String? = nil, secret: String? = nil, count: Int? = 10, cursor: Date? = nil, consentId: String? = nil) {
        self.clientId = clientId
        self.secret = secret
        self.count = count
        self.cursor = cursor
        self.consentId = consentId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case count
        case cursor
        case consentId = "consent_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(cursor, forKey: .cursor)
        try container.encodeIfPresent(consentId, forKey: .consentId)
    }
}

