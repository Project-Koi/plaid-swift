//
// PaystubYTDDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The amount of income earned year to date, as based on paystub data. */
@available(*, deprecated, message: "This schema is deprecated.")
public struct PaystubYTDDetails: Codable, JSONEncodable, Hashable {

    /** Year-to-date gross earnings. */
    public var grossEarnings: Double?
    /** Year-to-date net (take home) earnings. */
    public var netEarnings: Double?

    public init(grossEarnings: Double? = nil, netEarnings: Double? = nil) {
        self.grossEarnings = grossEarnings
        self.netEarnings = netEarnings
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case grossEarnings = "gross_earnings"
        case netEarnings = "net_earnings"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(grossEarnings, forKey: .grossEarnings)
        try container.encodeIfPresent(netEarnings, forKey: .netEarnings)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        grossEarnings = try container.decodeIfPresent(Double.self, forKey: .grossEarnings)
        netEarnings = try container.decodeIfPresent(Double.self, forKey: .netEarnings)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("gross_earnings")
        nonAdditionalPropertyKeys.insert("net_earnings")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

