//
// IdentityVerificationCreateRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Request schema for &#39;/identity_verification/create&#39; */
public struct IdentityVerificationCreateRequest: Codable, JSONEncodable, Hashable {

    static let clientUserIdRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    /** A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the `/link/token/create` `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`. */
    public var clientUserId: String?
    /** A flag specifying whether you would like Plaid to expose a shareable URL for the verification being created. */
    public var isShareable: Bool
    /** ID of the associated Identity Verification template. */
    public var templateId: String
    /** A flag specifying whether the end user has already agreed to a privacy policy specifying that their data will be shared with Plaid for verification purposes.  If `gave_consent` is set to `true`, the `accept_tos` step will be marked as `skipped` and the end user's session will start at the next step requirement. */
    public var gaveConsent: Bool = false
    public var user: IdentityVerificationCreateRequestUser?
    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** An optional flag specifying how you would like Plaid to handle attempts to create an Identity Verification when an Identity Verification already exists for the provided `client_user_id` and `template_id`. If idempotency is enabled, Plaid will return the existing Identity Verification. If idempotency is disabled, Plaid will reject the request with a `400 Bad Request` status code if an Identity Verification already exists for the supplied `client_user_id` and `template_id`. */
    public var isIdempotent: Bool?

    public init(clientUserId: String? = nil, isShareable: Bool, templateId: String, gaveConsent: Bool = false, user: IdentityVerificationCreateRequestUser? = nil, clientId: String? = nil, secret: String? = nil, isIdempotent: Bool? = nil) {
        self.clientUserId = clientUserId
        self.isShareable = isShareable
        self.templateId = templateId
        self.gaveConsent = gaveConsent
        self.user = user
        self.clientId = clientId
        self.secret = secret
        self.isIdempotent = isIdempotent
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientUserId = "client_user_id"
        case isShareable = "is_shareable"
        case templateId = "template_id"
        case gaveConsent = "gave_consent"
        case user
        case clientId = "client_id"
        case secret
        case isIdempotent = "is_idempotent"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientUserId, forKey: .clientUserId)
        try container.encode(isShareable, forKey: .isShareable)
        try container.encode(templateId, forKey: .templateId)
        try container.encode(gaveConsent, forKey: .gaveConsent)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encodeIfPresent(isIdempotent, forKey: .isIdempotent)
    }
}

