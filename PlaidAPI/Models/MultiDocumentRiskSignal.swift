//
// MultiDocumentRiskSignal.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Object containing risk signals and relevant metadata for a set of uploaded documents */
public struct MultiDocumentRiskSignal: Codable, JSONEncodable, Hashable {

    /** Array of objects containing attributes that could indicate if a document is fraudulent */
    public var documentReferences: [RiskSignalDocumentReference]
    /** Array of attributes that indicate whether or not there is fraud risk with a set of documents */
    public var riskSignals: [DocumentRiskSignal]

    public init(documentReferences: [RiskSignalDocumentReference], riskSignals: [DocumentRiskSignal]) {
        self.documentReferences = documentReferences
        self.riskSignals = riskSignals
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case documentReferences = "document_references"
        case riskSignals = "risk_signals"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(documentReferences, forKey: .documentReferences)
        try container.encode(riskSignals, forKey: .riskSignals)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        documentReferences = try container.decode([RiskSignalDocumentReference].self, forKey: .documentReferences)
        riskSignals = try container.decode([DocumentRiskSignal].self, forKey: .riskSignals)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("document_references")
        nonAdditionalPropertyKeys.insert("risk_signals")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

