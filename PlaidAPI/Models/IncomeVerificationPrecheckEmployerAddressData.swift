//
// IncomeVerificationPrecheckEmployerAddressData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Data about the components comprising an address. */
public struct IncomeVerificationPrecheckEmployerAddressData: Codable, JSONEncodable, Hashable {

    /** The full city name */
    public var city: String?
    /** The ISO 3166-1 alpha-2 country code */
    public var country: String?
    /** The postal code. In API versions 2018-05-22 and earlier, this field is called `zip`. */
    public var postalCode: String?
    /** The region or state. In API versions 2018-05-22 and earlier, this field is called `state`. Example: `\"NC\"` */
    public var region: String?
    /** The full street address Example: `\"564 Main Street, APT 15\"` */
    public var street: String?

    public init(city: String? = nil, country: String? = nil, postalCode: String? = nil, region: String? = nil, street: String? = nil) {
        self.city = city
        self.country = country
        self.postalCode = postalCode
        self.region = region
        self.street = street
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case city
        case country
        case postalCode = "postal_code"
        case region
        case street
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(postalCode, forKey: .postalCode)
        try container.encodeIfPresent(region, forKey: .region)
        try container.encodeIfPresent(street, forKey: .street)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        city = try container.decodeIfPresent(String.self, forKey: .city)
        country = try container.decodeIfPresent(String.self, forKey: .country)
        postalCode = try container.decodeIfPresent(String.self, forKey: .postalCode)
        region = try container.decodeIfPresent(String.self, forKey: .region)
        street = try container.decodeIfPresent(String.self, forKey: .street)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("city")
        nonAdditionalPropertyKeys.insert("country")
        nonAdditionalPropertyKeys.insert("postal_code")
        nonAdditionalPropertyKeys.insert("region")
        nonAdditionalPropertyKeys.insert("street")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

