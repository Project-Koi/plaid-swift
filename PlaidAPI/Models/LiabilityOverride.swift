//
// LiabilityOverride.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Used to configure Sandbox test data for the Liabilities product */
public struct LiabilityOverride: Codable, JSONEncodable, Hashable {

    /** The type of the liability object, either `credit` or `student`. Mortgages are not currently supported in the custom Sandbox. */
    public var type: String
    /** The purchase APR percentage value. For simplicity, this is the only interest rate used to calculate interest charges. Can only be set if `type` is `credit`. */
    public var purchaseApr: Double
    /** The cash APR percentage value. Can only be set if `type` is `credit`. */
    public var cashApr: Double
    /** The balance transfer APR percentage value. Can only be set if `type` is `credit`. */
    public var balanceTransferApr: Double
    /** The special APR percentage value. Can only be set if `type` is `credit`. */
    public var specialApr: Double
    /** Override the `last_payment_amount` field. Can only be set if `type` is `credit`. */
    public var lastPaymentAmount: Double
    /** Override the `minimum_payment_amount` field. Can only be set if `type` is `credit` or `student`. */
    public var minimumPaymentAmount: Double
    /** Override the `is_overdue` field */
    public var isOverdue: Bool
    /** The date on which the loan was initially lent, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Can only be set if `type` is `student`. */
    public var originationDate: Date
    /** The original loan principal. Can only be set if `type` is `student`. */
    public var principal: Double
    /** The interest rate on the loan as a percentage. Can only be set if `type` is `student`. */
    public var nominalApr: Double
    /** If set, interest capitalization begins at the given number of months after loan origination. By default interest is never capitalized. Can only be set if `type` is `student`. */
    public var interestCapitalizationGracePeriodMonths: Double
    public var repaymentModel: StudentLoanRepaymentModel
    /** Override the `expected_payoff_date` field. Can only be set if `type` is `student`. */
    public var expectedPayoffDate: Date
    /** Override the `guarantor` field. Can only be set if `type` is `student`. */
    public var guarantor: String
    /** Override the `is_federal` field. Can only be set if `type` is `student`. */
    public var isFederal: Bool
    /** Override the `loan_name` field. Can only be set if `type` is `student`. */
    public var loanName: String
    public var loanStatus: StudentLoanStatus
    /** Override the `payment_reference_number` field. Can only be set if `type` is `student`. */
    public var paymentReferenceNumber: String
    public var pslfStatus: PSLFStatus
    /** Override the `repayment_plan.description` field. Can only be set if `type` is `student`. */
    public var repaymentPlanDescription: String
    /** Override the `repayment_plan.type` field. Can only be set if `type` is `student`. Possible values are: `\"extended graduated\"`, `\"extended standard\"`, `\"graduated\"`, `\"income-contingent repayment\"`, `\"income-based repayment\"`, `\"interest only\"`, `\"other\"`, `\"pay as you earn\"`, `\"revised pay as you earn\"`, `\"standard\"`, or `\"saving on a valuable education\"`. */
    public var repaymentPlanType: String
    /** Override the `sequence_number` field. Can only be set if `type` is `student`. */
    public var sequenceNumber: String
    public var servicerAddress: Address

    public init(type: String, purchaseApr: Double, cashApr: Double, balanceTransferApr: Double, specialApr: Double, lastPaymentAmount: Double, minimumPaymentAmount: Double, isOverdue: Bool, originationDate: Date, principal: Double, nominalApr: Double, interestCapitalizationGracePeriodMonths: Double, repaymentModel: StudentLoanRepaymentModel, expectedPayoffDate: Date, guarantor: String, isFederal: Bool, loanName: String, loanStatus: StudentLoanStatus, paymentReferenceNumber: String, pslfStatus: PSLFStatus, repaymentPlanDescription: String, repaymentPlanType: String, sequenceNumber: String, servicerAddress: Address) {
        self.type = type
        self.purchaseApr = purchaseApr
        self.cashApr = cashApr
        self.balanceTransferApr = balanceTransferApr
        self.specialApr = specialApr
        self.lastPaymentAmount = lastPaymentAmount
        self.minimumPaymentAmount = minimumPaymentAmount
        self.isOverdue = isOverdue
        self.originationDate = originationDate
        self.principal = principal
        self.nominalApr = nominalApr
        self.interestCapitalizationGracePeriodMonths = interestCapitalizationGracePeriodMonths
        self.repaymentModel = repaymentModel
        self.expectedPayoffDate = expectedPayoffDate
        self.guarantor = guarantor
        self.isFederal = isFederal
        self.loanName = loanName
        self.loanStatus = loanStatus
        self.paymentReferenceNumber = paymentReferenceNumber
        self.pslfStatus = pslfStatus
        self.repaymentPlanDescription = repaymentPlanDescription
        self.repaymentPlanType = repaymentPlanType
        self.sequenceNumber = sequenceNumber
        self.servicerAddress = servicerAddress
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case purchaseApr = "purchase_apr"
        case cashApr = "cash_apr"
        case balanceTransferApr = "balance_transfer_apr"
        case specialApr = "special_apr"
        case lastPaymentAmount = "last_payment_amount"
        case minimumPaymentAmount = "minimum_payment_amount"
        case isOverdue = "is_overdue"
        case originationDate = "origination_date"
        case principal
        case nominalApr = "nominal_apr"
        case interestCapitalizationGracePeriodMonths = "interest_capitalization_grace_period_months"
        case repaymentModel = "repayment_model"
        case expectedPayoffDate = "expected_payoff_date"
        case guarantor
        case isFederal = "is_federal"
        case loanName = "loan_name"
        case loanStatus = "loan_status"
        case paymentReferenceNumber = "payment_reference_number"
        case pslfStatus = "pslf_status"
        case repaymentPlanDescription = "repayment_plan_description"
        case repaymentPlanType = "repayment_plan_type"
        case sequenceNumber = "sequence_number"
        case servicerAddress = "servicer_address"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(purchaseApr, forKey: .purchaseApr)
        try container.encode(cashApr, forKey: .cashApr)
        try container.encode(balanceTransferApr, forKey: .balanceTransferApr)
        try container.encode(specialApr, forKey: .specialApr)
        try container.encode(lastPaymentAmount, forKey: .lastPaymentAmount)
        try container.encode(minimumPaymentAmount, forKey: .minimumPaymentAmount)
        try container.encode(isOverdue, forKey: .isOverdue)
        try container.encode(originationDate, forKey: .originationDate)
        try container.encode(principal, forKey: .principal)
        try container.encode(nominalApr, forKey: .nominalApr)
        try container.encode(interestCapitalizationGracePeriodMonths, forKey: .interestCapitalizationGracePeriodMonths)
        try container.encode(repaymentModel, forKey: .repaymentModel)
        try container.encode(expectedPayoffDate, forKey: .expectedPayoffDate)
        try container.encode(guarantor, forKey: .guarantor)
        try container.encode(isFederal, forKey: .isFederal)
        try container.encode(loanName, forKey: .loanName)
        try container.encode(loanStatus, forKey: .loanStatus)
        try container.encode(paymentReferenceNumber, forKey: .paymentReferenceNumber)
        try container.encode(pslfStatus, forKey: .pslfStatus)
        try container.encode(repaymentPlanDescription, forKey: .repaymentPlanDescription)
        try container.encode(repaymentPlanType, forKey: .repaymentPlanType)
        try container.encode(sequenceNumber, forKey: .sequenceNumber)
        try container.encode(servicerAddress, forKey: .servicerAddress)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        type = try container.decode(String.self, forKey: .type)
        purchaseApr = try container.decode(Double.self, forKey: .purchaseApr)
        cashApr = try container.decode(Double.self, forKey: .cashApr)
        balanceTransferApr = try container.decode(Double.self, forKey: .balanceTransferApr)
        specialApr = try container.decode(Double.self, forKey: .specialApr)
        lastPaymentAmount = try container.decode(Double.self, forKey: .lastPaymentAmount)
        minimumPaymentAmount = try container.decode(Double.self, forKey: .minimumPaymentAmount)
        isOverdue = try container.decode(Bool.self, forKey: .isOverdue)
        originationDate = try container.decode(Date.self, forKey: .originationDate)
        principal = try container.decode(Double.self, forKey: .principal)
        nominalApr = try container.decode(Double.self, forKey: .nominalApr)
        interestCapitalizationGracePeriodMonths = try container.decode(Double.self, forKey: .interestCapitalizationGracePeriodMonths)
        repaymentModel = try container.decode(StudentLoanRepaymentModel.self, forKey: .repaymentModel)
        expectedPayoffDate = try container.decode(Date.self, forKey: .expectedPayoffDate)
        guarantor = try container.decode(String.self, forKey: .guarantor)
        isFederal = try container.decode(Bool.self, forKey: .isFederal)
        loanName = try container.decode(String.self, forKey: .loanName)
        loanStatus = try container.decode(StudentLoanStatus.self, forKey: .loanStatus)
        paymentReferenceNumber = try container.decode(String.self, forKey: .paymentReferenceNumber)
        pslfStatus = try container.decode(PSLFStatus.self, forKey: .pslfStatus)
        repaymentPlanDescription = try container.decode(String.self, forKey: .repaymentPlanDescription)
        repaymentPlanType = try container.decode(String.self, forKey: .repaymentPlanType)
        sequenceNumber = try container.decode(String.self, forKey: .sequenceNumber)
        servicerAddress = try container.decode(Address.self, forKey: .servicerAddress)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("type")
        nonAdditionalPropertyKeys.insert("purchase_apr")
        nonAdditionalPropertyKeys.insert("cash_apr")
        nonAdditionalPropertyKeys.insert("balance_transfer_apr")
        nonAdditionalPropertyKeys.insert("special_apr")
        nonAdditionalPropertyKeys.insert("last_payment_amount")
        nonAdditionalPropertyKeys.insert("minimum_payment_amount")
        nonAdditionalPropertyKeys.insert("is_overdue")
        nonAdditionalPropertyKeys.insert("origination_date")
        nonAdditionalPropertyKeys.insert("principal")
        nonAdditionalPropertyKeys.insert("nominal_apr")
        nonAdditionalPropertyKeys.insert("interest_capitalization_grace_period_months")
        nonAdditionalPropertyKeys.insert("repayment_model")
        nonAdditionalPropertyKeys.insert("expected_payoff_date")
        nonAdditionalPropertyKeys.insert("guarantor")
        nonAdditionalPropertyKeys.insert("is_federal")
        nonAdditionalPropertyKeys.insert("loan_name")
        nonAdditionalPropertyKeys.insert("loan_status")
        nonAdditionalPropertyKeys.insert("payment_reference_number")
        nonAdditionalPropertyKeys.insert("pslf_status")
        nonAdditionalPropertyKeys.insert("repayment_plan_description")
        nonAdditionalPropertyKeys.insert("repayment_plan_type")
        nonAdditionalPropertyKeys.insert("sequence_number")
        nonAdditionalPropertyKeys.insert("servicer_address")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

