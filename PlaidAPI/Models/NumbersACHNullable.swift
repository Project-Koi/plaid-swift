//
// NumbersACHNullable.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Identifying information for transferring money to or from a US account via ACH or wire transfer. */
public struct NumbersACHNullable: Codable, JSONEncodable, Hashable {

    /** The Plaid account ID associated with the account numbers */
    public var accountId: String
    /** The ACH account number for the account.  Note that when using OAuth with Chase Bank (`ins_56`), Chase will issue \"tokenized\" routing and account numbers, which are not the user's actual account and routing numbers. These tokenized account numbers (also known as TANs) should work identically to normal account and routing numbers. The digits returned in the `mask` field will continue to reflect the actual account number, rather than the tokenized account number; for this reason, when displaying account numbers to the user to help them identify their account in your UI, always use the `mask` rather than truncating the `account` number. If a user revokes their permissions to your app, the tokenized numbers will no longer work. */
    public var account: String
    /** The ACH routing number for the account. If the institution is `ins_56`, this may be a tokenized routing number. For more information, see the description of the `account` field. */
    public var routing: String
    /** The wire transfer routing number for the account, if available */
    public var wireRouting: String?
    /** Whether the account supports ACH transfers into the account */
    public var canTransferIn: Bool?
    /** Whether the account supports ACH transfers out of the account */
    public var canTransferOut: Bool?

    public init(accountId: String, account: String, routing: String, wireRouting: String?, canTransferIn: Bool? = nil, canTransferOut: Bool? = nil) {
        self.accountId = accountId
        self.account = account
        self.routing = routing
        self.wireRouting = wireRouting
        self.canTransferIn = canTransferIn
        self.canTransferOut = canTransferOut
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountId = "account_id"
        case account
        case routing
        case wireRouting = "wire_routing"
        case canTransferIn = "can_transfer_in"
        case canTransferOut = "can_transfer_out"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(accountId, forKey: .accountId)
        try container.encode(account, forKey: .account)
        try container.encode(routing, forKey: .routing)
        try container.encode(wireRouting, forKey: .wireRouting)
        try container.encodeIfPresent(canTransferIn, forKey: .canTransferIn)
        try container.encodeIfPresent(canTransferOut, forKey: .canTransferOut)
    }
}

