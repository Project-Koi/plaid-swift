//
// PhysicalDocumentExtractedDataAnalysis.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Analysis of the data extracted from the submitted document. */
public struct PhysicalDocumentExtractedDataAnalysis: Codable, JSONEncodable, Hashable {

    public var name: DocumentNameMatchCode
    public var dateOfBirth: DocumentDateOfBirthMatchCode
    public var expirationDate: ExpirationDate
    public var issuingCountry: IssuingCountry

    public init(name: DocumentNameMatchCode, dateOfBirth: DocumentDateOfBirthMatchCode, expirationDate: ExpirationDate, issuingCountry: IssuingCountry) {
        self.name = name
        self.dateOfBirth = dateOfBirth
        self.expirationDate = expirationDate
        self.issuingCountry = issuingCountry
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case dateOfBirth = "date_of_birth"
        case expirationDate = "expiration_date"
        case issuingCountry = "issuing_country"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(dateOfBirth, forKey: .dateOfBirth)
        try container.encode(expirationDate, forKey: .expirationDate)
        try container.encode(issuingCountry, forKey: .issuingCountry)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        name = try container.decode(DocumentNameMatchCode.self, forKey: .name)
        dateOfBirth = try container.decode(DocumentDateOfBirthMatchCode.self, forKey: .dateOfBirth)
        expirationDate = try container.decode(ExpirationDate.self, forKey: .expirationDate)
        issuingCountry = try container.decode(IssuingCountry.self, forKey: .issuingCountry)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("name")
        nonAdditionalPropertyKeys.insert("date_of_birth")
        nonAdditionalPropertyKeys.insert("expiration_date")
        nonAdditionalPropertyKeys.insert("issuing_country")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

