//
// CustomerInitiatedReturnRisk.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The object contains a risk score and a risk tier that evaluate the transaction return risk of an unauthorized debit. Common return codes in this category include: \&quot;R05\&quot;, \&quot;R07\&quot;, \&quot;R10\&quot;, \&quot;R11\&quot;, \&quot;R29\&quot;. These returns typically have a return time frame of up to 60 calendar days. During this period, the customer of financial institutions can dispute a transaction as unauthorized. */
public struct CustomerInitiatedReturnRisk: Codable, JSONEncodable, Hashable {

    static let scoreRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 99, exclusiveMaximum: false, multipleOf: nil)
    static let riskTierRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 5, exclusiveMaximum: false, multipleOf: nil)
    /** A score from 1-99 that indicates the transaction return risk: a higher risk score suggests a higher return likelihood. */
    public var score: Int
    /** A tier corresponding to the projected likelihood that the transaction, if initiated, will be subject to a return.  In the `customer_initiated_return_risk` object, there are five risk tiers corresponding to the scores:   1: Predicted customer-initiated return incidence rate between 0.00% - 0.02%   2: Predicted customer-initiated return incidence rate between 0.02% - 0.05%   3: Predicted customer-initiated return incidence rate between 0.05% - 0.1%   4: Predicted customer-initiated return incidence rate between 0.1% - 0.5%   5: Predicted customer-initiated return incidence rate greater than 0.5%  */
    public var riskTier: Int

    public init(score: Int, riskTier: Int) {
        self.score = score
        self.riskTier = riskTier
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case score
        case riskTier = "risk_tier"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(score, forKey: .score)
        try container.encode(riskTier, forKey: .riskTier)
    }
}

