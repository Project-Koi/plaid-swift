//
// Credit1099Recipient.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An object representing a recipient used in both 1099-K and 1099-MISC tax documents. */
public struct Credit1099Recipient: Codable, JSONEncodable, Hashable {

    public var address: CreditPayStubAddress?
    /** Name of recipient. */
    public var name: String?
    /** Tax identification number of recipient. */
    public var tin: String?
    /** Account number number of recipient. */
    public var accountNumber: String?
    /** Checked if FACTA is a filing requirement. */
    public var factaFilingRequirement: String?
    /** Checked if 2nd TIN exists. */
    public var secondTinExists: String?

    public init(address: CreditPayStubAddress? = nil, name: String? = nil, tin: String? = nil, accountNumber: String? = nil, factaFilingRequirement: String? = nil, secondTinExists: String? = nil) {
        self.address = address
        self.name = name
        self.tin = tin
        self.accountNumber = accountNumber
        self.factaFilingRequirement = factaFilingRequirement
        self.secondTinExists = secondTinExists
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case address
        case name
        case tin
        case accountNumber = "account_number"
        case factaFilingRequirement = "facta_filing_requirement"
        case secondTinExists = "second_tin_exists"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(tin, forKey: .tin)
        try container.encodeIfPresent(accountNumber, forKey: .accountNumber)
        try container.encodeIfPresent(factaFilingRequirement, forKey: .factaFilingRequirement)
        try container.encodeIfPresent(secondTinExists, forKey: .secondTinExists)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        address = try container.decodeIfPresent(CreditPayStubAddress.self, forKey: .address)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        tin = try container.decodeIfPresent(String.self, forKey: .tin)
        accountNumber = try container.decodeIfPresent(String.self, forKey: .accountNumber)
        factaFilingRequirement = try container.decodeIfPresent(String.self, forKey: .factaFilingRequirement)
        secondTinExists = try container.decodeIfPresent(String.self, forKey: .secondTinExists)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("address")
        nonAdditionalPropertyKeys.insert("name")
        nonAdditionalPropertyKeys.insert("tin")
        nonAdditionalPropertyKeys.insert("account_number")
        nonAdditionalPropertyKeys.insert("facta_filing_requirement")
        nonAdditionalPropertyKeys.insert("second_tin_exists")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

