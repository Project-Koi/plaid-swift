//
// CraBankIncomeSource.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Detailed information for the income source. */
public struct CraBankIncomeSource: Codable, JSONEncodable, Hashable {

    /** A unique identifier for an income source. */
    public var incomeSourceId: String?
    /** The most common name or original description for the underlying income transactions. */
    public var incomeDescription: String?
    public var incomeCategory: CreditBankIncomeCategory?
    /** Minimum of all dates within the specific income sources in the user's bank account for days requested by the client. The date will be returned in an ISO 8601 format (YYYY-MM-DD). */
    public var startDate: Date?
    /** Maximum of all dates within the specific income sources in the user’s bank account for days requested by the client. The date will be returned in an ISO 8601 format (YYYY-MM-DD). */
    public var endDate: Date?
    public var payFrequency: CreditBankIncomePayFrequency?
    /** Total amount of earnings in the user’s bank account for the specific income source for days requested by the client. */
    public var totalAmount: Double?
    /** The ISO 4217 currency code of the amount or balance. */
    public var isoCurrencyCode: String?
    /** The unofficial currency code associated with the amount or balance. Always `null` if `iso_currency_code` is non-null. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries. */
    public var unofficialCurrencyCode: String?
    /** Number of transactions for the income source within the start and end date. */
    public var transactionCount: Int?
    /** The expected date of the end user’s next paycheck for the income source. The date will be returned in an ISO 8601 format (YYYY-MM-DD). */
    public var nextPaymentDate: Date?
    /** An estimate of the average gross monthly income based on the historical net amount and income category for the income source(s). */
    public var historicalAverageMonthlyGrossIncome: Double?
    /** The average monthly net income amount estimated based on the historical data for the income source(s). */
    public var historicalAverageMonthlyIncome: Double?
    /** The predicted average monthly net income amount for the income source(s). */
    public var forecastedAverageMonthlyIncome: Double?
    /** The prediction interval(s) for the forecasted average monthly income. */
    public var forecastedAverageMonthlyIncomePredictionIntervals: [CraPredictionInterval]
    public var employer: CraBankIncomeEmployer?
    public var historicalSummary: [CraBankIncomeHistoricalSummary]?

    public init(incomeSourceId: String? = nil, incomeDescription: String? = nil, incomeCategory: CreditBankIncomeCategory? = nil, startDate: Date? = nil, endDate: Date? = nil, payFrequency: CreditBankIncomePayFrequency? = nil, totalAmount: Double? = nil, isoCurrencyCode: String? = nil, unofficialCurrencyCode: String? = nil, transactionCount: Int? = nil, nextPaymentDate: Date? = nil, historicalAverageMonthlyGrossIncome: Double? = nil, historicalAverageMonthlyIncome: Double? = nil, forecastedAverageMonthlyIncome: Double? = nil, forecastedAverageMonthlyIncomePredictionIntervals: [CraPredictionInterval], employer: CraBankIncomeEmployer? = nil, historicalSummary: [CraBankIncomeHistoricalSummary]? = nil) {
        self.incomeSourceId = incomeSourceId
        self.incomeDescription = incomeDescription
        self.incomeCategory = incomeCategory
        self.startDate = startDate
        self.endDate = endDate
        self.payFrequency = payFrequency
        self.totalAmount = totalAmount
        self.isoCurrencyCode = isoCurrencyCode
        self.unofficialCurrencyCode = unofficialCurrencyCode
        self.transactionCount = transactionCount
        self.nextPaymentDate = nextPaymentDate
        self.historicalAverageMonthlyGrossIncome = historicalAverageMonthlyGrossIncome
        self.historicalAverageMonthlyIncome = historicalAverageMonthlyIncome
        self.forecastedAverageMonthlyIncome = forecastedAverageMonthlyIncome
        self.forecastedAverageMonthlyIncomePredictionIntervals = forecastedAverageMonthlyIncomePredictionIntervals
        self.employer = employer
        self.historicalSummary = historicalSummary
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case incomeSourceId = "income_source_id"
        case incomeDescription = "income_description"
        case incomeCategory = "income_category"
        case startDate = "start_date"
        case endDate = "end_date"
        case payFrequency = "pay_frequency"
        case totalAmount = "total_amount"
        case isoCurrencyCode = "iso_currency_code"
        case unofficialCurrencyCode = "unofficial_currency_code"
        case transactionCount = "transaction_count"
        case nextPaymentDate = "next_payment_date"
        case historicalAverageMonthlyGrossIncome = "historical_average_monthly_gross_income"
        case historicalAverageMonthlyIncome = "historical_average_monthly_income"
        case forecastedAverageMonthlyIncome = "forecasted_average_monthly_income"
        case forecastedAverageMonthlyIncomePredictionIntervals = "forecasted_average_monthly_income_prediction_intervals"
        case employer
        case historicalSummary = "historical_summary"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(incomeSourceId, forKey: .incomeSourceId)
        try container.encodeIfPresent(incomeDescription, forKey: .incomeDescription)
        try container.encodeIfPresent(incomeCategory, forKey: .incomeCategory)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encodeIfPresent(endDate, forKey: .endDate)
        try container.encodeIfPresent(payFrequency, forKey: .payFrequency)
        try container.encodeIfPresent(totalAmount, forKey: .totalAmount)
        try container.encodeIfPresent(isoCurrencyCode, forKey: .isoCurrencyCode)
        try container.encodeIfPresent(unofficialCurrencyCode, forKey: .unofficialCurrencyCode)
        try container.encodeIfPresent(transactionCount, forKey: .transactionCount)
        try container.encodeIfPresent(nextPaymentDate, forKey: .nextPaymentDate)
        try container.encodeIfPresent(historicalAverageMonthlyGrossIncome, forKey: .historicalAverageMonthlyGrossIncome)
        try container.encodeIfPresent(historicalAverageMonthlyIncome, forKey: .historicalAverageMonthlyIncome)
        try container.encodeIfPresent(forecastedAverageMonthlyIncome, forKey: .forecastedAverageMonthlyIncome)
        try container.encode(forecastedAverageMonthlyIncomePredictionIntervals, forKey: .forecastedAverageMonthlyIncomePredictionIntervals)
        try container.encodeIfPresent(employer, forKey: .employer)
        try container.encodeIfPresent(historicalSummary, forKey: .historicalSummary)
    }
}

