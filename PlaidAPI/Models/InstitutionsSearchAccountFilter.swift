//
// InstitutionsSearchAccountFilter.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An account filter to apply to institutions search requests */
public struct InstitutionsSearchAccountFilter: Codable, JSONEncodable, Hashable {

    public var loan: [AccountSubtype]?
    public var depository: [AccountSubtype]?
    public var credit: [AccountSubtype]?
    public var investment: [AccountSubtype]?

    public init(loan: [AccountSubtype]? = nil, depository: [AccountSubtype]? = nil, credit: [AccountSubtype]? = nil, investment: [AccountSubtype]? = nil) {
        self.loan = loan
        self.depository = depository
        self.credit = credit
        self.investment = investment
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case loan
        case depository
        case credit
        case investment
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(loan, forKey: .loan)
        try container.encodeIfPresent(depository, forKey: .depository)
        try container.encodeIfPresent(credit, forKey: .credit)
        try container.encodeIfPresent(investment, forKey: .investment)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        loan = try container.decodeIfPresent([AccountSubtype].self, forKey: .loan)
        depository = try container.decodeIfPresent([AccountSubtype].self, forKey: .depository)
        credit = try container.decodeIfPresent([AccountSubtype].self, forKey: .credit)
        investment = try container.decodeIfPresent([AccountSubtype].self, forKey: .investment)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("loan")
        nonAdditionalPropertyKeys.insert("depository")
        nonAdditionalPropertyKeys.insert("credit")
        nonAdditionalPropertyKeys.insert("investment")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

