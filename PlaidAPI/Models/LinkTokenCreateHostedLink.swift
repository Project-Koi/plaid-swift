//
// LinkTokenCreateHostedLink.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Configuration parameters for Hosted Link. To request access to Hosted Link, contact your account manager. */
public struct LinkTokenCreateHostedLink: Codable, JSONEncodable, Hashable {

    public var deliveryMethod: HostedLinkDeliveryMethod?
    /** URI that Hosted Link will redirect to upon completion of the Link flow. This will only occur in Hosted Link sessions, not in other implementation methods.  */
    public var completionRedirectUri: String?
    /** How many seconds the link will be valid for. Must be positive. Cannot be longer than 21 days. The default lifetime is 4 hours.  */
    public var urlLifetimeSeconds: Int?
    /** This indicates whether the client is opening hosted Link in a mobile app in an out of process web view (OOPWV) (i.e., an `AsWebAuthenticationSession` / `SFSafariViewController` or Android Custom Tab).  */
    public var isMobileApp: Bool? = false

    public init(deliveryMethod: HostedLinkDeliveryMethod? = nil, completionRedirectUri: String? = nil, urlLifetimeSeconds: Int? = nil, isMobileApp: Bool? = false) {
        self.deliveryMethod = deliveryMethod
        self.completionRedirectUri = completionRedirectUri
        self.urlLifetimeSeconds = urlLifetimeSeconds
        self.isMobileApp = isMobileApp
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case deliveryMethod = "delivery_method"
        case completionRedirectUri = "completion_redirect_uri"
        case urlLifetimeSeconds = "url_lifetime_seconds"
        case isMobileApp = "is_mobile_app"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(deliveryMethod, forKey: .deliveryMethod)
        try container.encodeIfPresent(completionRedirectUri, forKey: .completionRedirectUri)
        try container.encodeIfPresent(urlLifetimeSeconds, forKey: .urlLifetimeSeconds)
        try container.encodeIfPresent(isMobileApp, forKey: .isMobileApp)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        deliveryMethod = try container.decodeIfPresent(HostedLinkDeliveryMethod.self, forKey: .deliveryMethod)
        completionRedirectUri = try container.decodeIfPresent(String.self, forKey: .completionRedirectUri)
        urlLifetimeSeconds = try container.decodeIfPresent(Int.self, forKey: .urlLifetimeSeconds)
        isMobileApp = try container.decodeIfPresent(Bool.self, forKey: .isMobileApp)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("delivery_method")
        nonAdditionalPropertyKeys.insert("completion_redirect_uri")
        nonAdditionalPropertyKeys.insert("url_lifetime_seconds")
        nonAdditionalPropertyKeys.insert("is_mobile_app")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

