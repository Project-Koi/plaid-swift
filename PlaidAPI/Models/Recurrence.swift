//
// Recurrence.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Insights relating to expenses and deposits that are predicted to occur on a scheduled basis, such as biweekly, monthly, or annually.  Common examples include loan payments, bill payments, subscriptions, and payroll income.  This is a beta field, available to all users. */
public struct Recurrence: Codable, JSONEncodable, Hashable {

    /** Whether or not the transaction is periodically recurring. */
    public var isRecurring: Bool?
    public var frequency: RecurringFrequency?

    public init(isRecurring: Bool? = nil, frequency: RecurringFrequency? = nil) {
        self.isRecurring = isRecurring
        self.frequency = frequency
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case isRecurring = "is_recurring"
        case frequency
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(isRecurring, forKey: .isRecurring)
        try container.encodeIfPresent(frequency, forKey: .frequency)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        isRecurring = try container.decodeIfPresent(Bool.self, forKey: .isRecurring)
        frequency = try container.decodeIfPresent(RecurringFrequency.self, forKey: .frequency)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("is_recurring")
        nonAdditionalPropertyKeys.insert("frequency")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

