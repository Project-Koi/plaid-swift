//
// LinkCallbackMetadata.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Information related to the callback from the Hosted Link session. */
public struct LinkCallbackMetadata: Codable, JSONEncodable, Hashable {

    public var callbackType: LinkDeliveryWebhookCallbackType?
    public var eventName: LinkEventName?
    /** Indicates where in the flow the Link user exited */
    public var status: String?
    /** A unique identifier associated with a user's actions and events through the Link flow. Include this identifier when opening a support ticket for faster turnaround. */
    public var linkSessionId: String?
    /** The request ID for the last request made by Link. This can be shared with Plaid Support to expedite investigation. */
    public var requestId: String?
    public var institution: LinkDeliveryInstitution?
    /** A list of accounts attached to the connected Item. If Account Select is enabled via the developer dashboard, accounts will only include selected accounts. */
    public var accounts: [LinkDeliveryAccount]?

    public init(callbackType: LinkDeliveryWebhookCallbackType? = nil, eventName: LinkEventName? = nil, status: String? = nil, linkSessionId: String? = nil, requestId: String? = nil, institution: LinkDeliveryInstitution? = nil, accounts: [LinkDeliveryAccount]? = nil) {
        self.callbackType = callbackType
        self.eventName = eventName
        self.status = status
        self.linkSessionId = linkSessionId
        self.requestId = requestId
        self.institution = institution
        self.accounts = accounts
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case callbackType = "callback_type"
        case eventName = "event_name"
        case status
        case linkSessionId = "link_session_id"
        case requestId = "request_id"
        case institution
        case accounts
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(callbackType, forKey: .callbackType)
        try container.encodeIfPresent(eventName, forKey: .eventName)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(linkSessionId, forKey: .linkSessionId)
        try container.encodeIfPresent(requestId, forKey: .requestId)
        try container.encodeIfPresent(institution, forKey: .institution)
        try container.encodeIfPresent(accounts, forKey: .accounts)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        callbackType = try container.decodeIfPresent(LinkDeliveryWebhookCallbackType.self, forKey: .callbackType)
        eventName = try container.decodeIfPresent(LinkEventName.self, forKey: .eventName)
        status = try container.decodeIfPresent(String.self, forKey: .status)
        linkSessionId = try container.decodeIfPresent(String.self, forKey: .linkSessionId)
        requestId = try container.decodeIfPresent(String.self, forKey: .requestId)
        institution = try container.decodeIfPresent(LinkDeliveryInstitution.self, forKey: .institution)
        accounts = try container.decodeIfPresent([LinkDeliveryAccount].self, forKey: .accounts)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("callback_type")
        nonAdditionalPropertyKeys.insert("event_name")
        nonAdditionalPropertyKeys.insert("status")
        nonAdditionalPropertyKeys.insert("link_session_id")
        nonAdditionalPropertyKeys.insert("request_id")
        nonAdditionalPropertyKeys.insert("institution")
        nonAdditionalPropertyKeys.insert("accounts")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

