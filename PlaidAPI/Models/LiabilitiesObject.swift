//
// LiabilitiesObject.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An object containing liability accounts */
public struct LiabilitiesObject: Codable, JSONEncodable, Hashable {

    /** The credit accounts returned. */
    public var credit: [CreditCardLiability]?
    /** The mortgage accounts returned. */
    public var mortgage: [MortgageLiability]?
    /** The student loan accounts returned. */
    public var student: [StudentLoan]?

    public init(credit: [CreditCardLiability]?, mortgage: [MortgageLiability]?, student: [StudentLoan]?) {
        self.credit = credit
        self.mortgage = mortgage
        self.student = student
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case credit
        case mortgage
        case student
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(credit, forKey: .credit)
        try container.encode(mortgage, forKey: .mortgage)
        try container.encode(student, forKey: .student)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        credit = try container.decodeIfPresent([CreditCardLiability].self, forKey: .credit)
        mortgage = try container.decodeIfPresent([MortgageLiability].self, forKey: .mortgage)
        student = try container.decodeIfPresent([StudentLoan].self, forKey: .student)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("credit")
        nonAdditionalPropertyKeys.insert("mortgage")
        nonAdditionalPropertyKeys.insert("student")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

