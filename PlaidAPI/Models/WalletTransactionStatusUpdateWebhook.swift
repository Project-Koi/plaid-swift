//
// WalletTransactionStatusUpdateWebhook.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Fired when the status of a wallet transaction has changed. */
public struct WalletTransactionStatusUpdateWebhook: Codable, JSONEncodable, Hashable {

    /** `WALLET` */
    public var webhookType: String
    /** `WALLET_TRANSACTION_STATUS_UPDATE` */
    public var webhookCode: String
    /** The `transaction_id` for the wallet transaction being updated */
    public var transactionId: String
    /** The `payment_id` associated with the transaction. This will be present in case of `REFUND` and `PIS_PAY_IN`. */
    public var paymentId: String?
    /** The EMI (E-Money Institution) wallet that this payment is associated with. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests. */
    public var walletId: String?
    public var newStatus: WalletTransactionStatus
    public var oldStatus: WalletTransactionStatus
    /** The timestamp of the update, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `\"2017-09-14T14:42:19.350Z\"` */
    public var timestamp: Date
    public var environment: WebhookEnvironmentValues

    public init(webhookType: String, webhookCode: String, transactionId: String, paymentId: String? = nil, walletId: String? = nil, newStatus: WalletTransactionStatus, oldStatus: WalletTransactionStatus, timestamp: Date, environment: WebhookEnvironmentValues) {
        self.webhookType = webhookType
        self.webhookCode = webhookCode
        self.transactionId = transactionId
        self.paymentId = paymentId
        self.walletId = walletId
        self.newStatus = newStatus
        self.oldStatus = oldStatus
        self.timestamp = timestamp
        self.environment = environment
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case webhookType = "webhook_type"
        case webhookCode = "webhook_code"
        case transactionId = "transaction_id"
        case paymentId = "payment_id"
        case walletId = "wallet_id"
        case newStatus = "new_status"
        case oldStatus = "old_status"
        case timestamp
        case environment
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(webhookType, forKey: .webhookType)
        try container.encode(webhookCode, forKey: .webhookCode)
        try container.encode(transactionId, forKey: .transactionId)
        try container.encodeIfPresent(paymentId, forKey: .paymentId)
        try container.encodeIfPresent(walletId, forKey: .walletId)
        try container.encode(newStatus, forKey: .newStatus)
        try container.encode(oldStatus, forKey: .oldStatus)
        try container.encode(timestamp, forKey: .timestamp)
        try container.encode(environment, forKey: .environment)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        webhookType = try container.decode(String.self, forKey: .webhookType)
        webhookCode = try container.decode(String.self, forKey: .webhookCode)
        transactionId = try container.decode(String.self, forKey: .transactionId)
        paymentId = try container.decodeIfPresent(String.self, forKey: .paymentId)
        walletId = try container.decodeIfPresent(String.self, forKey: .walletId)
        newStatus = try container.decode(WalletTransactionStatus.self, forKey: .newStatus)
        oldStatus = try container.decode(WalletTransactionStatus.self, forKey: .oldStatus)
        timestamp = try container.decode(Date.self, forKey: .timestamp)
        environment = try container.decode(WebhookEnvironmentValues.self, forKey: .environment)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("webhook_type")
        nonAdditionalPropertyKeys.insert("webhook_code")
        nonAdditionalPropertyKeys.insert("transaction_id")
        nonAdditionalPropertyKeys.insert("payment_id")
        nonAdditionalPropertyKeys.insert("wallet_id")
        nonAdditionalPropertyKeys.insert("new_status")
        nonAdditionalPropertyKeys.insert("old_status")
        nonAdditionalPropertyKeys.insert("timestamp")
        nonAdditionalPropertyKeys.insert("environment")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

