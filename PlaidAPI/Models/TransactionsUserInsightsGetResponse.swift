//
// TransactionsUserInsightsGetResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** TransactionsUserInsightsGetResponse defines the response schema for &#x60;/beta/transactions/user_insights/v1/get&#x60;. */
public struct TransactionsUserInsightsGetResponse: Codable, JSONEncodable, Hashable {

    public var userDataOverview: UserDataOverview
    public var counterpartyInsights: CounterpartyInsights?
    public var categoryInsights: CategoryInsights?
    public var recurringTransactions: RecurringTransactions?

    public init(userDataOverview: UserDataOverview, counterpartyInsights: CounterpartyInsights? = nil, categoryInsights: CategoryInsights? = nil, recurringTransactions: RecurringTransactions? = nil) {
        self.userDataOverview = userDataOverview
        self.counterpartyInsights = counterpartyInsights
        self.categoryInsights = categoryInsights
        self.recurringTransactions = recurringTransactions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case userDataOverview = "user_data_overview"
        case counterpartyInsights = "counterparty_insights"
        case categoryInsights = "category_insights"
        case recurringTransactions = "recurring_transactions"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(userDataOverview, forKey: .userDataOverview)
        try container.encodeIfPresent(counterpartyInsights, forKey: .counterpartyInsights)
        try container.encodeIfPresent(categoryInsights, forKey: .categoryInsights)
        try container.encodeIfPresent(recurringTransactions, forKey: .recurringTransactions)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        userDataOverview = try container.decode(UserDataOverview.self, forKey: .userDataOverview)
        counterpartyInsights = try container.decodeIfPresent(CounterpartyInsights.self, forKey: .counterpartyInsights)
        categoryInsights = try container.decodeIfPresent(CategoryInsights.self, forKey: .categoryInsights)
        recurringTransactions = try container.decodeIfPresent(RecurringTransactions.self, forKey: .recurringTransactions)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("user_data_overview")
        nonAdditionalPropertyKeys.insert("counterparty_insights")
        nonAdditionalPropertyKeys.insert("category_insights")
        nonAdditionalPropertyKeys.insert("recurring_transactions")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

