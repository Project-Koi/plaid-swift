//
// ProductAccess.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The product access being requested. Used to or disallow product access across all accounts. If unset, defaults to all products allowed. */
public struct ProductAccess: Codable, JSONEncodable, Hashable {

    /** Allow access to statements. Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
    public var statements: Bool? = true
    /** Allow access to the Identity product (name, email, phone, address). Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
    public var identity: Bool? = true
    /** Allow access to account number details. Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
    public var auth: Bool? = true
    /** Allow access to transaction details. Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
    public var transactions: Bool? = true
    /** Allow access to \"accounts_details_transactions\". Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
    public var accountsDetailsTransactions: Bool? = true
    /** Allow access to \"accounts_routing_number\". Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
    public var accountsRoutingNumber: Bool? = true
    /** Allow access to \"accounts_statements\". Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
    public var accountsStatements: Bool? = true
    /** Allow access to \"accounts_tax_statements\". Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
    public var accountsTaxStatements: Bool? = true
    /** Allow access to \"customers_profiles\". Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
    public var customersProfiles: Bool? = true

    public init(statements: Bool? = true, identity: Bool? = true, auth: Bool? = true, transactions: Bool? = true, accountsDetailsTransactions: Bool? = true, accountsRoutingNumber: Bool? = true, accountsStatements: Bool? = true, accountsTaxStatements: Bool? = true, customersProfiles: Bool? = true) {
        self.statements = statements
        self.identity = identity
        self.auth = auth
        self.transactions = transactions
        self.accountsDetailsTransactions = accountsDetailsTransactions
        self.accountsRoutingNumber = accountsRoutingNumber
        self.accountsStatements = accountsStatements
        self.accountsTaxStatements = accountsTaxStatements
        self.customersProfiles = customersProfiles
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case statements
        case identity
        case auth
        case transactions
        case accountsDetailsTransactions = "accounts_details_transactions"
        case accountsRoutingNumber = "accounts_routing_number"
        case accountsStatements = "accounts_statements"
        case accountsTaxStatements = "accounts_tax_statements"
        case customersProfiles = "customers_profiles"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(statements, forKey: .statements)
        try container.encodeIfPresent(identity, forKey: .identity)
        try container.encodeIfPresent(auth, forKey: .auth)
        try container.encodeIfPresent(transactions, forKey: .transactions)
        try container.encodeIfPresent(accountsDetailsTransactions, forKey: .accountsDetailsTransactions)
        try container.encodeIfPresent(accountsRoutingNumber, forKey: .accountsRoutingNumber)
        try container.encodeIfPresent(accountsStatements, forKey: .accountsStatements)
        try container.encodeIfPresent(accountsTaxStatements, forKey: .accountsTaxStatements)
        try container.encodeIfPresent(customersProfiles, forKey: .customersProfiles)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        statements = try container.decodeIfPresent(Bool.self, forKey: .statements)
        identity = try container.decodeIfPresent(Bool.self, forKey: .identity)
        auth = try container.decodeIfPresent(Bool.self, forKey: .auth)
        transactions = try container.decodeIfPresent(Bool.self, forKey: .transactions)
        accountsDetailsTransactions = try container.decodeIfPresent(Bool.self, forKey: .accountsDetailsTransactions)
        accountsRoutingNumber = try container.decodeIfPresent(Bool.self, forKey: .accountsRoutingNumber)
        accountsStatements = try container.decodeIfPresent(Bool.self, forKey: .accountsStatements)
        accountsTaxStatements = try container.decodeIfPresent(Bool.self, forKey: .accountsTaxStatements)
        customersProfiles = try container.decodeIfPresent(Bool.self, forKey: .customersProfiles)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("statements")
        nonAdditionalPropertyKeys.insert("identity")
        nonAdditionalPropertyKeys.insert("auth")
        nonAdditionalPropertyKeys.insert("transactions")
        nonAdditionalPropertyKeys.insert("accounts_details_transactions")
        nonAdditionalPropertyKeys.insert("accounts_routing_number")
        nonAdditionalPropertyKeys.insert("accounts_statements")
        nonAdditionalPropertyKeys.insert("accounts_tax_statements")
        nonAdditionalPropertyKeys.insert("customers_profiles")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

