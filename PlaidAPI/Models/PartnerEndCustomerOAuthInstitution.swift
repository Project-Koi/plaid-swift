//
// PartnerEndCustomerOAuthInstitution.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The OAuth registration information for an institution. */
public struct PartnerEndCustomerOAuthInstitution: Codable, JSONEncodable, Hashable {

    public var name: String?
    public var institutionId: String?
    public var environments: PartnerEndCustomerOAuthInstitutionEnvironments?
    /** The date on which the end customer's application was approved by the institution, or an empty string if their application has not yet been approved. */
    public var productionEnablementDate: String?
    /** The date on which non-OAuth Item adds will no longer be supported for this institution, or an empty string if no such date has been set by the institution. */
    public var classicDisablementDate: String?

    public init(name: String? = nil, institutionId: String? = nil, environments: PartnerEndCustomerOAuthInstitutionEnvironments? = nil, productionEnablementDate: String? = nil, classicDisablementDate: String? = nil) {
        self.name = name
        self.institutionId = institutionId
        self.environments = environments
        self.productionEnablementDate = productionEnablementDate
        self.classicDisablementDate = classicDisablementDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case institutionId = "institution_id"
        case environments
        case productionEnablementDate = "production_enablement_date"
        case classicDisablementDate = "classic_disablement_date"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(institutionId, forKey: .institutionId)
        try container.encodeIfPresent(environments, forKey: .environments)
        try container.encodeIfPresent(productionEnablementDate, forKey: .productionEnablementDate)
        try container.encodeIfPresent(classicDisablementDate, forKey: .classicDisablementDate)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        name = try container.decodeIfPresent(String.self, forKey: .name)
        institutionId = try container.decodeIfPresent(String.self, forKey: .institutionId)
        environments = try container.decodeIfPresent(PartnerEndCustomerOAuthInstitutionEnvironments.self, forKey: .environments)
        productionEnablementDate = try container.decodeIfPresent(String.self, forKey: .productionEnablementDate)
        classicDisablementDate = try container.decodeIfPresent(String.self, forKey: .classicDisablementDate)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("name")
        nonAdditionalPropertyKeys.insert("institution_id")
        nonAdditionalPropertyKeys.insert("environments")
        nonAdditionalPropertyKeys.insert("production_enablement_date")
        nonAdditionalPropertyKeys.insert("classic_disablement_date")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

