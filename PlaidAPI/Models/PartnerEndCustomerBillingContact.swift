//
// PartnerEndCustomerBillingContact.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The billing contact for the end customer. Defaults to partner&#39;s billing contact if omitted. */
public struct PartnerEndCustomerBillingContact: Codable, JSONEncodable, Hashable {

    public var givenName: String?
    public var familyName: String?
    public var email: String?

    public init(givenName: String? = nil, familyName: String? = nil, email: String? = nil) {
        self.givenName = givenName
        self.familyName = familyName
        self.email = email
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case givenName = "given_name"
        case familyName = "family_name"
        case email
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(givenName, forKey: .givenName)
        try container.encodeIfPresent(familyName, forKey: .familyName)
        try container.encodeIfPresent(email, forKey: .email)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        givenName = try container.decodeIfPresent(String.self, forKey: .givenName)
        familyName = try container.decodeIfPresent(String.self, forKey: .familyName)
        email = try container.decodeIfPresent(String.self, forKey: .email)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("given_name")
        nonAdditionalPropertyKeys.insert("family_name")
        nonAdditionalPropertyKeys.insert("email")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

