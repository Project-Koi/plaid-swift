//
// PaymentInitiationConsentPaymentExecuteRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** PaymentInitiationConsentPaymentExecuteRequest defines the request schema for &#x60;/payment_initiation/consent/payment/execute&#x60; */
public struct PaymentInitiationConsentPaymentExecuteRequest: Codable, JSONEncodable, Hashable {

    static let idempotencyKeyRule = StringRule(minLength: 1, maxLength: 128, pattern: nil)
    static let referenceRule = StringRule(minLength: 1, maxLength: 18, pattern: nil)
    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** The consent ID. */
    public var consentId: String
    public var amount: PaymentAmount
    /** A random key provided by the client, per unique consent payment. Maximum of 128 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. If a request to execute a consent payment fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single payment is created. If the request was successfully processed, it will prevent any payment that uses the same idempotency key, and was received within 24 hours of the first request, from being processed. */
    public var idempotencyKey: String
    /** A reference for the payment. This must be an alphanumeric string with at most 18 characters and must not contain any special characters (since not all institutions support them). If not provided, Plaid will automatically fall back to the reference from consent. In order to track settlement via Payment Confirmation, each payment must have a unique reference. If the reference provided through the API is not unique, Plaid will adjust it. Some institutions may limit the reference to less than 18 characters. If necessary, Plaid will adjust the reference by truncating it to fit the institution's requirements. Both the originally provided and automatically adjusted references (if any) can be found in the `reference` and `adjusted_reference` fields, respectively. */
    public var reference: String?
    public var scope: PaymentInitiationConsentScope?

    public init(clientId: String? = nil, secret: String? = nil, consentId: String, amount: PaymentAmount, idempotencyKey: String, reference: String? = nil, scope: PaymentInitiationConsentScope? = nil) {
        self.clientId = clientId
        self.secret = secret
        self.consentId = consentId
        self.amount = amount
        self.idempotencyKey = idempotencyKey
        self.reference = reference
        self.scope = scope
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case consentId = "consent_id"
        case amount
        case idempotencyKey = "idempotency_key"
        case reference
        case scope
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encode(consentId, forKey: .consentId)
        try container.encode(amount, forKey: .amount)
        try container.encode(idempotencyKey, forKey: .idempotencyKey)
        try container.encodeIfPresent(reference, forKey: .reference)
        try container.encodeIfPresent(scope, forKey: .scope)
    }
}

