//
// TransferOriginatorDiligence.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The diligence information for the originator. */
public struct TransferOriginatorDiligence: Codable, JSONEncodable, Hashable {

    static let taxIdRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let naicsCodeRule = StringRule(minLength: 6, maxLength: 6, pattern: nil)
    /** The business name of the originator. */
    public var dba: String
    /** The tax ID of the originator. */
    public var taxId: String
    public var creditUsageConfiguration: TransferCreditUsageConfiguration?
    public var debitUsageConfiguration: TransferDebitUsageConfiguration?
    public var address: TransferOriginatorAddress
    /** The website of the originator. */
    public var website: String
    /** The NAICS code of the originator. */
    public var naicsCode: String
    public var fundingAccount: TransferFundingAccount

    public init(dba: String, taxId: String, creditUsageConfiguration: TransferCreditUsageConfiguration? = nil, debitUsageConfiguration: TransferDebitUsageConfiguration? = nil, address: TransferOriginatorAddress, website: String, naicsCode: String, fundingAccount: TransferFundingAccount) {
        self.dba = dba
        self.taxId = taxId
        self.creditUsageConfiguration = creditUsageConfiguration
        self.debitUsageConfiguration = debitUsageConfiguration
        self.address = address
        self.website = website
        self.naicsCode = naicsCode
        self.fundingAccount = fundingAccount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case dba
        case taxId = "tax_id"
        case creditUsageConfiguration = "credit_usage_configuration"
        case debitUsageConfiguration = "debit_usage_configuration"
        case address
        case website
        case naicsCode = "naics_code"
        case fundingAccount = "funding_account"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(dba, forKey: .dba)
        try container.encode(taxId, forKey: .taxId)
        try container.encodeIfPresent(creditUsageConfiguration, forKey: .creditUsageConfiguration)
        try container.encodeIfPresent(debitUsageConfiguration, forKey: .debitUsageConfiguration)
        try container.encode(address, forKey: .address)
        try container.encode(website, forKey: .website)
        try container.encode(naicsCode, forKey: .naicsCode)
        try container.encode(fundingAccount, forKey: .fundingAccount)
    }
}

