//
// LinkSessionExit.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An object representing an [onExit](https://plaid.com/docs/link/web/#onexit) callback from Link. Note the &#x60;exit&#x60; field on the &#x60;/link/token/get&#x60; response is in beta and may not be populated. */
public struct LinkSessionExit: Codable, JSONEncodable, Hashable {

    public var error: PlaidError?
    public var metadata: LinkSessionExitMetadata?

    public init(error: PlaidError?, metadata: LinkSessionExitMetadata?) {
        self.error = error
        self.metadata = metadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case error
        case metadata
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(error, forKey: .error)
        try container.encode(metadata, forKey: .metadata)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        error = try container.decodeIfPresent(PlaidError.self, forKey: .error)
        metadata = try container.decodeIfPresent(LinkSessionExitMetadata.self, forKey: .metadata)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("error")
        nonAdditionalPropertyKeys.insert("metadata")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

