//
// PaymentInitiationPaymentCreateRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** PaymentInitiationPaymentCreateRequest defines the request schema for &#x60;/payment_initiation/payment/create&#x60; */
public struct PaymentInitiationPaymentCreateRequest: Codable, JSONEncodable, Hashable {

    static let referenceRule = StringRule(minLength: 1, maxLength: 18, pattern: nil)
    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** The ID of the recipient the payment is for. */
    public var recipientId: String
    /** A reference for the payment. This must be an alphanumeric string with at most 18 characters and must not contain any special characters (since not all institutions support them). In order to track settlement via Payment Confirmation, each payment must have a unique reference. If the reference provided through the API is not unique, Plaid will adjust it. Some institutions may limit the reference to less than 18 characters. If necessary, Plaid will adjust the reference by truncating it to fit the institution's requirements. Both the originally provided and automatically adjusted references (if any) can be found in the `reference` and `adjusted_reference` fields, respectively. */
    public var reference: String
    public var amount: PaymentAmount
    public var schedule: ExternalPaymentScheduleRequest?
    public var options: ExternalPaymentOptions?

    public init(clientId: String? = nil, secret: String? = nil, recipientId: String, reference: String, amount: PaymentAmount, schedule: ExternalPaymentScheduleRequest? = nil, options: ExternalPaymentOptions? = nil) {
        self.clientId = clientId
        self.secret = secret
        self.recipientId = recipientId
        self.reference = reference
        self.amount = amount
        self.schedule = schedule
        self.options = options
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case recipientId = "recipient_id"
        case reference
        case amount
        case schedule
        case options
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encode(recipientId, forKey: .recipientId)
        try container.encode(reference, forKey: .reference)
        try container.encode(amount, forKey: .amount)
        try container.encodeIfPresent(schedule, forKey: .schedule)
        try container.encodeIfPresent(options, forKey: .options)
    }
}

