//
// Credit1099.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An object representing an end user&#39;s 1099 tax form */
public struct Credit1099: Codable, JSONEncodable, Hashable {

    /** An identifier of the document referenced by the document metadata. */
    public var documentId: String?
    public var documentMetadata: CreditDocumentMetadata?
    public var form1099Type: Form1099Type?
    public var recipient: Credit1099Recipient?
    public var payer: Credit1099Payer?
    public var filer: Credit1099Filer?
    /** Tax year of the tax form. */
    public var taxYear: String?
    /** Amount in rent by payer. */
    public var rents: Double?
    /** Amount in royalties by payer. */
    public var royalties: Double?
    /** Amount in other income by payer. */
    public var otherIncome: Double?
    /** Amount of federal income tax withheld from payer. */
    public var federalIncomeTaxWithheld: Double?
    /** Amount of fishing boat proceeds from payer. */
    public var fishingBoatProceeds: Double?
    /** Amount of medical and healthcare payments from payer. */
    public var medicalAndHealthcarePayments: Double?
    /** Amount of nonemployee compensation from payer. */
    public var nonemployeeCompensation: Double?
    /** Amount of substitute payments made by payer. */
    public var substitutePaymentsInLieuOfDividendsOrInterest: Double?
    /** Whether or not payer made direct sales over $5000 of consumer products. */
    public var payerMadeDirectSalesOf5000OrMoreOfConsumerProductsToBuyer: String?
    /** Amount of crop insurance proceeds. */
    public var cropInsuranceProceeds: Double?
    /** Amount of golden parachute payments made by payer. */
    public var excessGoldenParachutePayments: Double?
    /** Amount of gross proceeds paid to an attorney by payer. */
    public var grossProceedsPaidToAnAttorney: Double?
    /** Amount of 409A deferrals earned by payer. */
    public var section409aDeferrals: Double?
    /** Amount of 409A income earned by payer. */
    public var section409aIncome: Double?
    /** Amount of state tax withheld of payer for primary state. */
    public var stateTaxWithheld: Double?
    /** Amount of state tax withheld of payer for secondary state. */
    public var stateTaxWithheldLower: Double?
    /** Primary state ID. */
    public var payerStateNumber: String?
    /** Secondary state ID. */
    public var payerStateNumberLower: String?
    /** State income reported for primary state. */
    public var stateIncome: Double?
    /** State income reported for secondary state. */
    public var stateIncomeLower: Double?
    /** One of the values will be provided Payment card Third party network */
    public var transactionsReported: String?
    /** Name of the PSE (Payment Settlement Entity). */
    public var pseName: String?
    /** Formatted (XXX) XXX-XXXX. Phone number of the PSE (Payment Settlement Entity). */
    public var pseTelephoneNumber: String?
    /** Gross amount reported. */
    public var grossAmount: Double?
    /** Amount in card not present transactions. */
    public var cardNotPresentTransaction: Double?
    /** Merchant category of filer. */
    public var merchantCategoryCode: String?
    /** Number of payment transactions made. */
    public var numberOfPaymentTransactions: String?
    /** Amount reported for January. */
    public var januaryAmount: Double?
    /** Amount reported for February. */
    public var februaryAmount: Double?
    /** Amount reported for March. */
    public var marchAmount: Double?
    /** Amount reported for April. */
    public var aprilAmount: Double?
    /** Amount reported for May. */
    public var mayAmount: Double?
    /** Amount reported for June. */
    public var juneAmount: Double?
    /** Amount reported for July. */
    public var julyAmount: Double?
    /** Amount reported for August. */
    public var augustAmount: Double?
    /** Amount reported for September. */
    public var septemberAmount: Double?
    /** Amount reported for October. */
    public var octoberAmount: Double?
    /** Amount reported for November. */
    public var novemberAmount: Double?
    /** Amount reported for December. */
    public var decemberAmount: Double?
    /** Primary state of business. */
    public var primaryState: String?
    /** Secondary state of business. */
    public var secondaryState: String?
    /** Primary state ID. */
    public var primaryStateId: String?
    /** Secondary state ID. */
    public var secondaryStateId: String?
    /** State income tax reported for primary state. */
    public var primaryStateIncomeTax: Double?
    /** State income tax reported for secondary state. */
    public var secondaryStateIncomeTax: Double?

    public init(documentId: String?, documentMetadata: CreditDocumentMetadata? = nil, form1099Type: Form1099Type? = nil, recipient: Credit1099Recipient? = nil, payer: Credit1099Payer? = nil, filer: Credit1099Filer? = nil, taxYear: String? = nil, rents: Double? = nil, royalties: Double? = nil, otherIncome: Double? = nil, federalIncomeTaxWithheld: Double? = nil, fishingBoatProceeds: Double? = nil, medicalAndHealthcarePayments: Double? = nil, nonemployeeCompensation: Double? = nil, substitutePaymentsInLieuOfDividendsOrInterest: Double? = nil, payerMadeDirectSalesOf5000OrMoreOfConsumerProductsToBuyer: String? = nil, cropInsuranceProceeds: Double? = nil, excessGoldenParachutePayments: Double? = nil, grossProceedsPaidToAnAttorney: Double? = nil, section409aDeferrals: Double? = nil, section409aIncome: Double? = nil, stateTaxWithheld: Double? = nil, stateTaxWithheldLower: Double? = nil, payerStateNumber: String? = nil, payerStateNumberLower: String? = nil, stateIncome: Double? = nil, stateIncomeLower: Double? = nil, transactionsReported: String? = nil, pseName: String? = nil, pseTelephoneNumber: String? = nil, grossAmount: Double? = nil, cardNotPresentTransaction: Double? = nil, merchantCategoryCode: String? = nil, numberOfPaymentTransactions: String? = nil, januaryAmount: Double? = nil, februaryAmount: Double? = nil, marchAmount: Double? = nil, aprilAmount: Double? = nil, mayAmount: Double? = nil, juneAmount: Double? = nil, julyAmount: Double? = nil, augustAmount: Double? = nil, septemberAmount: Double? = nil, octoberAmount: Double? = nil, novemberAmount: Double? = nil, decemberAmount: Double? = nil, primaryState: String? = nil, secondaryState: String? = nil, primaryStateId: String? = nil, secondaryStateId: String? = nil, primaryStateIncomeTax: Double? = nil, secondaryStateIncomeTax: Double? = nil) {
        self.documentId = documentId
        self.documentMetadata = documentMetadata
        self.form1099Type = form1099Type
        self.recipient = recipient
        self.payer = payer
        self.filer = filer
        self.taxYear = taxYear
        self.rents = rents
        self.royalties = royalties
        self.otherIncome = otherIncome
        self.federalIncomeTaxWithheld = federalIncomeTaxWithheld
        self.fishingBoatProceeds = fishingBoatProceeds
        self.medicalAndHealthcarePayments = medicalAndHealthcarePayments
        self.nonemployeeCompensation = nonemployeeCompensation
        self.substitutePaymentsInLieuOfDividendsOrInterest = substitutePaymentsInLieuOfDividendsOrInterest
        self.payerMadeDirectSalesOf5000OrMoreOfConsumerProductsToBuyer = payerMadeDirectSalesOf5000OrMoreOfConsumerProductsToBuyer
        self.cropInsuranceProceeds = cropInsuranceProceeds
        self.excessGoldenParachutePayments = excessGoldenParachutePayments
        self.grossProceedsPaidToAnAttorney = grossProceedsPaidToAnAttorney
        self.section409aDeferrals = section409aDeferrals
        self.section409aIncome = section409aIncome
        self.stateTaxWithheld = stateTaxWithheld
        self.stateTaxWithheldLower = stateTaxWithheldLower
        self.payerStateNumber = payerStateNumber
        self.payerStateNumberLower = payerStateNumberLower
        self.stateIncome = stateIncome
        self.stateIncomeLower = stateIncomeLower
        self.transactionsReported = transactionsReported
        self.pseName = pseName
        self.pseTelephoneNumber = pseTelephoneNumber
        self.grossAmount = grossAmount
        self.cardNotPresentTransaction = cardNotPresentTransaction
        self.merchantCategoryCode = merchantCategoryCode
        self.numberOfPaymentTransactions = numberOfPaymentTransactions
        self.januaryAmount = januaryAmount
        self.februaryAmount = februaryAmount
        self.marchAmount = marchAmount
        self.aprilAmount = aprilAmount
        self.mayAmount = mayAmount
        self.juneAmount = juneAmount
        self.julyAmount = julyAmount
        self.augustAmount = augustAmount
        self.septemberAmount = septemberAmount
        self.octoberAmount = octoberAmount
        self.novemberAmount = novemberAmount
        self.decemberAmount = decemberAmount
        self.primaryState = primaryState
        self.secondaryState = secondaryState
        self.primaryStateId = primaryStateId
        self.secondaryStateId = secondaryStateId
        self.primaryStateIncomeTax = primaryStateIncomeTax
        self.secondaryStateIncomeTax = secondaryStateIncomeTax
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case documentId = "document_id"
        case documentMetadata = "document_metadata"
        case form1099Type = "form_1099_type"
        case recipient
        case payer
        case filer
        case taxYear = "tax_year"
        case rents
        case royalties
        case otherIncome = "other_income"
        case federalIncomeTaxWithheld = "federal_income_tax_withheld"
        case fishingBoatProceeds = "fishing_boat_proceeds"
        case medicalAndHealthcarePayments = "medical_and_healthcare_payments"
        case nonemployeeCompensation = "nonemployee_compensation"
        case substitutePaymentsInLieuOfDividendsOrInterest = "substitute_payments_in_lieu_of_dividends_or_interest"
        case payerMadeDirectSalesOf5000OrMoreOfConsumerProductsToBuyer = "payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer"
        case cropInsuranceProceeds = "crop_insurance_proceeds"
        case excessGoldenParachutePayments = "excess_golden_parachute_payments"
        case grossProceedsPaidToAnAttorney = "gross_proceeds_paid_to_an_attorney"
        case section409aDeferrals = "section_409a_deferrals"
        case section409aIncome = "section_409a_income"
        case stateTaxWithheld = "state_tax_withheld"
        case stateTaxWithheldLower = "state_tax_withheld_lower"
        case payerStateNumber = "payer_state_number"
        case payerStateNumberLower = "payer_state_number_lower"
        case stateIncome = "state_income"
        case stateIncomeLower = "state_income_lower"
        case transactionsReported = "transactions_reported"
        case pseName = "pse_name"
        case pseTelephoneNumber = "pse_telephone_number"
        case grossAmount = "gross_amount"
        case cardNotPresentTransaction = "card_not_present_transaction"
        case merchantCategoryCode = "merchant_category_code"
        case numberOfPaymentTransactions = "number_of_payment_transactions"
        case januaryAmount = "january_amount"
        case februaryAmount = "february_amount"
        case marchAmount = "march_amount"
        case aprilAmount = "april_amount"
        case mayAmount = "may_amount"
        case juneAmount = "june_amount"
        case julyAmount = "july_amount"
        case augustAmount = "august_amount"
        case septemberAmount = "september_amount"
        case octoberAmount = "october_amount"
        case novemberAmount = "november_amount"
        case decemberAmount = "december_amount"
        case primaryState = "primary_state"
        case secondaryState = "secondary_state"
        case primaryStateId = "primary_state_id"
        case secondaryStateId = "secondary_state_id"
        case primaryStateIncomeTax = "primary_state_income_tax"
        case secondaryStateIncomeTax = "secondary_state_income_tax"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(documentId, forKey: .documentId)
        try container.encodeIfPresent(documentMetadata, forKey: .documentMetadata)
        try container.encodeIfPresent(form1099Type, forKey: .form1099Type)
        try container.encodeIfPresent(recipient, forKey: .recipient)
        try container.encodeIfPresent(payer, forKey: .payer)
        try container.encodeIfPresent(filer, forKey: .filer)
        try container.encodeIfPresent(taxYear, forKey: .taxYear)
        try container.encodeIfPresent(rents, forKey: .rents)
        try container.encodeIfPresent(royalties, forKey: .royalties)
        try container.encodeIfPresent(otherIncome, forKey: .otherIncome)
        try container.encodeIfPresent(federalIncomeTaxWithheld, forKey: .federalIncomeTaxWithheld)
        try container.encodeIfPresent(fishingBoatProceeds, forKey: .fishingBoatProceeds)
        try container.encodeIfPresent(medicalAndHealthcarePayments, forKey: .medicalAndHealthcarePayments)
        try container.encodeIfPresent(nonemployeeCompensation, forKey: .nonemployeeCompensation)
        try container.encodeIfPresent(substitutePaymentsInLieuOfDividendsOrInterest, forKey: .substitutePaymentsInLieuOfDividendsOrInterest)
        try container.encodeIfPresent(payerMadeDirectSalesOf5000OrMoreOfConsumerProductsToBuyer, forKey: .payerMadeDirectSalesOf5000OrMoreOfConsumerProductsToBuyer)
        try container.encodeIfPresent(cropInsuranceProceeds, forKey: .cropInsuranceProceeds)
        try container.encodeIfPresent(excessGoldenParachutePayments, forKey: .excessGoldenParachutePayments)
        try container.encodeIfPresent(grossProceedsPaidToAnAttorney, forKey: .grossProceedsPaidToAnAttorney)
        try container.encodeIfPresent(section409aDeferrals, forKey: .section409aDeferrals)
        try container.encodeIfPresent(section409aIncome, forKey: .section409aIncome)
        try container.encodeIfPresent(stateTaxWithheld, forKey: .stateTaxWithheld)
        try container.encodeIfPresent(stateTaxWithheldLower, forKey: .stateTaxWithheldLower)
        try container.encodeIfPresent(payerStateNumber, forKey: .payerStateNumber)
        try container.encodeIfPresent(payerStateNumberLower, forKey: .payerStateNumberLower)
        try container.encodeIfPresent(stateIncome, forKey: .stateIncome)
        try container.encodeIfPresent(stateIncomeLower, forKey: .stateIncomeLower)
        try container.encodeIfPresent(transactionsReported, forKey: .transactionsReported)
        try container.encodeIfPresent(pseName, forKey: .pseName)
        try container.encodeIfPresent(pseTelephoneNumber, forKey: .pseTelephoneNumber)
        try container.encodeIfPresent(grossAmount, forKey: .grossAmount)
        try container.encodeIfPresent(cardNotPresentTransaction, forKey: .cardNotPresentTransaction)
        try container.encodeIfPresent(merchantCategoryCode, forKey: .merchantCategoryCode)
        try container.encodeIfPresent(numberOfPaymentTransactions, forKey: .numberOfPaymentTransactions)
        try container.encodeIfPresent(januaryAmount, forKey: .januaryAmount)
        try container.encodeIfPresent(februaryAmount, forKey: .februaryAmount)
        try container.encodeIfPresent(marchAmount, forKey: .marchAmount)
        try container.encodeIfPresent(aprilAmount, forKey: .aprilAmount)
        try container.encodeIfPresent(mayAmount, forKey: .mayAmount)
        try container.encodeIfPresent(juneAmount, forKey: .juneAmount)
        try container.encodeIfPresent(julyAmount, forKey: .julyAmount)
        try container.encodeIfPresent(augustAmount, forKey: .augustAmount)
        try container.encodeIfPresent(septemberAmount, forKey: .septemberAmount)
        try container.encodeIfPresent(octoberAmount, forKey: .octoberAmount)
        try container.encodeIfPresent(novemberAmount, forKey: .novemberAmount)
        try container.encodeIfPresent(decemberAmount, forKey: .decemberAmount)
        try container.encodeIfPresent(primaryState, forKey: .primaryState)
        try container.encodeIfPresent(secondaryState, forKey: .secondaryState)
        try container.encodeIfPresent(primaryStateId, forKey: .primaryStateId)
        try container.encodeIfPresent(secondaryStateId, forKey: .secondaryStateId)
        try container.encodeIfPresent(primaryStateIncomeTax, forKey: .primaryStateIncomeTax)
        try container.encodeIfPresent(secondaryStateIncomeTax, forKey: .secondaryStateIncomeTax)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        documentId = try container.decodeIfPresent(String.self, forKey: .documentId)
        documentMetadata = try container.decodeIfPresent(CreditDocumentMetadata.self, forKey: .documentMetadata)
        form1099Type = try container.decodeIfPresent(Form1099Type.self, forKey: .form1099Type)
        recipient = try container.decodeIfPresent(Credit1099Recipient.self, forKey: .recipient)
        payer = try container.decodeIfPresent(Credit1099Payer.self, forKey: .payer)
        filer = try container.decodeIfPresent(Credit1099Filer.self, forKey: .filer)
        taxYear = try container.decodeIfPresent(String.self, forKey: .taxYear)
        rents = try container.decodeIfPresent(Double.self, forKey: .rents)
        royalties = try container.decodeIfPresent(Double.self, forKey: .royalties)
        otherIncome = try container.decodeIfPresent(Double.self, forKey: .otherIncome)
        federalIncomeTaxWithheld = try container.decodeIfPresent(Double.self, forKey: .federalIncomeTaxWithheld)
        fishingBoatProceeds = try container.decodeIfPresent(Double.self, forKey: .fishingBoatProceeds)
        medicalAndHealthcarePayments = try container.decodeIfPresent(Double.self, forKey: .medicalAndHealthcarePayments)
        nonemployeeCompensation = try container.decodeIfPresent(Double.self, forKey: .nonemployeeCompensation)
        substitutePaymentsInLieuOfDividendsOrInterest = try container.decodeIfPresent(Double.self, forKey: .substitutePaymentsInLieuOfDividendsOrInterest)
        payerMadeDirectSalesOf5000OrMoreOfConsumerProductsToBuyer = try container.decodeIfPresent(String.self, forKey: .payerMadeDirectSalesOf5000OrMoreOfConsumerProductsToBuyer)
        cropInsuranceProceeds = try container.decodeIfPresent(Double.self, forKey: .cropInsuranceProceeds)
        excessGoldenParachutePayments = try container.decodeIfPresent(Double.self, forKey: .excessGoldenParachutePayments)
        grossProceedsPaidToAnAttorney = try container.decodeIfPresent(Double.self, forKey: .grossProceedsPaidToAnAttorney)
        section409aDeferrals = try container.decodeIfPresent(Double.self, forKey: .section409aDeferrals)
        section409aIncome = try container.decodeIfPresent(Double.self, forKey: .section409aIncome)
        stateTaxWithheld = try container.decodeIfPresent(Double.self, forKey: .stateTaxWithheld)
        stateTaxWithheldLower = try container.decodeIfPresent(Double.self, forKey: .stateTaxWithheldLower)
        payerStateNumber = try container.decodeIfPresent(String.self, forKey: .payerStateNumber)
        payerStateNumberLower = try container.decodeIfPresent(String.self, forKey: .payerStateNumberLower)
        stateIncome = try container.decodeIfPresent(Double.self, forKey: .stateIncome)
        stateIncomeLower = try container.decodeIfPresent(Double.self, forKey: .stateIncomeLower)
        transactionsReported = try container.decodeIfPresent(String.self, forKey: .transactionsReported)
        pseName = try container.decodeIfPresent(String.self, forKey: .pseName)
        pseTelephoneNumber = try container.decodeIfPresent(String.self, forKey: .pseTelephoneNumber)
        grossAmount = try container.decodeIfPresent(Double.self, forKey: .grossAmount)
        cardNotPresentTransaction = try container.decodeIfPresent(Double.self, forKey: .cardNotPresentTransaction)
        merchantCategoryCode = try container.decodeIfPresent(String.self, forKey: .merchantCategoryCode)
        numberOfPaymentTransactions = try container.decodeIfPresent(String.self, forKey: .numberOfPaymentTransactions)
        januaryAmount = try container.decodeIfPresent(Double.self, forKey: .januaryAmount)
        februaryAmount = try container.decodeIfPresent(Double.self, forKey: .februaryAmount)
        marchAmount = try container.decodeIfPresent(Double.self, forKey: .marchAmount)
        aprilAmount = try container.decodeIfPresent(Double.self, forKey: .aprilAmount)
        mayAmount = try container.decodeIfPresent(Double.self, forKey: .mayAmount)
        juneAmount = try container.decodeIfPresent(Double.self, forKey: .juneAmount)
        julyAmount = try container.decodeIfPresent(Double.self, forKey: .julyAmount)
        augustAmount = try container.decodeIfPresent(Double.self, forKey: .augustAmount)
        septemberAmount = try container.decodeIfPresent(Double.self, forKey: .septemberAmount)
        octoberAmount = try container.decodeIfPresent(Double.self, forKey: .octoberAmount)
        novemberAmount = try container.decodeIfPresent(Double.self, forKey: .novemberAmount)
        decemberAmount = try container.decodeIfPresent(Double.self, forKey: .decemberAmount)
        primaryState = try container.decodeIfPresent(String.self, forKey: .primaryState)
        secondaryState = try container.decodeIfPresent(String.self, forKey: .secondaryState)
        primaryStateId = try container.decodeIfPresent(String.self, forKey: .primaryStateId)
        secondaryStateId = try container.decodeIfPresent(String.self, forKey: .secondaryStateId)
        primaryStateIncomeTax = try container.decodeIfPresent(Double.self, forKey: .primaryStateIncomeTax)
        secondaryStateIncomeTax = try container.decodeIfPresent(Double.self, forKey: .secondaryStateIncomeTax)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("document_id")
        nonAdditionalPropertyKeys.insert("document_metadata")
        nonAdditionalPropertyKeys.insert("form_1099_type")
        nonAdditionalPropertyKeys.insert("recipient")
        nonAdditionalPropertyKeys.insert("payer")
        nonAdditionalPropertyKeys.insert("filer")
        nonAdditionalPropertyKeys.insert("tax_year")
        nonAdditionalPropertyKeys.insert("rents")
        nonAdditionalPropertyKeys.insert("royalties")
        nonAdditionalPropertyKeys.insert("other_income")
        nonAdditionalPropertyKeys.insert("federal_income_tax_withheld")
        nonAdditionalPropertyKeys.insert("fishing_boat_proceeds")
        nonAdditionalPropertyKeys.insert("medical_and_healthcare_payments")
        nonAdditionalPropertyKeys.insert("nonemployee_compensation")
        nonAdditionalPropertyKeys.insert("substitute_payments_in_lieu_of_dividends_or_interest")
        nonAdditionalPropertyKeys.insert("payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer")
        nonAdditionalPropertyKeys.insert("crop_insurance_proceeds")
        nonAdditionalPropertyKeys.insert("excess_golden_parachute_payments")
        nonAdditionalPropertyKeys.insert("gross_proceeds_paid_to_an_attorney")
        nonAdditionalPropertyKeys.insert("section_409a_deferrals")
        nonAdditionalPropertyKeys.insert("section_409a_income")
        nonAdditionalPropertyKeys.insert("state_tax_withheld")
        nonAdditionalPropertyKeys.insert("state_tax_withheld_lower")
        nonAdditionalPropertyKeys.insert("payer_state_number")
        nonAdditionalPropertyKeys.insert("payer_state_number_lower")
        nonAdditionalPropertyKeys.insert("state_income")
        nonAdditionalPropertyKeys.insert("state_income_lower")
        nonAdditionalPropertyKeys.insert("transactions_reported")
        nonAdditionalPropertyKeys.insert("pse_name")
        nonAdditionalPropertyKeys.insert("pse_telephone_number")
        nonAdditionalPropertyKeys.insert("gross_amount")
        nonAdditionalPropertyKeys.insert("card_not_present_transaction")
        nonAdditionalPropertyKeys.insert("merchant_category_code")
        nonAdditionalPropertyKeys.insert("number_of_payment_transactions")
        nonAdditionalPropertyKeys.insert("january_amount")
        nonAdditionalPropertyKeys.insert("february_amount")
        nonAdditionalPropertyKeys.insert("march_amount")
        nonAdditionalPropertyKeys.insert("april_amount")
        nonAdditionalPropertyKeys.insert("may_amount")
        nonAdditionalPropertyKeys.insert("june_amount")
        nonAdditionalPropertyKeys.insert("july_amount")
        nonAdditionalPropertyKeys.insert("august_amount")
        nonAdditionalPropertyKeys.insert("september_amount")
        nonAdditionalPropertyKeys.insert("october_amount")
        nonAdditionalPropertyKeys.insert("november_amount")
        nonAdditionalPropertyKeys.insert("december_amount")
        nonAdditionalPropertyKeys.insert("primary_state")
        nonAdditionalPropertyKeys.insert("secondary_state")
        nonAdditionalPropertyKeys.insert("primary_state_id")
        nonAdditionalPropertyKeys.insert("secondary_state_id")
        nonAdditionalPropertyKeys.insert("primary_state_income_tax")
        nonAdditionalPropertyKeys.insert("secondary_state_income_tax")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

