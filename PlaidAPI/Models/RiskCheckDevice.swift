//
// RiskCheckDevice.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Result summary object specifying values for &#x60;device&#x60; attributes of risk check. */
public struct RiskCheckDevice: Codable, JSONEncodable, Hashable {

    public var ipProxyType: ProxyType?
    /** Count of spam lists the IP address is associated with if known. */
    public var ipSpamListCount: Int?
    /** UTC offset of the timezone associated with the IP address. */
    public var ipTimezoneOffset: String?

    public init(ipProxyType: ProxyType?, ipSpamListCount: Int?, ipTimezoneOffset: String?) {
        self.ipProxyType = ipProxyType
        self.ipSpamListCount = ipSpamListCount
        self.ipTimezoneOffset = ipTimezoneOffset
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case ipProxyType = "ip_proxy_type"
        case ipSpamListCount = "ip_spam_list_count"
        case ipTimezoneOffset = "ip_timezone_offset"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(ipProxyType, forKey: .ipProxyType)
        try container.encode(ipSpamListCount, forKey: .ipSpamListCount)
        try container.encode(ipTimezoneOffset, forKey: .ipTimezoneOffset)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        ipProxyType = try container.decodeIfPresent(ProxyType.self, forKey: .ipProxyType)
        ipSpamListCount = try container.decodeIfPresent(Int.self, forKey: .ipSpamListCount)
        ipTimezoneOffset = try container.decodeIfPresent(String.self, forKey: .ipTimezoneOffset)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("ip_proxy_type")
        nonAdditionalPropertyKeys.insert("ip_spam_list_count")
        nonAdditionalPropertyKeys.insert("ip_timezone_offset")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

