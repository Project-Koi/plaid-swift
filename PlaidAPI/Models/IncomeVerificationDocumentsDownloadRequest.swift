//
// IncomeVerificationDocumentsDownloadRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** IncomeVerificationDocumentsDownloadRequest defines the request schema for &#x60;/income/verification/documents/download&#x60;. */
public struct IncomeVerificationDocumentsDownloadRequest: Codable, JSONEncodable, Hashable {

    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** The ID of the verification. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var incomeVerificationId: String?
    /** The access token associated with the Item data is being requested for. */
    public var accessToken: String?
    /** The document ID to download. If passed, a single document will be returned in the resulting zip file, rather than all document */
    public var documentId: String?

    public init(clientId: String? = nil, secret: String? = nil, incomeVerificationId: String? = nil, accessToken: String? = nil, documentId: String? = nil) {
        self.clientId = clientId
        self.secret = secret
        self.incomeVerificationId = incomeVerificationId
        self.accessToken = accessToken
        self.documentId = documentId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case incomeVerificationId = "income_verification_id"
        case accessToken = "access_token"
        case documentId = "document_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encodeIfPresent(incomeVerificationId, forKey: .incomeVerificationId)
        try container.encodeIfPresent(accessToken, forKey: .accessToken)
        try container.encodeIfPresent(documentId, forKey: .documentId)
    }
}

