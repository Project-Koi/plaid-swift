//
// AssetDetail.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Details about an asset. */
public struct AssetDetail: Codable, JSONEncodable, Hashable {

    /** A vendor created unique Identifier. */
    public var assetUniqueIdentifier: String
    /** A unique alphanumeric string identifying an asset. */
    public var assetAccountIdentifier: String
    /** Account Report As of Date / Create Date. Format YYYY-MM-DD */
    public var assetAsOfDate: String
    /** A text description that further defines the Asset. This could be used to describe the shares associated with the stocks, bonds or mutual funds, retirement funds or business owned that the borrower has disclosed (named) as an asset. */
    public var assetDescription: String?
    /** Asset Account Available Balance. */
    public var assetAvailableBalanceAmount: Double
    /** A vendor created unique Identifier */
    public var assetCurrentBalanceAmount: Double
    public var assetType: AssetType
    /** Additional Asset Decription some examples are Investment Tax-Deferred , Loan, 401K, 403B, Checking, Money Market, Credit Card,ROTH,529,Biller,ROLLOVER,CD,Savings,Investment Taxable, IRA, Mortgage, Line Of Credit. */
    public var assetTypeAdditionalDescription: String?
    /** The Number of days requested made to the Financial Institution. Example When looking for 3 months of data from the FI, pass in 90 days. */
    public var assetDaysRequestedCount: Int
    /** Ownership type of the asset account. */
    public var assetOwnershipType: String?

    public init(assetUniqueIdentifier: String, assetAccountIdentifier: String, assetAsOfDate: String, assetDescription: String?, assetAvailableBalanceAmount: Double, assetCurrentBalanceAmount: Double, assetType: AssetType, assetTypeAdditionalDescription: String?, assetDaysRequestedCount: Int, assetOwnershipType: String?) {
        self.assetUniqueIdentifier = assetUniqueIdentifier
        self.assetAccountIdentifier = assetAccountIdentifier
        self.assetAsOfDate = assetAsOfDate
        self.assetDescription = assetDescription
        self.assetAvailableBalanceAmount = assetAvailableBalanceAmount
        self.assetCurrentBalanceAmount = assetCurrentBalanceAmount
        self.assetType = assetType
        self.assetTypeAdditionalDescription = assetTypeAdditionalDescription
        self.assetDaysRequestedCount = assetDaysRequestedCount
        self.assetOwnershipType = assetOwnershipType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case assetUniqueIdentifier = "AssetUniqueIdentifier"
        case assetAccountIdentifier = "AssetAccountIdentifier"
        case assetAsOfDate = "AssetAsOfDate"
        case assetDescription = "AssetDescription"
        case assetAvailableBalanceAmount = "AssetAvailableBalanceAmount"
        case assetCurrentBalanceAmount = "AssetCurrentBalanceAmount"
        case assetType = "AssetType"
        case assetTypeAdditionalDescription = "AssetTypeAdditionalDescription"
        case assetDaysRequestedCount = "AssetDaysRequestedCount"
        case assetOwnershipType = "AssetOwnershipType"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(assetUniqueIdentifier, forKey: .assetUniqueIdentifier)
        try container.encode(assetAccountIdentifier, forKey: .assetAccountIdentifier)
        try container.encode(assetAsOfDate, forKey: .assetAsOfDate)
        try container.encode(assetDescription, forKey: .assetDescription)
        try container.encode(assetAvailableBalanceAmount, forKey: .assetAvailableBalanceAmount)
        try container.encode(assetCurrentBalanceAmount, forKey: .assetCurrentBalanceAmount)
        try container.encode(assetType, forKey: .assetType)
        try container.encode(assetTypeAdditionalDescription, forKey: .assetTypeAdditionalDescription)
        try container.encode(assetDaysRequestedCount, forKey: .assetDaysRequestedCount)
        try container.encode(assetOwnershipType, forKey: .assetOwnershipType)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        assetUniqueIdentifier = try container.decode(String.self, forKey: .assetUniqueIdentifier)
        assetAccountIdentifier = try container.decode(String.self, forKey: .assetAccountIdentifier)
        assetAsOfDate = try container.decode(String.self, forKey: .assetAsOfDate)
        assetDescription = try container.decodeIfPresent(String.self, forKey: .assetDescription)
        assetAvailableBalanceAmount = try container.decode(Double.self, forKey: .assetAvailableBalanceAmount)
        assetCurrentBalanceAmount = try container.decode(Double.self, forKey: .assetCurrentBalanceAmount)
        assetType = try container.decode(AssetType.self, forKey: .assetType)
        assetTypeAdditionalDescription = try container.decodeIfPresent(String.self, forKey: .assetTypeAdditionalDescription)
        assetDaysRequestedCount = try container.decode(Int.self, forKey: .assetDaysRequestedCount)
        assetOwnershipType = try container.decodeIfPresent(String.self, forKey: .assetOwnershipType)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("AssetUniqueIdentifier")
        nonAdditionalPropertyKeys.insert("AssetAccountIdentifier")
        nonAdditionalPropertyKeys.insert("AssetAsOfDate")
        nonAdditionalPropertyKeys.insert("AssetDescription")
        nonAdditionalPropertyKeys.insert("AssetAvailableBalanceAmount")
        nonAdditionalPropertyKeys.insert("AssetCurrentBalanceAmount")
        nonAdditionalPropertyKeys.insert("AssetType")
        nonAdditionalPropertyKeys.insert("AssetTypeAdditionalDescription")
        nonAdditionalPropertyKeys.insert("AssetDaysRequestedCount")
        nonAdditionalPropertyKeys.insert("AssetOwnershipType")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

