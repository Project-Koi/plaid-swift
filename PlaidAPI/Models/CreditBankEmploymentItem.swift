//
// CreditBankEmploymentItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The details and metadata for an end user&#39;s Item. */
public struct CreditBankEmploymentItem: Codable, JSONEncodable, Hashable {

    /** The unique identifier for the Item. */
    public var itemId: String
    /** The time when this Item's data was last retrieved from the financial institution, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (e.g. \"2018-04-12T03:32:11Z\"). */
    public var lastUpdatedTime: Date
    /** The unique identifier of the institution associated with the Item. */
    public var institutionId: String
    /** The name of the institution associated with the Item. */
    public var institutionName: String
    /** The bank employment information for this Item. Each entry in the array is a different employer found. */
    public var bankEmployments: [CreditBankEmployment]
    /** The Item's accounts that have Bank Employment data. */
    public var bankEmploymentAccounts: [CreditBankIncomeAccount]

    public init(itemId: String, lastUpdatedTime: Date, institutionId: String, institutionName: String, bankEmployments: [CreditBankEmployment], bankEmploymentAccounts: [CreditBankIncomeAccount]) {
        self.itemId = itemId
        self.lastUpdatedTime = lastUpdatedTime
        self.institutionId = institutionId
        self.institutionName = institutionName
        self.bankEmployments = bankEmployments
        self.bankEmploymentAccounts = bankEmploymentAccounts
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case itemId = "item_id"
        case lastUpdatedTime = "last_updated_time"
        case institutionId = "institution_id"
        case institutionName = "institution_name"
        case bankEmployments = "bank_employments"
        case bankEmploymentAccounts = "bank_employment_accounts"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(itemId, forKey: .itemId)
        try container.encode(lastUpdatedTime, forKey: .lastUpdatedTime)
        try container.encode(institutionId, forKey: .institutionId)
        try container.encode(institutionName, forKey: .institutionName)
        try container.encode(bankEmployments, forKey: .bankEmployments)
        try container.encode(bankEmploymentAccounts, forKey: .bankEmploymentAccounts)
    }
}

