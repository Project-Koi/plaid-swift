//
// NumbersACATS.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Identifying information for transferring holdings to an investments account via ACATS. */
public struct NumbersACATS: Codable, JSONEncodable, Hashable {

    /** The Plaid account ID associated with the account numbers */
    public var accountId: String
    /** The full account number for the account */
    public var account: String
    /** Identifiers for the clearinghouses that are assocciated with the account in order of relevance. This array will be empty if we can't provide any account level data. Institution level data can be retrieved from the institutions/get endpoints. */
    public var dtcNumbers: [String]

    public init(accountId: String, account: String, dtcNumbers: [String]) {
        self.accountId = accountId
        self.account = account
        self.dtcNumbers = dtcNumbers
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountId = "account_id"
        case account
        case dtcNumbers = "dtc_numbers"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(accountId, forKey: .accountId)
        try container.encode(account, forKey: .account)
        try container.encode(dtcNumbers, forKey: .dtcNumbers)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        accountId = try container.decode(String.self, forKey: .accountId)
        account = try container.decode(String.self, forKey: .account)
        dtcNumbers = try container.decode([String].self, forKey: .dtcNumbers)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("account_id")
        nonAdditionalPropertyKeys.insert("account")
        nonAdditionalPropertyKeys.insert("dtc_numbers")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

