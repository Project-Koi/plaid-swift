//
// BalancePlusAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Contains additional data that can be used to assess the ACH return risk. Examples of data include:  &#x60;days_since_first_plaid_connection&#x60;: The number of days since the first time the Item was connected to an application via Plaid &#x60;plaid_connections_count_7d&#x60;: The number of times the Item has been connected to applications via Plaid over the past 7 days &#x60;plaid_connections_count_30d&#x60;: The number of times the Item has been connected to applications via Plaid over the past 30 days &#x60;total_plaid_connections_count&#x60;: The number of times the Item has been connected to applications via Plaid &#x60;is_savings_or_money_market_account&#x60;: Indicates whether the ACH transaction funding account is a savings/money market account  For the full list and detailed documentation of attributes available, or to request that attributes not be returned, contact Sales or your Plaid account manager */
public struct BalancePlusAttributes: Codable, JSONEncodable, Hashable {

    /** We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 7 days from the account that will be debited. */
    public var unauthorizedTransactionsCount7d: Int?
    /** We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 30 days from the account that will be debited. */
    public var unauthorizedTransactionsCount30d: Int?
    /** We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 60 days from the account that will be debited. */
    public var unauthorizedTransactionsCount60d: Int?
    /** We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 90 days from the account that will be debited. */
    public var unauthorizedTransactionsCount90d: Int?
    /** We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 7 days from the account that will be debited. */
    public var nsfOverdraftTransactionsCount7d: Int?
    /** We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 30 days from the account that will be debited. */
    public var nsfOverdraftTransactionsCount30d: Int?
    /** We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 60 days from the account that will be debited. */
    public var nsfOverdraftTransactionsCount60d: Int?
    /** We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 90 days from the account that will be debited. */
    public var nsfOverdraftTransactionsCount90d: Int?
    /** The number of days since the first time the Item was connected to an application via Plaid */
    public var daysSinceFirstPlaidConnection: Int?
    /** The number of times the Item has been connected to applications via Plaid over the past 7 days */
    public var plaidConnectionsCount7d: Int?
    /** The number of times the Item has been connected to applications via Plaid over the past 30 days */
    public var plaidConnectionsCount30d: Int?
    /** The total number of times the Item has been connected to applications via Plaid */
    public var totalPlaidConnectionsCount: Int?
    /** Indicates if the ACH transaction funding account is a savings/money market account */
    public var isSavingsOrMoneyMarketAccount: Bool?
    /** The number of times the account's phone numbers on file have changed over the past 28 days */
    public var phoneChangeCount28d: Int?
    /** The number of times the account's phone numbers on file have changed over the past 90 days */
    public var phoneChangeCount90d: Int?
    /** The number of times the account's email addresses on file have changed over the past 28 days */
    public var emailChangeCount28d: Int?
    /** The number of times the account's email addresses on file have changed over the past 90 days */
    public var emailChangeCount90d: Int?
    /** The number of times the account's addresses on file have changed over the past 28 days */
    public var addressChangeCount28d: Int?
    /** The number of times the account's addresses on file have changed over the past 90 days */
    public var addressChangeCount90d: Int?
    /** The number of non-OAuth authentication attempts via Plaid for this bank account over the past 3 days */
    public var plaidNonOauthAuthenticationAttemptsCount3d: Int?
    /** The number of non-OAuth authentication attempts via Plaid for this bank account over the past 7 days */
    public var plaidNonOauthAuthenticationAttemptsCount7d: Int?
    /** The number of non-OAuth authentication attempts via Plaid for this bank account over the past 30 days */
    public var plaidNonOauthAuthenticationAttemptsCount30d: Int?
    /** The number of failed non-OAuth authentication attempts via Plaid for this bank account over the past 3 days */
    public var failedPlaidNonOauthAuthenticationAttemptsCount3d: Int?
    /** The number of failed non-OAuth authentication attempts via Plaid for this bank account over the past 7 days */
    public var failedPlaidNonOauthAuthenticationAttemptsCount7d: Int?
    /** The number of failed non-OAuth authentication attempts via Plaid for this bank account over the past 30 days */
    public var failedPlaidNonOauthAuthenticationAttemptsCount30d: Int?
    /** Indicates if the receiver bank account is closed */
    public var isAccountClosed: Bool?
    /** Indicates if the receiver bank account is either frozen or restricted */
    public var isAccountFrozenOrRestricted: Bool?

    public init(unauthorizedTransactionsCount7d: Int? = nil, unauthorizedTransactionsCount30d: Int? = nil, unauthorizedTransactionsCount60d: Int? = nil, unauthorizedTransactionsCount90d: Int? = nil, nsfOverdraftTransactionsCount7d: Int? = nil, nsfOverdraftTransactionsCount30d: Int? = nil, nsfOverdraftTransactionsCount60d: Int? = nil, nsfOverdraftTransactionsCount90d: Int? = nil, daysSinceFirstPlaidConnection: Int? = nil, plaidConnectionsCount7d: Int? = nil, plaidConnectionsCount30d: Int? = nil, totalPlaidConnectionsCount: Int? = nil, isSavingsOrMoneyMarketAccount: Bool? = nil, phoneChangeCount28d: Int? = nil, phoneChangeCount90d: Int? = nil, emailChangeCount28d: Int? = nil, emailChangeCount90d: Int? = nil, addressChangeCount28d: Int? = nil, addressChangeCount90d: Int? = nil, plaidNonOauthAuthenticationAttemptsCount3d: Int? = nil, plaidNonOauthAuthenticationAttemptsCount7d: Int? = nil, plaidNonOauthAuthenticationAttemptsCount30d: Int? = nil, failedPlaidNonOauthAuthenticationAttemptsCount3d: Int? = nil, failedPlaidNonOauthAuthenticationAttemptsCount7d: Int? = nil, failedPlaidNonOauthAuthenticationAttemptsCount30d: Int? = nil, isAccountClosed: Bool? = nil, isAccountFrozenOrRestricted: Bool? = nil) {
        self.unauthorizedTransactionsCount7d = unauthorizedTransactionsCount7d
        self.unauthorizedTransactionsCount30d = unauthorizedTransactionsCount30d
        self.unauthorizedTransactionsCount60d = unauthorizedTransactionsCount60d
        self.unauthorizedTransactionsCount90d = unauthorizedTransactionsCount90d
        self.nsfOverdraftTransactionsCount7d = nsfOverdraftTransactionsCount7d
        self.nsfOverdraftTransactionsCount30d = nsfOverdraftTransactionsCount30d
        self.nsfOverdraftTransactionsCount60d = nsfOverdraftTransactionsCount60d
        self.nsfOverdraftTransactionsCount90d = nsfOverdraftTransactionsCount90d
        self.daysSinceFirstPlaidConnection = daysSinceFirstPlaidConnection
        self.plaidConnectionsCount7d = plaidConnectionsCount7d
        self.plaidConnectionsCount30d = plaidConnectionsCount30d
        self.totalPlaidConnectionsCount = totalPlaidConnectionsCount
        self.isSavingsOrMoneyMarketAccount = isSavingsOrMoneyMarketAccount
        self.phoneChangeCount28d = phoneChangeCount28d
        self.phoneChangeCount90d = phoneChangeCount90d
        self.emailChangeCount28d = emailChangeCount28d
        self.emailChangeCount90d = emailChangeCount90d
        self.addressChangeCount28d = addressChangeCount28d
        self.addressChangeCount90d = addressChangeCount90d
        self.plaidNonOauthAuthenticationAttemptsCount3d = plaidNonOauthAuthenticationAttemptsCount3d
        self.plaidNonOauthAuthenticationAttemptsCount7d = plaidNonOauthAuthenticationAttemptsCount7d
        self.plaidNonOauthAuthenticationAttemptsCount30d = plaidNonOauthAuthenticationAttemptsCount30d
        self.failedPlaidNonOauthAuthenticationAttemptsCount3d = failedPlaidNonOauthAuthenticationAttemptsCount3d
        self.failedPlaidNonOauthAuthenticationAttemptsCount7d = failedPlaidNonOauthAuthenticationAttemptsCount7d
        self.failedPlaidNonOauthAuthenticationAttemptsCount30d = failedPlaidNonOauthAuthenticationAttemptsCount30d
        self.isAccountClosed = isAccountClosed
        self.isAccountFrozenOrRestricted = isAccountFrozenOrRestricted
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case unauthorizedTransactionsCount7d = "unauthorized_transactions_count_7d"
        case unauthorizedTransactionsCount30d = "unauthorized_transactions_count_30d"
        case unauthorizedTransactionsCount60d = "unauthorized_transactions_count_60d"
        case unauthorizedTransactionsCount90d = "unauthorized_transactions_count_90d"
        case nsfOverdraftTransactionsCount7d = "nsf_overdraft_transactions_count_7d"
        case nsfOverdraftTransactionsCount30d = "nsf_overdraft_transactions_count_30d"
        case nsfOverdraftTransactionsCount60d = "nsf_overdraft_transactions_count_60d"
        case nsfOverdraftTransactionsCount90d = "nsf_overdraft_transactions_count_90d"
        case daysSinceFirstPlaidConnection = "days_since_first_plaid_connection"
        case plaidConnectionsCount7d = "plaid_connections_count_7d"
        case plaidConnectionsCount30d = "plaid_connections_count_30d"
        case totalPlaidConnectionsCount = "total_plaid_connections_count"
        case isSavingsOrMoneyMarketAccount = "is_savings_or_money_market_account"
        case phoneChangeCount28d = "phone_change_count_28d"
        case phoneChangeCount90d = "phone_change_count_90d"
        case emailChangeCount28d = "email_change_count_28d"
        case emailChangeCount90d = "email_change_count_90d"
        case addressChangeCount28d = "address_change_count_28d"
        case addressChangeCount90d = "address_change_count_90d"
        case plaidNonOauthAuthenticationAttemptsCount3d = "plaid_non_oauth_authentication_attempts_count_3d"
        case plaidNonOauthAuthenticationAttemptsCount7d = "plaid_non_oauth_authentication_attempts_count_7d"
        case plaidNonOauthAuthenticationAttemptsCount30d = "plaid_non_oauth_authentication_attempts_count_30d"
        case failedPlaidNonOauthAuthenticationAttemptsCount3d = "failed_plaid_non_oauth_authentication_attempts_count_3d"
        case failedPlaidNonOauthAuthenticationAttemptsCount7d = "failed_plaid_non_oauth_authentication_attempts_count_7d"
        case failedPlaidNonOauthAuthenticationAttemptsCount30d = "failed_plaid_non_oauth_authentication_attempts_count_30d"
        case isAccountClosed = "is_account_closed"
        case isAccountFrozenOrRestricted = "is_account_frozen_or_restricted"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(unauthorizedTransactionsCount7d, forKey: .unauthorizedTransactionsCount7d)
        try container.encodeIfPresent(unauthorizedTransactionsCount30d, forKey: .unauthorizedTransactionsCount30d)
        try container.encodeIfPresent(unauthorizedTransactionsCount60d, forKey: .unauthorizedTransactionsCount60d)
        try container.encodeIfPresent(unauthorizedTransactionsCount90d, forKey: .unauthorizedTransactionsCount90d)
        try container.encodeIfPresent(nsfOverdraftTransactionsCount7d, forKey: .nsfOverdraftTransactionsCount7d)
        try container.encodeIfPresent(nsfOverdraftTransactionsCount30d, forKey: .nsfOverdraftTransactionsCount30d)
        try container.encodeIfPresent(nsfOverdraftTransactionsCount60d, forKey: .nsfOverdraftTransactionsCount60d)
        try container.encodeIfPresent(nsfOverdraftTransactionsCount90d, forKey: .nsfOverdraftTransactionsCount90d)
        try container.encodeIfPresent(daysSinceFirstPlaidConnection, forKey: .daysSinceFirstPlaidConnection)
        try container.encodeIfPresent(plaidConnectionsCount7d, forKey: .plaidConnectionsCount7d)
        try container.encodeIfPresent(plaidConnectionsCount30d, forKey: .plaidConnectionsCount30d)
        try container.encodeIfPresent(totalPlaidConnectionsCount, forKey: .totalPlaidConnectionsCount)
        try container.encodeIfPresent(isSavingsOrMoneyMarketAccount, forKey: .isSavingsOrMoneyMarketAccount)
        try container.encodeIfPresent(phoneChangeCount28d, forKey: .phoneChangeCount28d)
        try container.encodeIfPresent(phoneChangeCount90d, forKey: .phoneChangeCount90d)
        try container.encodeIfPresent(emailChangeCount28d, forKey: .emailChangeCount28d)
        try container.encodeIfPresent(emailChangeCount90d, forKey: .emailChangeCount90d)
        try container.encodeIfPresent(addressChangeCount28d, forKey: .addressChangeCount28d)
        try container.encodeIfPresent(addressChangeCount90d, forKey: .addressChangeCount90d)
        try container.encodeIfPresent(plaidNonOauthAuthenticationAttemptsCount3d, forKey: .plaidNonOauthAuthenticationAttemptsCount3d)
        try container.encodeIfPresent(plaidNonOauthAuthenticationAttemptsCount7d, forKey: .plaidNonOauthAuthenticationAttemptsCount7d)
        try container.encodeIfPresent(plaidNonOauthAuthenticationAttemptsCount30d, forKey: .plaidNonOauthAuthenticationAttemptsCount30d)
        try container.encodeIfPresent(failedPlaidNonOauthAuthenticationAttemptsCount3d, forKey: .failedPlaidNonOauthAuthenticationAttemptsCount3d)
        try container.encodeIfPresent(failedPlaidNonOauthAuthenticationAttemptsCount7d, forKey: .failedPlaidNonOauthAuthenticationAttemptsCount7d)
        try container.encodeIfPresent(failedPlaidNonOauthAuthenticationAttemptsCount30d, forKey: .failedPlaidNonOauthAuthenticationAttemptsCount30d)
        try container.encodeIfPresent(isAccountClosed, forKey: .isAccountClosed)
        try container.encodeIfPresent(isAccountFrozenOrRestricted, forKey: .isAccountFrozenOrRestricted)
    }
}

