//
// SelfieCheckSelfie.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Captures and analysis from a user&#39;s selfie. */
public struct SelfieCheckSelfie: Codable, JSONEncodable, Hashable {

    public var status: SelfieStatus
    /** The `attempt` field begins with 1 and increments with each subsequent selfie upload. */
    public var attempt: Int
    public var capture: SelfieCapture
    public var analysis: SelfieAnalysis

    public init(status: SelfieStatus, attempt: Int, capture: SelfieCapture, analysis: SelfieAnalysis) {
        self.status = status
        self.attempt = attempt
        self.capture = capture
        self.analysis = analysis
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case status
        case attempt
        case capture
        case analysis
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(status, forKey: .status)
        try container.encode(attempt, forKey: .attempt)
        try container.encode(capture, forKey: .capture)
        try container.encode(analysis, forKey: .analysis)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        status = try container.decode(SelfieStatus.self, forKey: .status)
        attempt = try container.decode(Int.self, forKey: .attempt)
        capture = try container.decode(SelfieCapture.self, forKey: .capture)
        analysis = try container.decode(SelfieAnalysis.self, forKey: .analysis)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("status")
        nonAdditionalPropertyKeys.insert("attempt")
        nonAdditionalPropertyKeys.insert("capture")
        nonAdditionalPropertyKeys.insert("analysis")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

