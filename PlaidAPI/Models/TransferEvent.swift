//
// TransferEvent.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Represents an event in the Transfers API. */
public struct TransferEvent: Codable, JSONEncodable, Hashable {

    static let eventIdRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** Plaid’s unique identifier for this event. IDs are sequential unsigned 64-bit integers. */
    public var eventId: Int
    /** The datetime when this event occurred. This will be of the form `2006-01-02T15:04:05Z`. */
    public var timestamp: Date
    public var eventType: TransferEventType
    /** The account ID associated with the transfer. This field is omitted for Plaid Ledger Sweep events. */
    public var accountId: String?
    /** The id of the associated funding account, available in the Plaid Dashboard. If present, this indicates which of your business checking accounts will be credited or debited. */
    public var fundingAccountId: String?
    /** Plaid’s unique identifier for a transfer. This field is `null` for Plaid Ledger Sweep events. */
    public var transferId: String
    /** The ID of the origination account that this balance belongs to. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var originationAccountId: String?
    public var transferType: OmittableTransferType?
    /** The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\"). This field is omitted for Plaid Ledger Sweep events. */
    public var transferAmount: String?
    public var failureReason: TransferFailure?
    /** Plaid’s unique identifier for a sweep. */
    public var sweepId: String?
    /** A signed amount of how much was `swept` or `return_swept` for this transfer (decimal string with two digits of precision e.g. \"-5.50\"). */
    public var sweepAmount: String?
    /** Plaid’s unique identifier for a refund. A non-null value indicates the event is for the associated refund of the transfer. */
    public var refundId: String?
    /** The Plaid client ID that is the originator of the transfer that this event applies to. Only present if the transfer was created on behalf of another client as a third-party sender (TPS). */
    public var originatorClientId: String?

    public init(eventId: Int, timestamp: Date, eventType: TransferEventType, accountId: String? = nil, fundingAccountId: String?, transferId: String, originationAccountId: String?, transferType: OmittableTransferType? = nil, transferAmount: String? = nil, failureReason: TransferFailure?, sweepId: String?, sweepAmount: String?, refundId: String?, originatorClientId: String?) {
        self.eventId = eventId
        self.timestamp = timestamp
        self.eventType = eventType
        self.accountId = accountId
        self.fundingAccountId = fundingAccountId
        self.transferId = transferId
        self.originationAccountId = originationAccountId
        self.transferType = transferType
        self.transferAmount = transferAmount
        self.failureReason = failureReason
        self.sweepId = sweepId
        self.sweepAmount = sweepAmount
        self.refundId = refundId
        self.originatorClientId = originatorClientId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eventId = "event_id"
        case timestamp
        case eventType = "event_type"
        case accountId = "account_id"
        case fundingAccountId = "funding_account_id"
        case transferId = "transfer_id"
        case originationAccountId = "origination_account_id"
        case transferType = "transfer_type"
        case transferAmount = "transfer_amount"
        case failureReason = "failure_reason"
        case sweepId = "sweep_id"
        case sweepAmount = "sweep_amount"
        case refundId = "refund_id"
        case originatorClientId = "originator_client_id"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(eventId, forKey: .eventId)
        try container.encode(timestamp, forKey: .timestamp)
        try container.encode(eventType, forKey: .eventType)
        try container.encodeIfPresent(accountId, forKey: .accountId)
        try container.encode(fundingAccountId, forKey: .fundingAccountId)
        try container.encode(transferId, forKey: .transferId)
        try container.encode(originationAccountId, forKey: .originationAccountId)
        try container.encodeIfPresent(transferType, forKey: .transferType)
        try container.encodeIfPresent(transferAmount, forKey: .transferAmount)
        try container.encode(failureReason, forKey: .failureReason)
        try container.encode(sweepId, forKey: .sweepId)
        try container.encode(sweepAmount, forKey: .sweepAmount)
        try container.encode(refundId, forKey: .refundId)
        try container.encode(originatorClientId, forKey: .originatorClientId)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        eventId = try container.decode(Int.self, forKey: .eventId)
        timestamp = try container.decode(Date.self, forKey: .timestamp)
        eventType = try container.decode(TransferEventType.self, forKey: .eventType)
        accountId = try container.decodeIfPresent(String.self, forKey: .accountId)
        fundingAccountId = try container.decodeIfPresent(String.self, forKey: .fundingAccountId)
        transferId = try container.decode(String.self, forKey: .transferId)
        originationAccountId = try container.decodeIfPresent(String.self, forKey: .originationAccountId)
        transferType = try container.decodeIfPresent(OmittableTransferType.self, forKey: .transferType)
        transferAmount = try container.decodeIfPresent(String.self, forKey: .transferAmount)
        failureReason = try container.decodeIfPresent(TransferFailure.self, forKey: .failureReason)
        sweepId = try container.decodeIfPresent(String.self, forKey: .sweepId)
        sweepAmount = try container.decodeIfPresent(String.self, forKey: .sweepAmount)
        refundId = try container.decodeIfPresent(String.self, forKey: .refundId)
        originatorClientId = try container.decodeIfPresent(String.self, forKey: .originatorClientId)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("event_id")
        nonAdditionalPropertyKeys.insert("timestamp")
        nonAdditionalPropertyKeys.insert("event_type")
        nonAdditionalPropertyKeys.insert("account_id")
        nonAdditionalPropertyKeys.insert("funding_account_id")
        nonAdditionalPropertyKeys.insert("transfer_id")
        nonAdditionalPropertyKeys.insert("origination_account_id")
        nonAdditionalPropertyKeys.insert("transfer_type")
        nonAdditionalPropertyKeys.insert("transfer_amount")
        nonAdditionalPropertyKeys.insert("failure_reason")
        nonAdditionalPropertyKeys.insert("sweep_id")
        nonAdditionalPropertyKeys.insert("sweep_amount")
        nonAdditionalPropertyKeys.insert("refund_id")
        nonAdditionalPropertyKeys.insert("originator_client_id")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

