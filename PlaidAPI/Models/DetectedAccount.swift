//
// DetectedAccount.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A possible account detected to be associated with a transaction user. */
public struct DetectedAccount: Codable, JSONEncodable, Hashable {

    /** The detected account type (depository, credit, loan, investment etc.). */
    public var accountType: String?
    /** The detected subtype of the account, based on the transactions to/from the institution. */
    public var accountSubtype: String?
    /** The number of transactions associated with this detected account type at this financial institution. */
    public var transactionCount: Int
    /** The date of the oldest transaction associated with this detected account type at this financial institution. */
    public var oldestTransactionDate: Date?
    /** The date of the newest transaction associated with this detected account type at this financial institution. */
    public var newestTransactionDate: Date?
    /** Amount of the most recent transaction associated with this detected account type at this financial institution. */
    public var newestTransactionAmount: Double?
    /** Sum of outflow amounts associated with this detected account type at this financial institution. */
    public var totalOutflows: Double
    /** Sum of inflow amounts associated with this detected account type at this financial institution. */
    public var totalInflows: Double

    public init(accountType: String?, accountSubtype: String?, transactionCount: Int, oldestTransactionDate: Date? = nil, newestTransactionDate: Date? = nil, newestTransactionAmount: Double? = nil, totalOutflows: Double, totalInflows: Double) {
        self.accountType = accountType
        self.accountSubtype = accountSubtype
        self.transactionCount = transactionCount
        self.oldestTransactionDate = oldestTransactionDate
        self.newestTransactionDate = newestTransactionDate
        self.newestTransactionAmount = newestTransactionAmount
        self.totalOutflows = totalOutflows
        self.totalInflows = totalInflows
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountType = "account_type"
        case accountSubtype = "account_subtype"
        case transactionCount = "transaction_count"
        case oldestTransactionDate = "oldest_transaction_date"
        case newestTransactionDate = "newest_transaction_date"
        case newestTransactionAmount = "newest_transaction_amount"
        case totalOutflows = "total_outflows"
        case totalInflows = "total_inflows"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(accountType, forKey: .accountType)
        try container.encode(accountSubtype, forKey: .accountSubtype)
        try container.encode(transactionCount, forKey: .transactionCount)
        try container.encodeIfPresent(oldestTransactionDate, forKey: .oldestTransactionDate)
        try container.encodeIfPresent(newestTransactionDate, forKey: .newestTransactionDate)
        try container.encodeIfPresent(newestTransactionAmount, forKey: .newestTransactionAmount)
        try container.encode(totalOutflows, forKey: .totalOutflows)
        try container.encode(totalInflows, forKey: .totalInflows)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        accountType = try container.decodeIfPresent(String.self, forKey: .accountType)
        accountSubtype = try container.decodeIfPresent(String.self, forKey: .accountSubtype)
        transactionCount = try container.decode(Int.self, forKey: .transactionCount)
        oldestTransactionDate = try container.decodeIfPresent(Date.self, forKey: .oldestTransactionDate)
        newestTransactionDate = try container.decodeIfPresent(Date.self, forKey: .newestTransactionDate)
        newestTransactionAmount = try container.decodeIfPresent(Double.self, forKey: .newestTransactionAmount)
        totalOutflows = try container.decode(Double.self, forKey: .totalOutflows)
        totalInflows = try container.decode(Double.self, forKey: .totalInflows)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("account_type")
        nonAdditionalPropertyKeys.insert("account_subtype")
        nonAdditionalPropertyKeys.insert("transaction_count")
        nonAdditionalPropertyKeys.insert("oldest_transaction_date")
        nonAdditionalPropertyKeys.insert("newest_transaction_date")
        nonAdditionalPropertyKeys.insert("newest_transaction_amount")
        nonAdditionalPropertyKeys.insert("total_outflows")
        nonAdditionalPropertyKeys.insert("total_inflows")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

