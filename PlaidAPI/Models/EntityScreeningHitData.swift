//
// EntityScreeningHitData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Information associated with the entity watchlist hit */
public struct EntityScreeningHitData: Codable, JSONEncodable, Hashable {

    /** Documents associated with the watchlist hit */
    public var documents: [EntityScreeningHitDocumentsItems]?
    /** Email addresses associated with the watchlist hit */
    public var emailAddresses: [EntityScreeningHitEmailsItems]?
    /** Locations associated with the watchlist hit */
    public var locations: [GenericScreeningHitLocationItems]?
    /** Names associated with the watchlist hit */
    public var names: [EntityScreeningHitNamesItems]?
    /** Phone numbers associated with the watchlist hit */
    public var phoneNumbers: [EntityScreeningHitsPhoneNumberItems]?
    /** URLs associated with the watchlist hit */
    public var urls: [EntityScreeningHitUrlsItems]?

    public init(documents: [EntityScreeningHitDocumentsItems]? = nil, emailAddresses: [EntityScreeningHitEmailsItems]? = nil, locations: [GenericScreeningHitLocationItems]? = nil, names: [EntityScreeningHitNamesItems]? = nil, phoneNumbers: [EntityScreeningHitsPhoneNumberItems]? = nil, urls: [EntityScreeningHitUrlsItems]? = nil) {
        self.documents = documents
        self.emailAddresses = emailAddresses
        self.locations = locations
        self.names = names
        self.phoneNumbers = phoneNumbers
        self.urls = urls
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case documents
        case emailAddresses = "email_addresses"
        case locations
        case names
        case phoneNumbers = "phone_numbers"
        case urls
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(documents, forKey: .documents)
        try container.encodeIfPresent(emailAddresses, forKey: .emailAddresses)
        try container.encodeIfPresent(locations, forKey: .locations)
        try container.encodeIfPresent(names, forKey: .names)
        try container.encodeIfPresent(phoneNumbers, forKey: .phoneNumbers)
        try container.encodeIfPresent(urls, forKey: .urls)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        documents = try container.decodeIfPresent([EntityScreeningHitDocumentsItems].self, forKey: .documents)
        emailAddresses = try container.decodeIfPresent([EntityScreeningHitEmailsItems].self, forKey: .emailAddresses)
        locations = try container.decodeIfPresent([GenericScreeningHitLocationItems].self, forKey: .locations)
        names = try container.decodeIfPresent([EntityScreeningHitNamesItems].self, forKey: .names)
        phoneNumbers = try container.decodeIfPresent([EntityScreeningHitsPhoneNumberItems].self, forKey: .phoneNumbers)
        urls = try container.decodeIfPresent([EntityScreeningHitUrlsItems].self, forKey: .urls)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("documents")
        nonAdditionalPropertyKeys.insert("email_addresses")
        nonAdditionalPropertyKeys.insert("locations")
        nonAdditionalPropertyKeys.insert("names")
        nonAdditionalPropertyKeys.insert("phone_numbers")
        nonAdditionalPropertyKeys.insert("urls")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

