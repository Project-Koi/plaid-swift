//
// LinkDeliveryGetResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** LinkDeliveryGetRequest defines the response schema for &#x60;/link_delivery/get&#x60; */
public struct LinkDeliveryGetResponse: Codable, JSONEncodable, Hashable {

    public var status: LinkDeliverySessionStatus
    /** Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the time the given Hosted Link session was created at. */
    public var createdAt: Date
    /** Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the time the given Hosted Link session was completed at. */
    public var completedAt: Date?
    /** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
    public var requestId: String
    /** An array of access tokens associated with the Hosted Link session. */
    public var accessTokens: [String]?
    /** An array of `item_id`s associated with the Hosted Link session. */
    public var itemIds: [String]?

    public init(status: LinkDeliverySessionStatus, createdAt: Date, completedAt: Date? = nil, requestId: String, accessTokens: [String]? = nil, itemIds: [String]? = nil) {
        self.status = status
        self.createdAt = createdAt
        self.completedAt = completedAt
        self.requestId = requestId
        self.accessTokens = accessTokens
        self.itemIds = itemIds
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case status
        case createdAt = "created_at"
        case completedAt = "completed_at"
        case requestId = "request_id"
        case accessTokens = "access_tokens"
        case itemIds = "item_ids"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(status, forKey: .status)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(completedAt, forKey: .completedAt)
        try container.encode(requestId, forKey: .requestId)
        try container.encodeIfPresent(accessTokens, forKey: .accessTokens)
        try container.encodeIfPresent(itemIds, forKey: .itemIds)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        status = try container.decode(LinkDeliverySessionStatus.self, forKey: .status)
        createdAt = try container.decode(Date.self, forKey: .createdAt)
        completedAt = try container.decodeIfPresent(Date.self, forKey: .completedAt)
        requestId = try container.decode(String.self, forKey: .requestId)
        accessTokens = try container.decodeIfPresent([String].self, forKey: .accessTokens)
        itemIds = try container.decodeIfPresent([String].self, forKey: .itemIds)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("status")
        nonAdditionalPropertyKeys.insert("created_at")
        nonAdditionalPropertyKeys.insert("completed_at")
        nonAdditionalPropertyKeys.insert("request_id")
        nonAdditionalPropertyKeys.insert("access_tokens")
        nonAdditionalPropertyKeys.insert("item_ids")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

