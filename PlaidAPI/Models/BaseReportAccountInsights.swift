//
// BaseReportAccountInsights.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Calculated insights derived from transaction-level data. */
public struct BaseReportAccountInsights: Codable, JSONEncodable, Hashable {

    /** Date of the earliest transaction in the base report for the account. */
    public var oldestTransactionDate: Date?
    /** Date of the most recent transaction in the base report for the account. */
    public var mostRecentTransactionDate: Date?
    /** Number of days days available in the base report for the account. */
    public var daysAvailable: Int?
    /** Average number of days between sequential transactions */
    public var averageDaysBetweenTransactions: Double?
    /** Longest gap between sequential transactions */
    public var longestGapBetweenTransactions: [BaseReportLongestGapInsights]?
    /** The number of debits into the account. This field will be null for non-depository accounts. */
    public var numberOfInflows: [BaseReportNumberFlowInsights]?
    /** Average amount of debit transactions into account. This field will be null for non-depository accounts. This field only takes into account USD transactions from the account. */
    public var averageInflowAmount: [BaseReportAverageFlowInsights]?
    /** The number of credit into the account. This field will be null for non-depository accounts. */
    public var numberOfOutflows: [BaseReportNumberFlowInsights]?
    /** Average amount of credit transactions into account. This field will be null for non-depository accounts. This field only takes into account USD transactions from the account. */
    public var averageOutflowAmount: [BaseReportAverageFlowInsights]?
    /** Number of days with no transactions */
    public var numberOfDaysNoTransactions: Int?

    public init(oldestTransactionDate: Date? = nil, mostRecentTransactionDate: Date? = nil, daysAvailable: Int? = nil, averageDaysBetweenTransactions: Double? = nil, longestGapBetweenTransactions: [BaseReportLongestGapInsights]? = nil, numberOfInflows: [BaseReportNumberFlowInsights]? = nil, averageInflowAmount: [BaseReportAverageFlowInsights]? = nil, numberOfOutflows: [BaseReportNumberFlowInsights]? = nil, averageOutflowAmount: [BaseReportAverageFlowInsights]? = nil, numberOfDaysNoTransactions: Int? = nil) {
        self.oldestTransactionDate = oldestTransactionDate
        self.mostRecentTransactionDate = mostRecentTransactionDate
        self.daysAvailable = daysAvailable
        self.averageDaysBetweenTransactions = averageDaysBetweenTransactions
        self.longestGapBetweenTransactions = longestGapBetweenTransactions
        self.numberOfInflows = numberOfInflows
        self.averageInflowAmount = averageInflowAmount
        self.numberOfOutflows = numberOfOutflows
        self.averageOutflowAmount = averageOutflowAmount
        self.numberOfDaysNoTransactions = numberOfDaysNoTransactions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case oldestTransactionDate = "oldest_transaction_date"
        case mostRecentTransactionDate = "most_recent_transaction_date"
        case daysAvailable = "days_available"
        case averageDaysBetweenTransactions = "average_days_between_transactions"
        case longestGapBetweenTransactions = "longest_gap_between_transactions"
        case numberOfInflows = "number_of_inflows"
        case averageInflowAmount = "average_inflow_amount"
        case numberOfOutflows = "number_of_outflows"
        case averageOutflowAmount = "average_outflow_amount"
        case numberOfDaysNoTransactions = "number_of_days_no_transactions"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(oldestTransactionDate, forKey: .oldestTransactionDate)
        try container.encodeIfPresent(mostRecentTransactionDate, forKey: .mostRecentTransactionDate)
        try container.encodeIfPresent(daysAvailable, forKey: .daysAvailable)
        try container.encodeIfPresent(averageDaysBetweenTransactions, forKey: .averageDaysBetweenTransactions)
        try container.encodeIfPresent(longestGapBetweenTransactions, forKey: .longestGapBetweenTransactions)
        try container.encodeIfPresent(numberOfInflows, forKey: .numberOfInflows)
        try container.encodeIfPresent(averageInflowAmount, forKey: .averageInflowAmount)
        try container.encodeIfPresent(numberOfOutflows, forKey: .numberOfOutflows)
        try container.encodeIfPresent(averageOutflowAmount, forKey: .averageOutflowAmount)
        try container.encodeIfPresent(numberOfDaysNoTransactions, forKey: .numberOfDaysNoTransactions)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        oldestTransactionDate = try container.decodeIfPresent(Date.self, forKey: .oldestTransactionDate)
        mostRecentTransactionDate = try container.decodeIfPresent(Date.self, forKey: .mostRecentTransactionDate)
        daysAvailable = try container.decodeIfPresent(Int.self, forKey: .daysAvailable)
        averageDaysBetweenTransactions = try container.decodeIfPresent(Double.self, forKey: .averageDaysBetweenTransactions)
        longestGapBetweenTransactions = try container.decodeIfPresent([BaseReportLongestGapInsights].self, forKey: .longestGapBetweenTransactions)
        numberOfInflows = try container.decodeIfPresent([BaseReportNumberFlowInsights].self, forKey: .numberOfInflows)
        averageInflowAmount = try container.decodeIfPresent([BaseReportAverageFlowInsights].self, forKey: .averageInflowAmount)
        numberOfOutflows = try container.decodeIfPresent([BaseReportNumberFlowInsights].self, forKey: .numberOfOutflows)
        averageOutflowAmount = try container.decodeIfPresent([BaseReportAverageFlowInsights].self, forKey: .averageOutflowAmount)
        numberOfDaysNoTransactions = try container.decodeIfPresent(Int.self, forKey: .numberOfDaysNoTransactions)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("oldest_transaction_date")
        nonAdditionalPropertyKeys.insert("most_recent_transaction_date")
        nonAdditionalPropertyKeys.insert("days_available")
        nonAdditionalPropertyKeys.insert("average_days_between_transactions")
        nonAdditionalPropertyKeys.insert("longest_gap_between_transactions")
        nonAdditionalPropertyKeys.insert("number_of_inflows")
        nonAdditionalPropertyKeys.insert("average_inflow_amount")
        nonAdditionalPropertyKeys.insert("number_of_outflows")
        nonAdditionalPropertyKeys.insert("average_outflow_amount")
        nonAdditionalPropertyKeys.insert("number_of_days_no_transactions")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

