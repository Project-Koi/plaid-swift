//
// EmploymentDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An object representing employment details found on a paystub. */
@available(*, deprecated, message: "This schema is deprecated.")
public struct EmploymentDetails: Codable, JSONEncodable, Hashable {

    @available(*, deprecated, message: "This property is deprecated.")
    public var annualSalary: Pay?
    /** Date on which the employee was hired, in the YYYY-MM-DD format. */
    public var hireDate: Date?

    public init(annualSalary: Pay? = nil, hireDate: Date? = nil) {
        self.annualSalary = annualSalary
        self.hireDate = hireDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case annualSalary = "annual_salary"
        case hireDate = "hire_date"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(annualSalary, forKey: .annualSalary)
        try container.encodeIfPresent(hireDate, forKey: .hireDate)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        annualSalary = try container.decodeIfPresent(Pay.self, forKey: .annualSalary)
        hireDate = try container.decodeIfPresent(Date.self, forKey: .hireDate)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("annual_salary")
        nonAdditionalPropertyKeys.insert("hire_date")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

