//
// TransferExpectedSweepSettlementScheduleItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Defines an expected sweep date and amount. */
public struct TransferExpectedSweepSettlementScheduleItem: Codable, JSONEncodable, Hashable {

    /** The settlement date of a sweep for this transfer. */
    public var sweepSettlementDate: Date
    /** The accumulated amount that has been swept by `sweep_settlement_date`. */
    public var sweptSettledAmount: String

    public init(sweepSettlementDate: Date, sweptSettledAmount: String) {
        self.sweepSettlementDate = sweepSettlementDate
        self.sweptSettledAmount = sweptSettledAmount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sweepSettlementDate = "sweep_settlement_date"
        case sweptSettledAmount = "swept_settled_amount"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(sweepSettlementDate, forKey: .sweepSettlementDate)
        try container.encode(sweptSettledAmount, forKey: .sweptSettledAmount)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        sweepSettlementDate = try container.decode(Date.self, forKey: .sweepSettlementDate)
        sweptSettledAmount = try container.decode(String.self, forKey: .sweptSettledAmount)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("sweep_settlement_date")
        nonAdditionalPropertyKeys.insert("swept_settled_amount")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

