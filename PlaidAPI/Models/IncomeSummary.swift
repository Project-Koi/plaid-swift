//
// IncomeSummary.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The verified fields from a paystub verification. All fields are provided as reported on the paystub. */
public struct IncomeSummary: Codable, JSONEncodable, Hashable {

    public var employerName: EmployerIncomeSummaryFieldString
    public var employeeName: EmployeeIncomeSummaryFieldString
    public var ytdGrossIncome: YTDGrossIncomeSummaryFieldNumber
    public var ytdNetIncome: YTDNetIncomeSummaryFieldNumber
    public var payFrequency: PayFrequency?
    public var projectedWage: ProjectedIncomeSummaryFieldNumber
    public var verifiedTransaction: TransactionData?

    public init(employerName: EmployerIncomeSummaryFieldString, employeeName: EmployeeIncomeSummaryFieldString, ytdGrossIncome: YTDGrossIncomeSummaryFieldNumber, ytdNetIncome: YTDNetIncomeSummaryFieldNumber, payFrequency: PayFrequency?, projectedWage: ProjectedIncomeSummaryFieldNumber, verifiedTransaction: TransactionData?) {
        self.employerName = employerName
        self.employeeName = employeeName
        self.ytdGrossIncome = ytdGrossIncome
        self.ytdNetIncome = ytdNetIncome
        self.payFrequency = payFrequency
        self.projectedWage = projectedWage
        self.verifiedTransaction = verifiedTransaction
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case employerName = "employer_name"
        case employeeName = "employee_name"
        case ytdGrossIncome = "ytd_gross_income"
        case ytdNetIncome = "ytd_net_income"
        case payFrequency = "pay_frequency"
        case projectedWage = "projected_wage"
        case verifiedTransaction = "verified_transaction"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(employerName, forKey: .employerName)
        try container.encode(employeeName, forKey: .employeeName)
        try container.encode(ytdGrossIncome, forKey: .ytdGrossIncome)
        try container.encode(ytdNetIncome, forKey: .ytdNetIncome)
        try container.encode(payFrequency, forKey: .payFrequency)
        try container.encode(projectedWage, forKey: .projectedWage)
        try container.encode(verifiedTransaction, forKey: .verifiedTransaction)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        employerName = try container.decode(EmployerIncomeSummaryFieldString.self, forKey: .employerName)
        employeeName = try container.decode(EmployeeIncomeSummaryFieldString.self, forKey: .employeeName)
        ytdGrossIncome = try container.decode(YTDGrossIncomeSummaryFieldNumber.self, forKey: .ytdGrossIncome)
        ytdNetIncome = try container.decode(YTDNetIncomeSummaryFieldNumber.self, forKey: .ytdNetIncome)
        payFrequency = try container.decodeIfPresent(PayFrequency.self, forKey: .payFrequency)
        projectedWage = try container.decode(ProjectedIncomeSummaryFieldNumber.self, forKey: .projectedWage)
        verifiedTransaction = try container.decodeIfPresent(TransactionData.self, forKey: .verifiedTransaction)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("employer_name")
        nonAdditionalPropertyKeys.insert("employee_name")
        nonAdditionalPropertyKeys.insert("ytd_gross_income")
        nonAdditionalPropertyKeys.insert("ytd_net_income")
        nonAdditionalPropertyKeys.insert("pay_frequency")
        nonAdditionalPropertyKeys.insert("projected_wage")
        nonAdditionalPropertyKeys.insert("verified_transaction")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

