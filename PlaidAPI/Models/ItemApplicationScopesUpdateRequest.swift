//
// ItemApplicationScopesUpdateRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** ItemApplicationScopesUpdateRequest defines the request schema for &#x60;/item/application/scopes/update&#x60; */
public struct ItemApplicationScopesUpdateRequest: Codable, JSONEncodable, Hashable {

    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** The access token associated with the Item data is being requested for. */
    public var accessToken: String
    /** This field will map to the application ID that is returned from /item/application/list, or provided to the institution in an oauth redirect. */
    public var applicationId: String
    public var scopes: Scopes
    /** When scopes are updated during enrollment, this field must be populated with the state sent to the partner in the OAuth Login URI. This field is required when the context is `ENROLLMENT`. */
    public var state: String?
    public var context: ScopesContext

    public init(clientId: String? = nil, secret: String? = nil, accessToken: String, applicationId: String, scopes: Scopes, state: String? = nil, context: ScopesContext) {
        self.clientId = clientId
        self.secret = secret
        self.accessToken = accessToken
        self.applicationId = applicationId
        self.scopes = scopes
        self.state = state
        self.context = context
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case accessToken = "access_token"
        case applicationId = "application_id"
        case scopes
        case state
        case context
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encode(accessToken, forKey: .accessToken)
        try container.encode(applicationId, forKey: .applicationId)
        try container.encode(scopes, forKey: .scopes)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encode(context, forKey: .context)
    }
}

