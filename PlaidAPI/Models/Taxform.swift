//
// Taxform.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Data about an official document used to report the user&#39;s income to the IRS. */
public struct Taxform: Codable, JSONEncodable, Hashable {

    /** An identifier of the document referenced by the document metadata. */
    public var docId: String?
    /** The type of tax document. Currently, the only supported value is `w2`. */
    public var documentType: String
    public var w2: W2?

    public init(docId: String? = nil, documentType: String, w2: W2? = nil) {
        self.docId = docId
        self.documentType = documentType
        self.w2 = w2
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case docId = "doc_id"
        case documentType = "document_type"
        case w2
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(docId, forKey: .docId)
        try container.encode(documentType, forKey: .documentType)
        try container.encodeIfPresent(w2, forKey: .w2)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        docId = try container.decodeIfPresent(String.self, forKey: .docId)
        documentType = try container.decode(String.self, forKey: .documentType)
        w2 = try container.decodeIfPresent(W2.self, forKey: .w2)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("doc_id")
        nonAdditionalPropertyKeys.insert("document_type")
        nonAdditionalPropertyKeys.insert("w2")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

