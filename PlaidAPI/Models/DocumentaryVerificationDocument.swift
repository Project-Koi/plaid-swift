//
// DocumentaryVerificationDocument.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Images, extracted data, and analysis from a user&#39;s identity document */
public struct DocumentaryVerificationDocument: Codable, JSONEncodable, Hashable {

    public var status: DocumentStatus
    /** The `attempt` field begins with 1 and increments with each subsequent document upload. */
    public var attempt: Int
    public var images: PhysicalDocumentImages
    public var extractedData: PhysicalDocumentExtractedData?
    public var analysis: DocumentAnalysis
    /** An ISO8601 formatted timestamp. */
    public var redactedAt: Date?

    public init(status: DocumentStatus, attempt: Int, images: PhysicalDocumentImages, extractedData: PhysicalDocumentExtractedData?, analysis: DocumentAnalysis, redactedAt: Date?) {
        self.status = status
        self.attempt = attempt
        self.images = images
        self.extractedData = extractedData
        self.analysis = analysis
        self.redactedAt = redactedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case status
        case attempt
        case images
        case extractedData = "extracted_data"
        case analysis
        case redactedAt = "redacted_at"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(status, forKey: .status)
        try container.encode(attempt, forKey: .attempt)
        try container.encode(images, forKey: .images)
        try container.encode(extractedData, forKey: .extractedData)
        try container.encode(analysis, forKey: .analysis)
        try container.encode(redactedAt, forKey: .redactedAt)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        status = try container.decode(DocumentStatus.self, forKey: .status)
        attempt = try container.decode(Int.self, forKey: .attempt)
        images = try container.decode(PhysicalDocumentImages.self, forKey: .images)
        extractedData = try container.decodeIfPresent(PhysicalDocumentExtractedData.self, forKey: .extractedData)
        analysis = try container.decode(DocumentAnalysis.self, forKey: .analysis)
        redactedAt = try container.decodeIfPresent(Date.self, forKey: .redactedAt)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("status")
        nonAdditionalPropertyKeys.insert("attempt")
        nonAdditionalPropertyKeys.insert("images")
        nonAdditionalPropertyKeys.insert("extracted_data")
        nonAdditionalPropertyKeys.insert("analysis")
        nonAdditionalPropertyKeys.insert("redacted_at")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

