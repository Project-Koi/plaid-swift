//
// DocumentRiskSignal.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Details about a certain reason as to why a document could potentially be fraudulent. */
public struct DocumentRiskSignal: Codable, JSONEncodable, Hashable {

    /** The result from the risk signal check. */
    public var type: String?
    /** The field which the risk signal was computed for */
    public var field: String?
    /** A flag used to quickly identify if the signal indicates that this field is authentic or fraudulent */
    public var hasFraudRisk: Bool?
    public var institutionMetadata: DocumentRiskSignalInstitutionMetadata?
    /** The expected value of the field, as seen on the document */
    public var expectedValue: String?
    /** The derived value obtained in the risk signal calculation process for this field */
    public var actualValue: String?
    /** A human-readable explanation providing more detail into the particular risk signal */
    public var signalDescription: String?
    /** The relevant page associated with the risk signal */
    public var pageNumber: Int?

    public init(type: String?, field: String?, hasFraudRisk: Bool?, institutionMetadata: DocumentRiskSignalInstitutionMetadata?, expectedValue: String?, actualValue: String?, signalDescription: String?, pageNumber: Int?) {
        self.type = type
        self.field = field
        self.hasFraudRisk = hasFraudRisk
        self.institutionMetadata = institutionMetadata
        self.expectedValue = expectedValue
        self.actualValue = actualValue
        self.signalDescription = signalDescription
        self.pageNumber = pageNumber
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case field
        case hasFraudRisk = "has_fraud_risk"
        case institutionMetadata = "institution_metadata"
        case expectedValue = "expected_value"
        case actualValue = "actual_value"
        case signalDescription = "signal_description"
        case pageNumber = "page_number"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(field, forKey: .field)
        try container.encode(hasFraudRisk, forKey: .hasFraudRisk)
        try container.encode(institutionMetadata, forKey: .institutionMetadata)
        try container.encode(expectedValue, forKey: .expectedValue)
        try container.encode(actualValue, forKey: .actualValue)
        try container.encode(signalDescription, forKey: .signalDescription)
        try container.encode(pageNumber, forKey: .pageNumber)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        type = try container.decodeIfPresent(String.self, forKey: .type)
        field = try container.decodeIfPresent(String.self, forKey: .field)
        hasFraudRisk = try container.decodeIfPresent(Bool.self, forKey: .hasFraudRisk)
        institutionMetadata = try container.decodeIfPresent(DocumentRiskSignalInstitutionMetadata.self, forKey: .institutionMetadata)
        expectedValue = try container.decodeIfPresent(String.self, forKey: .expectedValue)
        actualValue = try container.decodeIfPresent(String.self, forKey: .actualValue)
        signalDescription = try container.decodeIfPresent(String.self, forKey: .signalDescription)
        pageNumber = try container.decodeIfPresent(Int.self, forKey: .pageNumber)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("type")
        nonAdditionalPropertyKeys.insert("field")
        nonAdditionalPropertyKeys.insert("has_fraud_risk")
        nonAdditionalPropertyKeys.insert("institution_metadata")
        nonAdditionalPropertyKeys.insert("expected_value")
        nonAdditionalPropertyKeys.insert("actual_value")
        nonAdditionalPropertyKeys.insert("signal_description")
        nonAdditionalPropertyKeys.insert("page_number")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

