//
// RecurringInsightsStream.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Insights object for recurring transactions streams. */
public struct RecurringInsightsStream: Codable, JSONEncodable, Hashable {

    /** A unique id for the stream. */
    public var streamId: String
    /** The client-provided raw description of the most recent transaction in the stream. */
    public var description: String?
    /** The merchant or primary counterparty associated with the transaction stream. */
    public var merchantName: String
    /** The posted date of the earliest transaction in the stream. */
    public var oldestTransactionDate: Date?
    /** The posted date of the latest transaction in the stream. */
    public var newestTransactionDate: Date?
    /** The average number of days between each of the recurring transactions. */
    public var averageDaysApart: Double
    public var frequency: RecurringTransactionFrequency?
    /** The number of transactions in this stream. */
    public var transactionCount: Int?
    /** An array of Plaid transaction IDs belonging to the stream, sorted by posted date. */
    public var transactionIds: [String]?
    public var averageAmount: TransactionStreamAmount?
    public var newestTransactionAmount: TransactionStreamAmount?
    /** Indicates whether the transaction stream is still live. */
    public var isActive: Bool
    public var status: TransactionStreamStatus?
    /** The primary category associated with the transaction stream. */
    public var personalFinanceCategoryPrimary: String?
    /** The detailed category associated with the transaction stream. */
    public var personalFinanceCategoryDetailed: String?

    public init(streamId: String, description: String? = nil, merchantName: String, oldestTransactionDate: Date? = nil, newestTransactionDate: Date? = nil, averageDaysApart: Double, frequency: RecurringTransactionFrequency? = nil, transactionCount: Int? = nil, transactionIds: [String]? = nil, averageAmount: TransactionStreamAmount? = nil, newestTransactionAmount: TransactionStreamAmount? = nil, isActive: Bool, status: TransactionStreamStatus? = nil, personalFinanceCategoryPrimary: String? = nil, personalFinanceCategoryDetailed: String? = nil) {
        self.streamId = streamId
        self.description = description
        self.merchantName = merchantName
        self.oldestTransactionDate = oldestTransactionDate
        self.newestTransactionDate = newestTransactionDate
        self.averageDaysApart = averageDaysApart
        self.frequency = frequency
        self.transactionCount = transactionCount
        self.transactionIds = transactionIds
        self.averageAmount = averageAmount
        self.newestTransactionAmount = newestTransactionAmount
        self.isActive = isActive
        self.status = status
        self.personalFinanceCategoryPrimary = personalFinanceCategoryPrimary
        self.personalFinanceCategoryDetailed = personalFinanceCategoryDetailed
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case streamId = "stream_id"
        case description
        case merchantName = "merchant_name"
        case oldestTransactionDate = "oldest_transaction_date"
        case newestTransactionDate = "newest_transaction_date"
        case averageDaysApart = "average_days_apart"
        case frequency
        case transactionCount = "transaction_count"
        case transactionIds = "transaction_ids"
        case averageAmount = "average_amount"
        case newestTransactionAmount = "newest_transaction_amount"
        case isActive = "is_active"
        case status
        case personalFinanceCategoryPrimary = "personal_finance_category_primary"
        case personalFinanceCategoryDetailed = "personal_finance_category_detailed"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(streamId, forKey: .streamId)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(merchantName, forKey: .merchantName)
        try container.encodeIfPresent(oldestTransactionDate, forKey: .oldestTransactionDate)
        try container.encodeIfPresent(newestTransactionDate, forKey: .newestTransactionDate)
        try container.encode(averageDaysApart, forKey: .averageDaysApart)
        try container.encodeIfPresent(frequency, forKey: .frequency)
        try container.encodeIfPresent(transactionCount, forKey: .transactionCount)
        try container.encodeIfPresent(transactionIds, forKey: .transactionIds)
        try container.encodeIfPresent(averageAmount, forKey: .averageAmount)
        try container.encodeIfPresent(newestTransactionAmount, forKey: .newestTransactionAmount)
        try container.encode(isActive, forKey: .isActive)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(personalFinanceCategoryPrimary, forKey: .personalFinanceCategoryPrimary)
        try container.encodeIfPresent(personalFinanceCategoryDetailed, forKey: .personalFinanceCategoryDetailed)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        streamId = try container.decode(String.self, forKey: .streamId)
        description = try container.decodeIfPresent(String.self, forKey: .description)
        merchantName = try container.decode(String.self, forKey: .merchantName)
        oldestTransactionDate = try container.decodeIfPresent(Date.self, forKey: .oldestTransactionDate)
        newestTransactionDate = try container.decodeIfPresent(Date.self, forKey: .newestTransactionDate)
        averageDaysApart = try container.decode(Double.self, forKey: .averageDaysApart)
        frequency = try container.decodeIfPresent(RecurringTransactionFrequency.self, forKey: .frequency)
        transactionCount = try container.decodeIfPresent(Int.self, forKey: .transactionCount)
        transactionIds = try container.decodeIfPresent([String].self, forKey: .transactionIds)
        averageAmount = try container.decodeIfPresent(TransactionStreamAmount.self, forKey: .averageAmount)
        newestTransactionAmount = try container.decodeIfPresent(TransactionStreamAmount.self, forKey: .newestTransactionAmount)
        isActive = try container.decode(Bool.self, forKey: .isActive)
        status = try container.decodeIfPresent(TransactionStreamStatus.self, forKey: .status)
        personalFinanceCategoryPrimary = try container.decodeIfPresent(String.self, forKey: .personalFinanceCategoryPrimary)
        personalFinanceCategoryDetailed = try container.decodeIfPresent(String.self, forKey: .personalFinanceCategoryDetailed)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("stream_id")
        nonAdditionalPropertyKeys.insert("description")
        nonAdditionalPropertyKeys.insert("merchant_name")
        nonAdditionalPropertyKeys.insert("oldest_transaction_date")
        nonAdditionalPropertyKeys.insert("newest_transaction_date")
        nonAdditionalPropertyKeys.insert("average_days_apart")
        nonAdditionalPropertyKeys.insert("frequency")
        nonAdditionalPropertyKeys.insert("transaction_count")
        nonAdditionalPropertyKeys.insert("transaction_ids")
        nonAdditionalPropertyKeys.insert("average_amount")
        nonAdditionalPropertyKeys.insert("newest_transaction_amount")
        nonAdditionalPropertyKeys.insert("is_active")
        nonAdditionalPropertyKeys.insert("status")
        nonAdditionalPropertyKeys.insert("personal_finance_category_primary")
        nonAdditionalPropertyKeys.insert("personal_finance_category_detailed")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

