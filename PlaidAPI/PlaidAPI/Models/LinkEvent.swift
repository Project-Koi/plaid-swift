//
// LinkEvent.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An event that occurred while the user was going through Link */
public struct LinkEvent: Codable, JSONEncodable, Hashable {

    /** Event name */
    public var eventName: String
    /** Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. */
    public var timestamp: String
    /** UUID that can be used to deduplicate events */
    public var eventId: String
    public var eventMetadata: LinkEventMetadata

    public init(eventName: String, timestamp: String, eventId: String, eventMetadata: LinkEventMetadata) {
        self.eventName = eventName
        self.timestamp = timestamp
        self.eventId = eventId
        self.eventMetadata = eventMetadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eventName = "event_name"
        case timestamp
        case eventId = "event_id"
        case eventMetadata = "event_metadata"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(eventName, forKey: .eventName)
        try container.encode(timestamp, forKey: .timestamp)
        try container.encode(eventId, forKey: .eventId)
        try container.encode(eventMetadata, forKey: .eventMetadata)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        eventName = try container.decode(String.self, forKey: .eventName)
        timestamp = try container.decode(String.self, forKey: .timestamp)
        eventId = try container.decode(String.self, forKey: .eventId)
        eventMetadata = try container.decode(LinkEventMetadata.self, forKey: .eventMetadata)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("event_name")
        nonAdditionalPropertyKeys.insert("timestamp")
        nonAdditionalPropertyKeys.insert("event_id")
        nonAdditionalPropertyKeys.insert("event_metadata")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

