//
// AssetReportGetRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** AssetReportGetRequest defines the request schema for &#x60;/asset_report/get&#x60; */
public struct AssetReportGetRequest: Codable, JSONEncodable, Hashable {

    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report. */
    public var assetReportToken: String?
    /** The user token associated with the User for which to create an asset report for. The latest asset report associated with the User will be returned */
    public var userToken: String?
    /** `true` if you would like to retrieve the Asset Report with Insights, `false` otherwise. This field defaults to `false` if omitted. */
    public var includeInsights: Bool? = false
    /** `true` to fetch \"fast\" version of asset report. Defaults to false if omitted. Can only be used if `/asset_report/create` was called with `options.add_ons` set to `[\"fast_assets\"]`. */
    public var fastReport: Bool? = false
    public var options: AssetReportGetRequestOptions?

    public init(clientId: String? = nil, secret: String? = nil, assetReportToken: String? = nil, userToken: String? = nil, includeInsights: Bool? = false, fastReport: Bool? = false, options: AssetReportGetRequestOptions? = nil) {
        self.clientId = clientId
        self.secret = secret
        self.assetReportToken = assetReportToken
        self.userToken = userToken
        self.includeInsights = includeInsights
        self.fastReport = fastReport
        self.options = options
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case assetReportToken = "asset_report_token"
        case userToken = "user_token"
        case includeInsights = "include_insights"
        case fastReport = "fast_report"
        case options
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encodeIfPresent(assetReportToken, forKey: .assetReportToken)
        try container.encodeIfPresent(userToken, forKey: .userToken)
        try container.encodeIfPresent(includeInsights, forKey: .includeInsights)
        try container.encodeIfPresent(fastReport, forKey: .fastReport)
        try container.encodeIfPresent(options, forKey: .options)
    }
}

