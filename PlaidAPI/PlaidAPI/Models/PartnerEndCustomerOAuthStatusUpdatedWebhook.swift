//
// PartnerEndCustomerOAuthStatusUpdatedWebhook.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The webhook of type &#x60;PARTNER&#x60; and code &#x60;END_CUSTOMER_OAUTH_STATUS_UPDATED&#x60; will be fired when a partner&#39;s end customer has an update on their OAuth registration status with an institution. */
public struct PartnerEndCustomerOAuthStatusUpdatedWebhook: Codable, JSONEncodable, Hashable {

    /** `PARTNER` */
    public var webhookType: String
    /** `END_CUSTOMER_OAUTH_STATUS_UPDATED` */
    public var webhookCode: String
    /** The client ID of the end customer */
    public var endCustomerClientId: String
    public var environment: WebhookEnvironmentValues
    /** The institution ID */
    public var institutionId: String
    /** The institution name */
    public var institutionName: String
    public var status: PartnerEndCustomerOAuthStatusUpdatedValues

    public init(webhookType: String, webhookCode: String, endCustomerClientId: String, environment: WebhookEnvironmentValues, institutionId: String, institutionName: String, status: PartnerEndCustomerOAuthStatusUpdatedValues) {
        self.webhookType = webhookType
        self.webhookCode = webhookCode
        self.endCustomerClientId = endCustomerClientId
        self.environment = environment
        self.institutionId = institutionId
        self.institutionName = institutionName
        self.status = status
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case webhookType = "webhook_type"
        case webhookCode = "webhook_code"
        case endCustomerClientId = "end_customer_client_id"
        case environment
        case institutionId = "institution_id"
        case institutionName = "institution_name"
        case status
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(webhookType, forKey: .webhookType)
        try container.encode(webhookCode, forKey: .webhookCode)
        try container.encode(endCustomerClientId, forKey: .endCustomerClientId)
        try container.encode(environment, forKey: .environment)
        try container.encode(institutionId, forKey: .institutionId)
        try container.encode(institutionName, forKey: .institutionName)
        try container.encode(status, forKey: .status)
    }
}

