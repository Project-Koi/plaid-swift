//
// CreditAuditCopyTokenUpdateRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** CreditAuditCopyTokenUpdateRequest defines the request schema for &#x60;/credit/audit_copy_token/update&#x60; */
public struct CreditAuditCopyTokenUpdateRequest: Codable, JSONEncodable, Hashable {

    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** The `audit_copy_token` you would like to update. */
    public var auditCopyToken: String
    /** Array of tokens which the specified Audit Copy Token will be updated with. The types of token supported are asset report token and employment report token. There can be at most 1 of each token type in the array. */
    public var reportTokens: [String]

    public init(clientId: String? = nil, secret: String? = nil, auditCopyToken: String, reportTokens: [String]) {
        self.clientId = clientId
        self.secret = secret
        self.auditCopyToken = auditCopyToken
        self.reportTokens = reportTokens
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case auditCopyToken = "audit_copy_token"
        case reportTokens = "report_tokens"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encode(auditCopyToken, forKey: .auditCopyToken)
        try container.encode(reportTokens, forKey: .reportTokens)
    }
}

