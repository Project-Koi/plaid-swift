//
// TransferIntentGet.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Represents a transfer intent within Transfer UI. */
public struct TransferIntentGet: Codable, JSONEncodable, Hashable {

    /** Plaid's unique identifier for a transfer intent object. */
    public var id: String
    /** The datetime the transfer was created. This will be of the form `2006-01-02T15:04:05Z`. */
    public var created: Date
    public var status: TransferIntentStatus
    /** Plaid's unique identifier for the transfer created through the UI. Returned only if the transfer was successfully created. Null value otherwise. */
    public var transferId: String?
    public var failureReason: TransferIntentGetFailureReason?
    public var authorizationDecision: TransferIntentAuthorizationDecision?
    public var authorizationDecisionRationale: TransferAuthorizationDecisionRationale?
    /** The Plaid `account_id` for the account that will be debited or credited. Returned only if `account_id` was set on intent creation. */
    public var accountId: String?
    /** Plaidâ€™s unique identifier for the origination account used for the transfer. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var originationAccountId: String
    /** The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited. */
    public var fundingAccountId: String
    /** The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\"). When calling `/transfer/authorization/create`, specify the maximum amount to authorize. When calling `/transfer/create`, specify the exact amount of the transfer, up to a maximum of the amount authorized. If this field is left blank when calling `/transfer/create`, the maximum amount authorized in the `authorization_id` will be sent. */
    public var amount: String
    public var mode: TransferIntentCreateMode
    public var network: TransferIntentCreateNetwork?
    public var achClass: ACHClass?
    public var user: TransferUserInResponse
    /** A description for the underlying transfer. Maximum of 8 characters. */
    public var description: String
    /** The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: The JSON values must be Strings (no nested JSON objects allowed) Only ASCII characters may be used Maximum of 50 key/value pairs Maximum key length of 40 characters Maximum value length of 500 characters  */
    public var metadata: [String: String]?
    /** The currency of the transfer amount, e.g. \"USD\" */
    public var isoCurrencyCode: String
    /** When `true`, the transfer requires a `GUARANTEED` decision by Plaid to proceed (Guarantee customers only). */
    public var requireGuarantee: Bool?
    public var guaranteeDecision: TransferAuthorizationGuaranteeDecision?
    public var guaranteeDecisionRationale: TransferAuthorizationGuaranteeDecisionRationale?

    public init(id: String, created: Date, status: TransferIntentStatus, transferId: String?, failureReason: TransferIntentGetFailureReason?, authorizationDecision: TransferIntentAuthorizationDecision?, authorizationDecisionRationale: TransferAuthorizationDecisionRationale?, accountId: String? = nil, originationAccountId: String, fundingAccountId: String, amount: String, mode: TransferIntentCreateMode, network: TransferIntentCreateNetwork? = nil, achClass: ACHClass? = nil, user: TransferUserInResponse, description: String, metadata: [String: String]? = nil, isoCurrencyCode: String, requireGuarantee: Bool? = nil, guaranteeDecision: TransferAuthorizationGuaranteeDecision?, guaranteeDecisionRationale: TransferAuthorizationGuaranteeDecisionRationale?) {
        self.id = id
        self.created = created
        self.status = status
        self.transferId = transferId
        self.failureReason = failureReason
        self.authorizationDecision = authorizationDecision
        self.authorizationDecisionRationale = authorizationDecisionRationale
        self.accountId = accountId
        self.originationAccountId = originationAccountId
        self.fundingAccountId = fundingAccountId
        self.amount = amount
        self.mode = mode
        self.network = network
        self.achClass = achClass
        self.user = user
        self.description = description
        self.metadata = metadata
        self.isoCurrencyCode = isoCurrencyCode
        self.requireGuarantee = requireGuarantee
        self.guaranteeDecision = guaranteeDecision
        self.guaranteeDecisionRationale = guaranteeDecisionRationale
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case created
        case status
        case transferId = "transfer_id"
        case failureReason = "failure_reason"
        case authorizationDecision = "authorization_decision"
        case authorizationDecisionRationale = "authorization_decision_rationale"
        case accountId = "account_id"
        case originationAccountId = "origination_account_id"
        case fundingAccountId = "funding_account_id"
        case amount
        case mode
        case network
        case achClass = "ach_class"
        case user
        case description
        case metadata
        case isoCurrencyCode = "iso_currency_code"
        case requireGuarantee = "require_guarantee"
        case guaranteeDecision = "guarantee_decision"
        case guaranteeDecisionRationale = "guarantee_decision_rationale"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(created, forKey: .created)
        try container.encode(status, forKey: .status)
        try container.encode(transferId, forKey: .transferId)
        try container.encode(failureReason, forKey: .failureReason)
        try container.encode(authorizationDecision, forKey: .authorizationDecision)
        try container.encode(authorizationDecisionRationale, forKey: .authorizationDecisionRationale)
        try container.encodeIfPresent(accountId, forKey: .accountId)
        try container.encode(originationAccountId, forKey: .originationAccountId)
        try container.encode(fundingAccountId, forKey: .fundingAccountId)
        try container.encode(amount, forKey: .amount)
        try container.encode(mode, forKey: .mode)
        try container.encodeIfPresent(network, forKey: .network)
        try container.encodeIfPresent(achClass, forKey: .achClass)
        try container.encode(user, forKey: .user)
        try container.encode(description, forKey: .description)
        try container.encodeIfPresent(metadata, forKey: .metadata)
        try container.encode(isoCurrencyCode, forKey: .isoCurrencyCode)
        try container.encodeIfPresent(requireGuarantee, forKey: .requireGuarantee)
        try container.encode(guaranteeDecision, forKey: .guaranteeDecision)
        try container.encode(guaranteeDecisionRationale, forKey: .guaranteeDecisionRationale)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decode(String.self, forKey: .id)
        created = try container.decode(Date.self, forKey: .created)
        status = try container.decode(TransferIntentStatus.self, forKey: .status)
        transferId = try container.decodeIfPresent(String.self, forKey: .transferId)
        failureReason = try container.decodeIfPresent(TransferIntentGetFailureReason.self, forKey: .failureReason)
        authorizationDecision = try container.decodeIfPresent(TransferIntentAuthorizationDecision.self, forKey: .authorizationDecision)
        authorizationDecisionRationale = try container.decodeIfPresent(TransferAuthorizationDecisionRationale.self, forKey: .authorizationDecisionRationale)
        accountId = try container.decodeIfPresent(String.self, forKey: .accountId)
        originationAccountId = try container.decode(String.self, forKey: .originationAccountId)
        fundingAccountId = try container.decode(String.self, forKey: .fundingAccountId)
        amount = try container.decode(String.self, forKey: .amount)
        mode = try container.decode(TransferIntentCreateMode.self, forKey: .mode)
        network = try container.decodeIfPresent(TransferIntentCreateNetwork.self, forKey: .network)
        achClass = try container.decodeIfPresent(ACHClass.self, forKey: .achClass)
        user = try container.decode(TransferUserInResponse.self, forKey: .user)
        description = try container.decode(String.self, forKey: .description)
        metadata = try container.decodeIfPresent([String: String].self, forKey: .metadata)
        isoCurrencyCode = try container.decode(String.self, forKey: .isoCurrencyCode)
        requireGuarantee = try container.decodeIfPresent(Bool.self, forKey: .requireGuarantee)
        guaranteeDecision = try container.decodeIfPresent(TransferAuthorizationGuaranteeDecision.self, forKey: .guaranteeDecision)
        guaranteeDecisionRationale = try container.decodeIfPresent(TransferAuthorizationGuaranteeDecisionRationale.self, forKey: .guaranteeDecisionRationale)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("id")
        nonAdditionalPropertyKeys.insert("created")
        nonAdditionalPropertyKeys.insert("status")
        nonAdditionalPropertyKeys.insert("transfer_id")
        nonAdditionalPropertyKeys.insert("failure_reason")
        nonAdditionalPropertyKeys.insert("authorization_decision")
        nonAdditionalPropertyKeys.insert("authorization_decision_rationale")
        nonAdditionalPropertyKeys.insert("account_id")
        nonAdditionalPropertyKeys.insert("origination_account_id")
        nonAdditionalPropertyKeys.insert("funding_account_id")
        nonAdditionalPropertyKeys.insert("amount")
        nonAdditionalPropertyKeys.insert("mode")
        nonAdditionalPropertyKeys.insert("network")
        nonAdditionalPropertyKeys.insert("ach_class")
        nonAdditionalPropertyKeys.insert("user")
        nonAdditionalPropertyKeys.insert("description")
        nonAdditionalPropertyKeys.insert("metadata")
        nonAdditionalPropertyKeys.insert("iso_currency_code")
        nonAdditionalPropertyKeys.insert("require_guarantee")
        nonAdditionalPropertyKeys.insert("guarantee_decision")
        nonAdditionalPropertyKeys.insert("guarantee_decision_rationale")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

