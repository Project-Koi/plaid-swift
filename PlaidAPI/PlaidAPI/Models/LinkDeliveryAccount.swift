//
// LinkDeliveryAccount.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Information related to account attached to the connected Item */
public struct LinkDeliveryAccount: Codable, JSONEncodable, Hashable {

    /** The Plaid `account_id` */
    public var id: String?
    /** The official account name */
    public var name: String?
    /** The last 2-4 alphanumeric characters of an account's official account number. Note that the mask may be non-unique between an Item's accounts. It may also not match the mask that the bank displays to the user. */
    public var mask: String?
    /** The account type. See the [Account schema](https://plaid.com/docs/api/accounts/#account-type-schema) for a full list of possible values */
    public var type: String?
    /** The account subtype. See the [Account schema](https://plaid.com/docs/api/accounts/#account-type-schema) for a full list of possible values */
    public var subtype: String?
    public var verificationStatus: LinkDeliveryVerificationStatus?
    /** If micro-deposit verification is being used, indicates whether the account being verified is a `business` or `personal` account. */
    public var classType: String?

    public init(id: String? = nil, name: String? = nil, mask: String? = nil, type: String? = nil, subtype: String? = nil, verificationStatus: LinkDeliveryVerificationStatus? = nil, classType: String? = nil) {
        self.id = id
        self.name = name
        self.mask = mask
        self.type = type
        self.subtype = subtype
        self.verificationStatus = verificationStatus
        self.classType = classType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case mask
        case type
        case subtype
        case verificationStatus = "verification_status"
        case classType = "class_type"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(mask, forKey: .mask)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(subtype, forKey: .subtype)
        try container.encodeIfPresent(verificationStatus, forKey: .verificationStatus)
        try container.encodeIfPresent(classType, forKey: .classType)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decodeIfPresent(String.self, forKey: .id)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        mask = try container.decodeIfPresent(String.self, forKey: .mask)
        type = try container.decodeIfPresent(String.self, forKey: .type)
        subtype = try container.decodeIfPresent(String.self, forKey: .subtype)
        verificationStatus = try container.decodeIfPresent(LinkDeliveryVerificationStatus.self, forKey: .verificationStatus)
        classType = try container.decodeIfPresent(String.self, forKey: .classType)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("id")
        nonAdditionalPropertyKeys.insert("name")
        nonAdditionalPropertyKeys.insert("mask")
        nonAdditionalPropertyKeys.insert("type")
        nonAdditionalPropertyKeys.insert("subtype")
        nonAdditionalPropertyKeys.insert("verification_status")
        nonAdditionalPropertyKeys.insert("class_type")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

