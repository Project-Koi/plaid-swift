//
// NumbersEFT.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Identifying information for transferring money to or from a Canadian bank account via EFT. */
public struct NumbersEFT: Codable, JSONEncodable, Hashable {

    /** The Plaid account ID associated with the account numbers */
    public var accountId: String
    /** The EFT account number for the account */
    public var account: String
    /** The EFT institution number for the account */
    public var institution: String
    /** The EFT branch number for the account */
    public var branch: String

    public init(accountId: String, account: String, institution: String, branch: String) {
        self.accountId = accountId
        self.account = account
        self.institution = institution
        self.branch = branch
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountId = "account_id"
        case account
        case institution
        case branch
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(accountId, forKey: .accountId)
        try container.encode(account, forKey: .account)
        try container.encode(institution, forKey: .institution)
        try container.encode(branch, forKey: .branch)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        accountId = try container.decode(String.self, forKey: .accountId)
        account = try container.decode(String.self, forKey: .account)
        institution = try container.decode(String.self, forKey: .institution)
        branch = try container.decode(String.self, forKey: .branch)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("account_id")
        nonAdditionalPropertyKeys.insert("account")
        nonAdditionalPropertyKeys.insert("institution")
        nonAdditionalPropertyKeys.insert("branch")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

