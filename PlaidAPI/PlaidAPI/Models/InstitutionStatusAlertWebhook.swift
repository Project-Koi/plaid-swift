//
// InstitutionStatusAlertWebhook.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Fired when institution status meets the conditions configured in the developer dashboard. */
public struct InstitutionStatusAlertWebhook: Codable, JSONEncodable, Hashable {

    /** `DASHBOARD_CONFIGURED_ALERT` */
    public var webhookType: String
    /** `INSTITUTION_STATUS_ALERT_TRIGGERED` */
    public var webhookCode: String
    /** The ID of the associated institution. */
    public var institutionId: String
    /** The global success rate of the institution, calculated based on item add health. */
    public var institutionOverallSuccessRate: Double
    public var environment: WebhookEnvironmentValues

    public init(webhookType: String, webhookCode: String, institutionId: String, institutionOverallSuccessRate: Double, environment: WebhookEnvironmentValues) {
        self.webhookType = webhookType
        self.webhookCode = webhookCode
        self.institutionId = institutionId
        self.institutionOverallSuccessRate = institutionOverallSuccessRate
        self.environment = environment
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case webhookType = "webhook_type"
        case webhookCode = "webhook_code"
        case institutionId = "institution_id"
        case institutionOverallSuccessRate = "institution_overall_success_rate"
        case environment
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(webhookType, forKey: .webhookType)
        try container.encode(webhookCode, forKey: .webhookCode)
        try container.encode(institutionId, forKey: .institutionId)
        try container.encode(institutionOverallSuccessRate, forKey: .institutionOverallSuccessRate)
        try container.encode(environment, forKey: .environment)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        webhookType = try container.decode(String.self, forKey: .webhookType)
        webhookCode = try container.decode(String.self, forKey: .webhookCode)
        institutionId = try container.decode(String.self, forKey: .institutionId)
        institutionOverallSuccessRate = try container.decode(Double.self, forKey: .institutionOverallSuccessRate)
        environment = try container.decode(WebhookEnvironmentValues.self, forKey: .environment)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("webhook_type")
        nonAdditionalPropertyKeys.insert("webhook_code")
        nonAdditionalPropertyKeys.insert("institution_id")
        nonAdditionalPropertyKeys.insert("institution_overall_success_rate")
        nonAdditionalPropertyKeys.insert("environment")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

