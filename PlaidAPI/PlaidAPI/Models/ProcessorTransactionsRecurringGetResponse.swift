//
// ProcessorTransactionsRecurringGetResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** ProcessorTransactionsRecurringGetResponse defines the response schema for &#x60;/processor/transactions/recurring/get&#x60; */
public struct ProcessorTransactionsRecurringGetResponse: Codable, JSONEncodable, Hashable {

    /** An array of depository transaction streams. */
    public var inflowStreams: [TransactionStream]
    /** An array of expense transaction streams. */
    public var outflowStreams: [TransactionStream]
    /** Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the last time transaction streams for the given account were updated on */
    public var updatedDatetime: Date
    /** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
    public var requestId: String

    public init(inflowStreams: [TransactionStream], outflowStreams: [TransactionStream], updatedDatetime: Date, requestId: String) {
        self.inflowStreams = inflowStreams
        self.outflowStreams = outflowStreams
        self.updatedDatetime = updatedDatetime
        self.requestId = requestId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case inflowStreams = "inflow_streams"
        case outflowStreams = "outflow_streams"
        case updatedDatetime = "updated_datetime"
        case requestId = "request_id"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(inflowStreams, forKey: .inflowStreams)
        try container.encode(outflowStreams, forKey: .outflowStreams)
        try container.encode(updatedDatetime, forKey: .updatedDatetime)
        try container.encode(requestId, forKey: .requestId)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        inflowStreams = try container.decode([TransactionStream].self, forKey: .inflowStreams)
        outflowStreams = try container.decode([TransactionStream].self, forKey: .outflowStreams)
        updatedDatetime = try container.decode(Date.self, forKey: .updatedDatetime)
        requestId = try container.decode(String.self, forKey: .requestId)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("inflow_streams")
        nonAdditionalPropertyKeys.insert("outflow_streams")
        nonAdditionalPropertyKeys.insert("updated_datetime")
        nonAdditionalPropertyKeys.insert("request_id")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

