//
// ProcessorBankTransferCreateRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Defines the request schema for &#x60;/processor/bank_transfer/create&#x60; */
public struct ProcessorBankTransferCreateRequest: Codable, JSONEncodable, Hashable {

    static let idempotencyKeyRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    static let descriptionRule = StringRule(minLength: nil, maxLength: 10, pattern: nil)
    static let customTagRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** A random key provided by the client, per unique bank transfer. Maximum of 50 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a bank transfer fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single bank transfer is created. */
    public var idempotencyKey: String
    /** The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>` */
    public var processorToken: String
    public var type: BankTransferType
    public var network: BankTransferNetwork
    /** The amount of the bank transfer (decimal string with two digits of precision e.g. \"10.00\"). */
    public var amount: String
    /** The currency of the transfer amount – should be set to \"USD\". */
    public var isoCurrencyCode: String
    /** The transfer description. Maximum of 10 characters. */
    public var description: String
    public var achClass: ACHClass?
    public var user: BankTransferUser
    /** An arbitrary string provided by the client for storage with the bank transfer. May be up to 100 characters. */
    public var customTag: String?
    /** The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: The JSON values must be Strings (no nested JSON objects allowed) Only ASCII characters may be used Maximum of 50 key/value pairs Maximum key length of 40 characters Maximum value length of 500 characters  */
    public var metadata: [String: String]?
    /** Plaid’s unique identifier for the origination account for this transfer. If you have more than one origination account, this value must be specified. */
    public var originationAccountId: String?

    public init(clientId: String? = nil, secret: String? = nil, idempotencyKey: String, processorToken: String, type: BankTransferType, network: BankTransferNetwork, amount: String, isoCurrencyCode: String, description: String, achClass: ACHClass? = nil, user: BankTransferUser, customTag: String? = nil, metadata: [String: String]? = nil, originationAccountId: String? = nil) {
        self.clientId = clientId
        self.secret = secret
        self.idempotencyKey = idempotencyKey
        self.processorToken = processorToken
        self.type = type
        self.network = network
        self.amount = amount
        self.isoCurrencyCode = isoCurrencyCode
        self.description = description
        self.achClass = achClass
        self.user = user
        self.customTag = customTag
        self.metadata = metadata
        self.originationAccountId = originationAccountId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case idempotencyKey = "idempotency_key"
        case processorToken = "processor_token"
        case type
        case network
        case amount
        case isoCurrencyCode = "iso_currency_code"
        case description
        case achClass = "ach_class"
        case user
        case customTag = "custom_tag"
        case metadata
        case originationAccountId = "origination_account_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encode(idempotencyKey, forKey: .idempotencyKey)
        try container.encode(processorToken, forKey: .processorToken)
        try container.encode(type, forKey: .type)
        try container.encode(network, forKey: .network)
        try container.encode(amount, forKey: .amount)
        try container.encode(isoCurrencyCode, forKey: .isoCurrencyCode)
        try container.encode(description, forKey: .description)
        try container.encodeIfPresent(achClass, forKey: .achClass)
        try container.encode(user, forKey: .user)
        try container.encodeIfPresent(customTag, forKey: .customTag)
        try container.encodeIfPresent(metadata, forKey: .metadata)
        try container.encodeIfPresent(originationAccountId, forKey: .originationAccountId)
    }
}

