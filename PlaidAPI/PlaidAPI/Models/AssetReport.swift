//
// AssetReport.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An object representing an Asset Report */
public struct AssetReport: Codable, JSONEncodable, Hashable {

    /** A unique ID identifying an Asset Report. Like all Plaid identifiers, this ID is case sensitive. */
    public var assetReportId: String
    /** An identifier you determine and submit for the Asset Report. */
    public var clientReportId: String?
    /** The date and time when the Asset Report was created, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (e.g. \"2018-04-12T03:32:11Z\"). */
    public var dateGenerated: Date
    /** The duration of transaction history you requested */
    public var daysRequested: Double
    public var user: AssetReportUser
    /** Data returned by Plaid about each of the Items included in the Asset Report. */
    public var items: [AssetReportItem]

    public init(assetReportId: String, clientReportId: String?, dateGenerated: Date, daysRequested: Double, user: AssetReportUser, items: [AssetReportItem]) {
        self.assetReportId = assetReportId
        self.clientReportId = clientReportId
        self.dateGenerated = dateGenerated
        self.daysRequested = daysRequested
        self.user = user
        self.items = items
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case assetReportId = "asset_report_id"
        case clientReportId = "client_report_id"
        case dateGenerated = "date_generated"
        case daysRequested = "days_requested"
        case user
        case items
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(assetReportId, forKey: .assetReportId)
        try container.encode(clientReportId, forKey: .clientReportId)
        try container.encode(dateGenerated, forKey: .dateGenerated)
        try container.encode(daysRequested, forKey: .daysRequested)
        try container.encode(user, forKey: .user)
        try container.encode(items, forKey: .items)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        assetReportId = try container.decode(String.self, forKey: .assetReportId)
        clientReportId = try container.decodeIfPresent(String.self, forKey: .clientReportId)
        dateGenerated = try container.decode(Date.self, forKey: .dateGenerated)
        daysRequested = try container.decode(Double.self, forKey: .daysRequested)
        user = try container.decode(AssetReportUser.self, forKey: .user)
        items = try container.decode([AssetReportItem].self, forKey: .items)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("asset_report_id")
        nonAdditionalPropertyKeys.insert("client_report_id")
        nonAdditionalPropertyKeys.insert("date_generated")
        nonAdditionalPropertyKeys.insert("days_requested")
        nonAdditionalPropertyKeys.insert("user")
        nonAdditionalPropertyKeys.insert("items")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

