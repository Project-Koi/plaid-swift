//
// PlaidError.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Errors are identified by &#x60;error_code&#x60; and categorized by &#x60;error_type&#x60;. Use these in preference to HTTP status codes to identify and handle specific errors. HTTP status codes are set and provide the broadest categorization of errors: 4xx codes are for developer- or user-related errors, and 5xx codes are for Plaid-related errors, and the status will be 2xx in non-error cases. An Item with a non-&#x60;null&#x60; error object will only be part of an API response when calling &#x60;/item/get&#x60; to view Item status. Otherwise, error fields will be &#x60;null&#x60; if no error has occurred; if an error has occurred, an error code will be returned instead. */
public struct PlaidError: Codable, JSONEncodable, Hashable {

    public var errorType: PlaidErrorType
    /** The particular error code. Safe for programmatic use. */
    public var errorCode: String
    /** A developer-friendly representation of the error code. This may change over time and is not safe for programmatic use. */
    public var errorMessage: String
    /** A user-friendly representation of the error code. `null` if the error is not related to user action.  This may change over time and is not safe for programmatic use. */
    public var displayMessage: String?
    /** A unique ID identifying the request, to be used for troubleshooting purposes. This field will be omitted in errors provided by webhooks. */
    public var requestId: String?
    /** In the Assets product, a request can pertain to more than one Item. If an error is returned for such a request, `causes` will return an array of errors containing a breakdown of these errors on the individual Item level, if any can be identified.  `causes` will only be provided for the `error_type` `ASSET_REPORT_ERROR`. `causes` will also not be populated inside an error nested within a `warning` object. */
    public var causes: [AnyCodable]?
    /** The HTTP status code associated with the error. This will only be returned in the response body when the error information is provided via a webhook. */
    public var status: Int?
    /** The URL of a Plaid documentation page with more information about the error */
    public var documentationUrl: String?
    /** Suggested steps for resolving the error */
    public var suggestedAction: String?

    public init(errorType: PlaidErrorType, errorCode: String, errorMessage: String, displayMessage: String?, requestId: String? = nil, causes: [AnyCodable]? = nil, status: Int? = nil, documentationUrl: String? = nil, suggestedAction: String? = nil) {
        self.errorType = errorType
        self.errorCode = errorCode
        self.errorMessage = errorMessage
        self.displayMessage = displayMessage
        self.requestId = requestId
        self.causes = causes
        self.status = status
        self.documentationUrl = documentationUrl
        self.suggestedAction = suggestedAction
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case errorType = "error_type"
        case errorCode = "error_code"
        case errorMessage = "error_message"
        case displayMessage = "display_message"
        case requestId = "request_id"
        case causes
        case status
        case documentationUrl = "documentation_url"
        case suggestedAction = "suggested_action"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(errorType, forKey: .errorType)
        try container.encode(errorCode, forKey: .errorCode)
        try container.encode(errorMessage, forKey: .errorMessage)
        try container.encode(displayMessage, forKey: .displayMessage)
        try container.encodeIfPresent(requestId, forKey: .requestId)
        try container.encodeIfPresent(causes, forKey: .causes)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(documentationUrl, forKey: .documentationUrl)
        try container.encodeIfPresent(suggestedAction, forKey: .suggestedAction)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        errorType = try container.decode(PlaidErrorType.self, forKey: .errorType)
        errorCode = try container.decode(String.self, forKey: .errorCode)
        errorMessage = try container.decode(String.self, forKey: .errorMessage)
        displayMessage = try container.decodeIfPresent(String.self, forKey: .displayMessage)
        requestId = try container.decodeIfPresent(String.self, forKey: .requestId)
        causes = try container.decodeIfPresent([AnyCodable].self, forKey: .causes)
        status = try container.decodeIfPresent(Int.self, forKey: .status)
        documentationUrl = try container.decodeIfPresent(String.self, forKey: .documentationUrl)
        suggestedAction = try container.decodeIfPresent(String.self, forKey: .suggestedAction)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("error_type")
        nonAdditionalPropertyKeys.insert("error_code")
        nonAdditionalPropertyKeys.insert("error_message")
        nonAdditionalPropertyKeys.insert("display_message")
        nonAdditionalPropertyKeys.insert("request_id")
        nonAdditionalPropertyKeys.insert("causes")
        nonAdditionalPropertyKeys.insert("status")
        nonAdditionalPropertyKeys.insert("documentation_url")
        nonAdditionalPropertyKeys.insert("suggested_action")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

