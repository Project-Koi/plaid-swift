//
// PartnerEndCustomerCustomerSupportInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** This information is public. Users of your app will see this information when managing connections between your app and their bank accounts in Plaid Portal. Defaults to partner&#39;s customer support info if omitted. */
public struct PartnerEndCustomerCustomerSupportInfo: Codable, JSONEncodable, Hashable {

    public var email: String?
    public var phoneNumber: String?
    public var contactUrl: String?
    public var linkUpdateUrl: String?

    public init(email: String? = nil, phoneNumber: String? = nil, contactUrl: String? = nil, linkUpdateUrl: String? = nil) {
        self.email = email
        self.phoneNumber = phoneNumber
        self.contactUrl = contactUrl
        self.linkUpdateUrl = linkUpdateUrl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case email
        case phoneNumber = "phone_number"
        case contactUrl = "contact_url"
        case linkUpdateUrl = "link_update_url"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(phoneNumber, forKey: .phoneNumber)
        try container.encodeIfPresent(contactUrl, forKey: .contactUrl)
        try container.encodeIfPresent(linkUpdateUrl, forKey: .linkUpdateUrl)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        email = try container.decodeIfPresent(String.self, forKey: .email)
        phoneNumber = try container.decodeIfPresent(String.self, forKey: .phoneNumber)
        contactUrl = try container.decodeIfPresent(String.self, forKey: .contactUrl)
        linkUpdateUrl = try container.decodeIfPresent(String.self, forKey: .linkUpdateUrl)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("email")
        nonAdditionalPropertyKeys.insert("phone_number")
        nonAdditionalPropertyKeys.insert("contact_url")
        nonAdditionalPropertyKeys.insert("link_update_url")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

