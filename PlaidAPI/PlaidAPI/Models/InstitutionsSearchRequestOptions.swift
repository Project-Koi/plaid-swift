//
// InstitutionsSearchRequestOptions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An optional object to filter &#x60;/institutions/search&#x60; results. */
public struct InstitutionsSearchRequestOptions: Codable, JSONEncodable, Hashable {

    /** Limit results to institutions with or without OAuth login flows. Note that institutions will have `oauth` set to `true` if some Items associated with that institution are required to use OAuth flows; institutions in a state of migration to OAuth will have the `oauth` attribute set to `true`. */
    public var oauth: Bool?
    /** When true, return the institution's homepage URL, logo and primary brand color. */
    public var includeOptionalMetadata: Bool?
    /** When `true`, returns metadata related to the Auth product indicating which auth methods are supported. */
    public var includeAuthMetadata: Bool? = false
    /** When `true`, returns metadata related to the Payment Initiation product indicating which payment configurations are supported. */
    public var includePaymentInitiationMetadata: Bool? = false
    public var paymentInitiation: InstitutionsSearchPaymentInitiationOptions?

    public init(oauth: Bool? = nil, includeOptionalMetadata: Bool? = nil, includeAuthMetadata: Bool? = false, includePaymentInitiationMetadata: Bool? = false, paymentInitiation: InstitutionsSearchPaymentInitiationOptions? = nil) {
        self.oauth = oauth
        self.includeOptionalMetadata = includeOptionalMetadata
        self.includeAuthMetadata = includeAuthMetadata
        self.includePaymentInitiationMetadata = includePaymentInitiationMetadata
        self.paymentInitiation = paymentInitiation
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case oauth
        case includeOptionalMetadata = "include_optional_metadata"
        case includeAuthMetadata = "include_auth_metadata"
        case includePaymentInitiationMetadata = "include_payment_initiation_metadata"
        case paymentInitiation = "payment_initiation"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(oauth, forKey: .oauth)
        try container.encodeIfPresent(includeOptionalMetadata, forKey: .includeOptionalMetadata)
        try container.encodeIfPresent(includeAuthMetadata, forKey: .includeAuthMetadata)
        try container.encodeIfPresent(includePaymentInitiationMetadata, forKey: .includePaymentInitiationMetadata)
        try container.encodeIfPresent(paymentInitiation, forKey: .paymentInitiation)
    }
}

