//
// IdentityDocumentUploadMetadata.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** In closed beta. Object representing metadata pertaining to the document. */
public struct IdentityDocumentUploadMetadata: Codable, JSONEncodable, Hashable {

    /** String enumeration of the submitted document type. */
    public var documentType: String?
    /** Boolean field indicating if the uploaded document's account number matches the account number we have on file */
    public var isAccountNumberMatch: Bool?
    public var pageCount: Int?
    public var lastUpdated: Date?
    public var uploadedAt: Date?

    public init(documentType: String? = nil, isAccountNumberMatch: Bool? = nil, pageCount: Int? = nil, lastUpdated: Date? = nil, uploadedAt: Date? = nil) {
        self.documentType = documentType
        self.isAccountNumberMatch = isAccountNumberMatch
        self.pageCount = pageCount
        self.lastUpdated = lastUpdated
        self.uploadedAt = uploadedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case documentType = "document_type"
        case isAccountNumberMatch = "is_account_number_match"
        case pageCount = "page_count"
        case lastUpdated = "last_updated"
        case uploadedAt = "uploaded_at"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(documentType, forKey: .documentType)
        try container.encodeIfPresent(isAccountNumberMatch, forKey: .isAccountNumberMatch)
        try container.encodeIfPresent(pageCount, forKey: .pageCount)
        try container.encodeIfPresent(lastUpdated, forKey: .lastUpdated)
        try container.encodeIfPresent(uploadedAt, forKey: .uploadedAt)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        documentType = try container.decodeIfPresent(String.self, forKey: .documentType)
        isAccountNumberMatch = try container.decodeIfPresent(Bool.self, forKey: .isAccountNumberMatch)
        pageCount = try container.decodeIfPresent(Int.self, forKey: .pageCount)
        lastUpdated = try container.decodeIfPresent(Date.self, forKey: .lastUpdated)
        uploadedAt = try container.decodeIfPresent(Date.self, forKey: .uploadedAt)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("document_type")
        nonAdditionalPropertyKeys.insert("is_account_number_match")
        nonAdditionalPropertyKeys.insert("page_count")
        nonAdditionalPropertyKeys.insert("last_updated")
        nonAdditionalPropertyKeys.insert("uploaded_at")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

