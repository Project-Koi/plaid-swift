//
// RecurringTransferNullable.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Represents a recurring transfer within the Transfers API. */
public struct RecurringTransferNullable: Codable, JSONEncodable, Hashable {

    /** Plaid’s unique identifier for a recurring transfer. */
    public var recurringTransferId: String
    /** The datetime when this transfer was created. This will be of the form `2006-01-02T15:04:05Z` */
    public var created: Date
    /** A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).  The next transfer origination date after bank holiday adjustment. */
    public var nextOriginationDate: Date?
    /** Plaid’s unique identifier for a test clock. */
    public var testClockId: String?
    public var type: TransferType
    /** The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\"). When calling `/transfer/authorization/create`, specify the maximum amount to authorize. When calling `/transfer/create`, specify the exact amount of the transfer, up to a maximum of the amount authorized. If this field is left blank when calling `/transfer/create`, the maximum amount authorized in the `authorization_id` will be sent. */
    public var amount: String
    public var status: TransferRecurringStatus
    public var achClass: ACHClass?
    public var network: TransferRecurringNetwork
    /** Plaid’s unique identifier for the origination account that was used for this transfer. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var originationAccountId: String
    /** The Plaid `account_id` corresponding to the end-user account that will be debited or credited. */
    public var accountId: String
    /** The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited. */
    public var fundingAccountId: String
    /** The currency of the transfer amount, e.g. \"USD\" */
    public var isoCurrencyCode: String
    /** The description of the recurring transfer. */
    public var description: String
    public var transferIds: [String]
    public var user: TransferUserInResponse
    public var schedule: TransferRecurringSchedule

    public init(recurringTransferId: String, created: Date, nextOriginationDate: Date?, testClockId: String? = nil, type: TransferType, amount: String, status: TransferRecurringStatus, achClass: ACHClass? = nil, network: TransferRecurringNetwork, originationAccountId: String, accountId: String, fundingAccountId: String, isoCurrencyCode: String, description: String, transferIds: [String], user: TransferUserInResponse, schedule: TransferRecurringSchedule) {
        self.recurringTransferId = recurringTransferId
        self.created = created
        self.nextOriginationDate = nextOriginationDate
        self.testClockId = testClockId
        self.type = type
        self.amount = amount
        self.status = status
        self.achClass = achClass
        self.network = network
        self.originationAccountId = originationAccountId
        self.accountId = accountId
        self.fundingAccountId = fundingAccountId
        self.isoCurrencyCode = isoCurrencyCode
        self.description = description
        self.transferIds = transferIds
        self.user = user
        self.schedule = schedule
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case recurringTransferId = "recurring_transfer_id"
        case created
        case nextOriginationDate = "next_origination_date"
        case testClockId = "test_clock_id"
        case type
        case amount
        case status
        case achClass = "ach_class"
        case network
        case originationAccountId = "origination_account_id"
        case accountId = "account_id"
        case fundingAccountId = "funding_account_id"
        case isoCurrencyCode = "iso_currency_code"
        case description
        case transferIds = "transfer_ids"
        case user
        case schedule
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(recurringTransferId, forKey: .recurringTransferId)
        try container.encode(created, forKey: .created)
        try container.encode(nextOriginationDate, forKey: .nextOriginationDate)
        try container.encodeIfPresent(testClockId, forKey: .testClockId)
        try container.encode(type, forKey: .type)
        try container.encode(amount, forKey: .amount)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(achClass, forKey: .achClass)
        try container.encode(network, forKey: .network)
        try container.encode(originationAccountId, forKey: .originationAccountId)
        try container.encode(accountId, forKey: .accountId)
        try container.encode(fundingAccountId, forKey: .fundingAccountId)
        try container.encode(isoCurrencyCode, forKey: .isoCurrencyCode)
        try container.encode(description, forKey: .description)
        try container.encode(transferIds, forKey: .transferIds)
        try container.encode(user, forKey: .user)
        try container.encode(schedule, forKey: .schedule)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        recurringTransferId = try container.decode(String.self, forKey: .recurringTransferId)
        created = try container.decode(Date.self, forKey: .created)
        nextOriginationDate = try container.decodeIfPresent(Date.self, forKey: .nextOriginationDate)
        testClockId = try container.decodeIfPresent(String.self, forKey: .testClockId)
        type = try container.decode(TransferType.self, forKey: .type)
        amount = try container.decode(String.self, forKey: .amount)
        status = try container.decode(TransferRecurringStatus.self, forKey: .status)
        achClass = try container.decodeIfPresent(ACHClass.self, forKey: .achClass)
        network = try container.decode(TransferRecurringNetwork.self, forKey: .network)
        originationAccountId = try container.decode(String.self, forKey: .originationAccountId)
        accountId = try container.decode(String.self, forKey: .accountId)
        fundingAccountId = try container.decode(String.self, forKey: .fundingAccountId)
        isoCurrencyCode = try container.decode(String.self, forKey: .isoCurrencyCode)
        description = try container.decode(String.self, forKey: .description)
        transferIds = try container.decode([String].self, forKey: .transferIds)
        user = try container.decode(TransferUserInResponse.self, forKey: .user)
        schedule = try container.decode(TransferRecurringSchedule.self, forKey: .schedule)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("recurring_transfer_id")
        nonAdditionalPropertyKeys.insert("created")
        nonAdditionalPropertyKeys.insert("next_origination_date")
        nonAdditionalPropertyKeys.insert("test_clock_id")
        nonAdditionalPropertyKeys.insert("type")
        nonAdditionalPropertyKeys.insert("amount")
        nonAdditionalPropertyKeys.insert("status")
        nonAdditionalPropertyKeys.insert("ach_class")
        nonAdditionalPropertyKeys.insert("network")
        nonAdditionalPropertyKeys.insert("origination_account_id")
        nonAdditionalPropertyKeys.insert("account_id")
        nonAdditionalPropertyKeys.insert("funding_account_id")
        nonAdditionalPropertyKeys.insert("iso_currency_code")
        nonAdditionalPropertyKeys.insert("description")
        nonAdditionalPropertyKeys.insert("transfer_ids")
        nonAdditionalPropertyKeys.insert("user")
        nonAdditionalPropertyKeys.insert("schedule")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

