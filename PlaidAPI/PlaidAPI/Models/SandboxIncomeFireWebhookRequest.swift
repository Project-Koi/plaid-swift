//
// SandboxIncomeFireWebhookRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** SandboxIncomeFireWebhookRequest defines the request schema for &#x60;/sandbox/income/fire_webhook&#x60; */
public struct SandboxIncomeFireWebhookRequest: Codable, JSONEncodable, Hashable {

    public enum VerificationStatus: String, Codable, CaseIterable {
        case processingComplete = "VERIFICATION_STATUS_PROCESSING_COMPLETE"
        case processingFailed = "VERIFICATION_STATUS_PROCESSING_FAILED"
        case pendingApproval = "VERIFICATION_STATUS_PENDING_APPROVAL"
    }
    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** The Item ID associated with the verification. */
    public var itemId: String
    /** The Plaid `user_id` of the User associated with this webhook, warning, or error. */
    public var userId: String?
    /** The URL to which the webhook should be sent. */
    public var webhook: String
    /** `VERIFICATION_STATUS_PROCESSING_COMPLETE`: The income verification status processing has completed. If the user uploaded multiple documents, this webhook will fire when all documents have finished processing. Call the `/income/verification/paystubs/get` endpoint and check the document metadata to see which documents were successfully parsed.  `VERIFICATION_STATUS_PROCESSING_FAILED`: A failure occurred when attempting to process the verification documentation.  `VERIFICATION_STATUS_PENDING_APPROVAL`: (deprecated) The income verification has been sent to the user for review. */
    public var verificationStatus: VerificationStatus?
    public var webhookCode: SandboxIncomeWebhookFireRequestWebhookCode

    public init(clientId: String? = nil, secret: String? = nil, itemId: String, userId: String? = nil, webhook: String, verificationStatus: VerificationStatus? = nil, webhookCode: SandboxIncomeWebhookFireRequestWebhookCode) {
        self.clientId = clientId
        self.secret = secret
        self.itemId = itemId
        self.userId = userId
        self.webhook = webhook
        self.verificationStatus = verificationStatus
        self.webhookCode = webhookCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case itemId = "item_id"
        case userId = "user_id"
        case webhook
        case verificationStatus = "verification_status"
        case webhookCode = "webhook_code"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encode(itemId, forKey: .itemId)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encode(webhook, forKey: .webhook)
        try container.encodeIfPresent(verificationStatus, forKey: .verificationStatus)
        try container.encode(webhookCode, forKey: .webhookCode)
    }
}

