//
// PartnerEndCustomerOAuthInstitutionEnvironments.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Registration statuses by environment. */
public struct PartnerEndCustomerOAuthInstitutionEnvironments: Codable, JSONEncodable, Hashable {

    public var development: PartnerEndCustomerOAuthInstitutionApplicationStatus?
    public var production: PartnerEndCustomerOAuthInstitutionApplicationStatus?

    public init(development: PartnerEndCustomerOAuthInstitutionApplicationStatus? = nil, production: PartnerEndCustomerOAuthInstitutionApplicationStatus? = nil) {
        self.development = development
        self.production = production
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case development
        case production
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(development, forKey: .development)
        try container.encodeIfPresent(production, forKey: .production)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        development = try container.decodeIfPresent(PartnerEndCustomerOAuthInstitutionApplicationStatus.self, forKey: .development)
        production = try container.decodeIfPresent(PartnerEndCustomerOAuthInstitutionApplicationStatus.self, forKey: .production)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("development")
        nonAdditionalPropertyKeys.insert("production")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

