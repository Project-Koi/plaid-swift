//
// CraLoanRegister.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Contains loan data to register. */
public struct CraLoanRegister: Codable, JSONEncodable, Hashable {

    /** The user token for the user associated with the loan. */
    public var userToken: String
    /** A unique identifier for the loan.  Personally identifiable information, such as an email address or phone number, should not be used in the `loan_id`. */
    public var loanId: String
    public var type: CraLoanType
    public var paymentSchedule: CraLoanPaymentSchedule
    /** The date the loan account was opened. The date should be in ISO 8601 format (YYYY-MM-DD). */
    public var openedDate: Date
    public var openedWithStatus: CraLoanOpenedStatus
    /** The total amount of the approved loan. */
    public var loanAmount: Double?
    public var application: CraLoanRegisterApplication?

    public init(userToken: String, loanId: String, type: CraLoanType, paymentSchedule: CraLoanPaymentSchedule, openedDate: Date, openedWithStatus: CraLoanOpenedStatus, loanAmount: Double? = nil, application: CraLoanRegisterApplication? = nil) {
        self.userToken = userToken
        self.loanId = loanId
        self.type = type
        self.paymentSchedule = paymentSchedule
        self.openedDate = openedDate
        self.openedWithStatus = openedWithStatus
        self.loanAmount = loanAmount
        self.application = application
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case userToken = "user_token"
        case loanId = "loan_id"
        case type
        case paymentSchedule = "payment_schedule"
        case openedDate = "opened_date"
        case openedWithStatus = "opened_with_status"
        case loanAmount = "loan_amount"
        case application
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(userToken, forKey: .userToken)
        try container.encode(loanId, forKey: .loanId)
        try container.encode(type, forKey: .type)
        try container.encode(paymentSchedule, forKey: .paymentSchedule)
        try container.encode(openedDate, forKey: .openedDate)
        try container.encode(openedWithStatus, forKey: .openedWithStatus)
        try container.encodeIfPresent(loanAmount, forKey: .loanAmount)
        try container.encodeIfPresent(application, forKey: .application)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        userToken = try container.decode(String.self, forKey: .userToken)
        loanId = try container.decode(String.self, forKey: .loanId)
        type = try container.decode(CraLoanType.self, forKey: .type)
        paymentSchedule = try container.decode(CraLoanPaymentSchedule.self, forKey: .paymentSchedule)
        openedDate = try container.decode(Date.self, forKey: .openedDate)
        openedWithStatus = try container.decode(CraLoanOpenedStatus.self, forKey: .openedWithStatus)
        loanAmount = try container.decodeIfPresent(Double.self, forKey: .loanAmount)
        application = try container.decodeIfPresent(CraLoanRegisterApplication.self, forKey: .application)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("user_token")
        nonAdditionalPropertyKeys.insert("loan_id")
        nonAdditionalPropertyKeys.insert("type")
        nonAdditionalPropertyKeys.insert("payment_schedule")
        nonAdditionalPropertyKeys.insert("opened_date")
        nonAdditionalPropertyKeys.insert("opened_with_status")
        nonAdditionalPropertyKeys.insert("loan_amount")
        nonAdditionalPropertyKeys.insert("application")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

