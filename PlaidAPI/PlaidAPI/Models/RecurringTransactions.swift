//
// RecurringTransactions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Insights object for recurring transactions for &#x60;/beta/transactions/user_insights/v1/get&#x60; endpoint */
public struct RecurringTransactions: Codable, JSONEncodable, Hashable {

    /** An array of inflow transaction streams (e.g., income). */
    public var inflowStreams: [RecurringInsightsStream]
    /** An array of outflow transaction streams (e.g., subscriptions, bills, loan payments). */
    public var outflowStreams: [RecurringInsightsStream]

    public init(inflowStreams: [RecurringInsightsStream], outflowStreams: [RecurringInsightsStream]) {
        self.inflowStreams = inflowStreams
        self.outflowStreams = outflowStreams
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case inflowStreams = "inflow_streams"
        case outflowStreams = "outflow_streams"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(inflowStreams, forKey: .inflowStreams)
        try container.encode(outflowStreams, forKey: .outflowStreams)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        inflowStreams = try container.decode([RecurringInsightsStream].self, forKey: .inflowStreams)
        outflowStreams = try container.decode([RecurringInsightsStream].self, forKey: .outflowStreams)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("inflow_streams")
        nonAdditionalPropertyKeys.insert("outflow_streams")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

