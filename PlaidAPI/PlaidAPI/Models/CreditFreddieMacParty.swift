//
// CreditFreddieMacParty.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A collection of information about a single party to a transaction. Included direct participants like the borrower and seller as well as indirect participants such as the flood certificate provider. */
public struct CreditFreddieMacParty: Codable, JSONEncodable, Hashable {

    public var INDIVIDUAL: CreditFreddieMacPartyIndividual
    public var ROLES: Roles
    public var TAXPAYER_IDENTIFIERS: TaxpayerIdentifiers

    public init(INDIVIDUAL: CreditFreddieMacPartyIndividual, ROLES: Roles, TAXPAYER_IDENTIFIERS: TaxpayerIdentifiers) {
        self.INDIVIDUAL = INDIVIDUAL
        self.ROLES = ROLES
        self.TAXPAYER_IDENTIFIERS = TAXPAYER_IDENTIFIERS
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case INDIVIDUAL
        case ROLES
        case TAXPAYER_IDENTIFIERS
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(INDIVIDUAL, forKey: .INDIVIDUAL)
        try container.encode(ROLES, forKey: .ROLES)
        try container.encode(TAXPAYER_IDENTIFIERS, forKey: .TAXPAYER_IDENTIFIERS)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        INDIVIDUAL = try container.decode(CreditFreddieMacPartyIndividual.self, forKey: .INDIVIDUAL)
        ROLES = try container.decode(Roles.self, forKey: .ROLES)
        TAXPAYER_IDENTIFIERS = try container.decode(TaxpayerIdentifiers.self, forKey: .TAXPAYER_IDENTIFIERS)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("INDIVIDUAL")
        nonAdditionalPropertyKeys.insert("ROLES")
        nonAdditionalPropertyKeys.insert("TAXPAYER_IDENTIFIERS")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

