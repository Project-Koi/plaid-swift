//
// SandboxPublicTokenCreateRequestOptions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An optional set of options to be used when configuring the Item. If specified, must not be &#x60;null&#x60;. */
public struct SandboxPublicTokenCreateRequestOptions: Codable, JSONEncodable, Hashable {

    /** Specify a webhook to associate with the new Item. */
    public var webhook: String?
    /** Test username to use for the creation of the Sandbox Item. Default value is `user_good`. */
    public var overrideUsername: String? = "user_good"
    /** Test password to use for the creation of the Sandbox Item. Default value is `pass_good`. */
    public var overridePassword: String? = "pass_good"
    public var transactions: SandboxPublicTokenCreateRequestOptionsTransactions?
    public var statements: SandboxPublicTokenCreateRequestOptionsStatements?
    public var incomeVerification: SandboxPublicTokenCreateRequestOptionsIncomeVerification?

    public init(webhook: String? = nil, overrideUsername: String? = "user_good", overridePassword: String? = "pass_good", transactions: SandboxPublicTokenCreateRequestOptionsTransactions? = nil, statements: SandboxPublicTokenCreateRequestOptionsStatements? = nil, incomeVerification: SandboxPublicTokenCreateRequestOptionsIncomeVerification? = nil) {
        self.webhook = webhook
        self.overrideUsername = overrideUsername
        self.overridePassword = overridePassword
        self.transactions = transactions
        self.statements = statements
        self.incomeVerification = incomeVerification
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case webhook
        case overrideUsername = "override_username"
        case overridePassword = "override_password"
        case transactions
        case statements
        case incomeVerification = "income_verification"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(webhook, forKey: .webhook)
        try container.encodeIfPresent(overrideUsername, forKey: .overrideUsername)
        try container.encodeIfPresent(overridePassword, forKey: .overridePassword)
        try container.encodeIfPresent(transactions, forKey: .transactions)
        try container.encodeIfPresent(statements, forKey: .statements)
        try container.encodeIfPresent(incomeVerification, forKey: .incomeVerification)
    }
}

