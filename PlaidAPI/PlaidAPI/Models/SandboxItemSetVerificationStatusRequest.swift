//
// SandboxItemSetVerificationStatusRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** SandboxItemSetVerificationStatusRequest defines the request schema for &#x60;/sandbox/item/set_verification_status&#x60; */
public struct SandboxItemSetVerificationStatusRequest: Codable, JSONEncodable, Hashable {

    public enum VerificationStatus: String, Codable, CaseIterable {
        case automaticallyVerified = "automatically_verified"
        case verificationExpired = "verification_expired"
    }
    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** The access token associated with the Item data is being requested for. */
    public var accessToken: String
    /** The `account_id` of the account whose verification status is to be modified */
    public var accountId: String
    /** The verification status to set the account to. */
    public var verificationStatus: VerificationStatus

    public init(clientId: String? = nil, secret: String? = nil, accessToken: String, accountId: String, verificationStatus: VerificationStatus) {
        self.clientId = clientId
        self.secret = secret
        self.accessToken = accessToken
        self.accountId = accountId
        self.verificationStatus = verificationStatus
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case accessToken = "access_token"
        case accountId = "account_id"
        case verificationStatus = "verification_status"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encode(accessToken, forKey: .accessToken)
        try container.encode(accountId, forKey: .accountId)
        try container.encode(verificationStatus, forKey: .verificationStatus)
    }
}

