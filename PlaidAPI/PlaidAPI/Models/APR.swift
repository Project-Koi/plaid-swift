//
// APR.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Information about the APR on the account. */
public struct APR: Codable, JSONEncodable, Hashable {

    public enum AprType: String, Codable, CaseIterable {
        case balanceTransferApr = "balance_transfer_apr"
        case cashApr = "cash_apr"
        case purchaseApr = "purchase_apr"
        case special = "special"
    }
    /** Annual Percentage Rate applied.  */
    public var aprPercentage: Double
    /** The type of balance to which the APR applies. */
    public var aprType: AprType
    /** Amount of money that is subjected to the APR if a balance was carried beyond payment due date. How it is calculated can vary by card issuer. It is often calculated as an average daily balance. */
    public var balanceSubjectToApr: Double?
    /** Amount of money charged due to interest from last statement. */
    public var interestChargeAmount: Double?

    public init(aprPercentage: Double, aprType: AprType, balanceSubjectToApr: Double?, interestChargeAmount: Double?) {
        self.aprPercentage = aprPercentage
        self.aprType = aprType
        self.balanceSubjectToApr = balanceSubjectToApr
        self.interestChargeAmount = interestChargeAmount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case aprPercentage = "apr_percentage"
        case aprType = "apr_type"
        case balanceSubjectToApr = "balance_subject_to_apr"
        case interestChargeAmount = "interest_charge_amount"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(aprPercentage, forKey: .aprPercentage)
        try container.encode(aprType, forKey: .aprType)
        try container.encode(balanceSubjectToApr, forKey: .balanceSubjectToApr)
        try container.encode(interestChargeAmount, forKey: .interestChargeAmount)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        aprPercentage = try container.decode(Double.self, forKey: .aprPercentage)
        aprType = try container.decode(AprType.self, forKey: .aprType)
        balanceSubjectToApr = try container.decodeIfPresent(Double.self, forKey: .balanceSubjectToApr)
        interestChargeAmount = try container.decodeIfPresent(Double.self, forKey: .interestChargeAmount)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("apr_percentage")
        nonAdditionalPropertyKeys.insert("apr_type")
        nonAdditionalPropertyKeys.insert("balance_subject_to_apr")
        nonAdditionalPropertyKeys.insert("interest_charge_amount")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

