//
// StatementsAccount.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Account associated with the Item. */
public struct StatementsAccount: Codable, JSONEncodable, Hashable {

    /** Plaid's unique identifier for the account. */
    public var accountId: String
    /** The last 2-4 alphanumeric characters of an account's official account number. Note that the mask may be non-unique between an Item's accounts, and it may also not match the mask that the bank displays to the user. */
    public var accountMask: String
    /** The name of the account, either assigned by the user or by the financial institution itself. */
    public var accountName: String
    /** The official name of the account as given by the financial institution. */
    public var accountOfficialName: String
    /** The subtype of the account. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). */
    public var accountSubtype: String
    /** The type of account. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). */
    public var accountType: String
    /** The list of statements' metadata associated with this account. */
    public var statements: [StatementsStatement]

    public init(accountId: String, accountMask: String, accountName: String, accountOfficialName: String, accountSubtype: String, accountType: String, statements: [StatementsStatement]) {
        self.accountId = accountId
        self.accountMask = accountMask
        self.accountName = accountName
        self.accountOfficialName = accountOfficialName
        self.accountSubtype = accountSubtype
        self.accountType = accountType
        self.statements = statements
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountId = "account_id"
        case accountMask = "account_mask"
        case accountName = "account_name"
        case accountOfficialName = "account_official_name"
        case accountSubtype = "account_subtype"
        case accountType = "account_type"
        case statements
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(accountId, forKey: .accountId)
        try container.encode(accountMask, forKey: .accountMask)
        try container.encode(accountName, forKey: .accountName)
        try container.encode(accountOfficialName, forKey: .accountOfficialName)
        try container.encode(accountSubtype, forKey: .accountSubtype)
        try container.encode(accountType, forKey: .accountType)
        try container.encode(statements, forKey: .statements)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        accountId = try container.decode(String.self, forKey: .accountId)
        accountMask = try container.decode(String.self, forKey: .accountMask)
        accountName = try container.decode(String.self, forKey: .accountName)
        accountOfficialName = try container.decode(String.self, forKey: .accountOfficialName)
        accountSubtype = try container.decode(String.self, forKey: .accountSubtype)
        accountType = try container.decode(String.self, forKey: .accountType)
        statements = try container.decode([StatementsStatement].self, forKey: .statements)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("account_id")
        nonAdditionalPropertyKeys.insert("account_mask")
        nonAdditionalPropertyKeys.insert("account_name")
        nonAdditionalPropertyKeys.insert("account_official_name")
        nonAdditionalPropertyKeys.insert("account_subtype")
        nonAdditionalPropertyKeys.insert("account_type")
        nonAdditionalPropertyKeys.insert("statements")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

