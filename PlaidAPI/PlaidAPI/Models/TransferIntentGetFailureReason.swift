//
// TransferIntentGetFailureReason.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The reason for a failed transfer intent. Returned only if the transfer intent status is &#x60;failed&#x60;. Null otherwise. */
public struct TransferIntentGetFailureReason: Codable, JSONEncodable, Hashable {

    /** A broad categorization of the error. */
    public var errorType: String?
    /** A code representing the reason for a failed transfer intent (i.e., an API error or the authorization being declined). */
    public var errorCode: String?
    /** A human-readable description of the code associated with a failed transfer intent. */
    public var errorMessage: String?

    public init(errorType: String? = nil, errorCode: String? = nil, errorMessage: String? = nil) {
        self.errorType = errorType
        self.errorCode = errorCode
        self.errorMessage = errorMessage
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case errorType = "error_type"
        case errorCode = "error_code"
        case errorMessage = "error_message"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(errorType, forKey: .errorType)
        try container.encodeIfPresent(errorCode, forKey: .errorCode)
        try container.encodeIfPresent(errorMessage, forKey: .errorMessage)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        errorType = try container.decodeIfPresent(String.self, forKey: .errorType)
        errorCode = try container.decodeIfPresent(String.self, forKey: .errorCode)
        errorMessage = try container.decodeIfPresent(String.self, forKey: .errorMessage)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("error_type")
        nonAdditionalPropertyKeys.insert("error_code")
        nonAdditionalPropertyKeys.insert("error_message")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

