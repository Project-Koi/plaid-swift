//
// ItemStatusLastWebhook.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Information about the last webhook fired for the Item. */
public struct ItemStatusLastWebhook: Codable, JSONEncodable, Hashable {

    /** [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of when the webhook was fired.  */
    public var sentAt: Date?
    /** The last webhook code sent. */
    public var codeSent: String?

    public init(sentAt: Date? = nil, codeSent: String? = nil) {
        self.sentAt = sentAt
        self.codeSent = codeSent
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sentAt = "sent_at"
        case codeSent = "code_sent"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(sentAt, forKey: .sentAt)
        try container.encodeIfPresent(codeSent, forKey: .codeSent)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        sentAt = try container.decodeIfPresent(Date.self, forKey: .sentAt)
        codeSent = try container.decodeIfPresent(String.self, forKey: .codeSent)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("sent_at")
        nonAdditionalPropertyKeys.insert("code_sent")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

