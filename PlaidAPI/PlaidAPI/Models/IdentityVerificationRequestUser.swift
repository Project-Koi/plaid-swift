//
// IdentityVerificationRequestUser.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** User information collected outside of Link, most likely via your own onboarding process.  Each of the following identity fields are optional:  &#x60;email_address&#x60;  &#x60;phone_number&#x60;  &#x60;date_of_birth&#x60;  &#x60;name&#x60;  &#x60;address&#x60;  &#x60;id_number&#x60;  Specifically, these fields are optional in that they can either be fully provided (satisfying every required field in their subschema) or omitted from the request entirely by not providing the key or value. Providing these fields via the API will result in Link skipping the data collection process for the associated user. All verification steps enabled in the associated Identity Verification Template will still be run. Verification steps will either be run immediately, or once the user completes the &#x60;accept_tos&#x60; step, depending on the value provided to the &#x60;gave_consent&#x60; field. */
public struct IdentityVerificationRequestUser: Codable, JSONEncodable, Hashable {

    /** A valid email address. */
    public var emailAddress: String?
    /** A phone number in E.164 format. */
    public var phoneNumber: String?
    /** A date in the format YYYY-MM-DD (RFC 3339 Section 5.6). */
    public var dateOfBirth: Date?
    public var name: IdentityVerificationRequestUserName?
    public var address: UserAddress?
    public var idNumber: UserIDNumber?

    public init(emailAddress: String? = nil, phoneNumber: String? = nil, dateOfBirth: Date? = nil, name: IdentityVerificationRequestUserName? = nil, address: UserAddress? = nil, idNumber: UserIDNumber? = nil) {
        self.emailAddress = emailAddress
        self.phoneNumber = phoneNumber
        self.dateOfBirth = dateOfBirth
        self.name = name
        self.address = address
        self.idNumber = idNumber
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case emailAddress = "email_address"
        case phoneNumber = "phone_number"
        case dateOfBirth = "date_of_birth"
        case name
        case address
        case idNumber = "id_number"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(emailAddress, forKey: .emailAddress)
        try container.encodeIfPresent(phoneNumber, forKey: .phoneNumber)
        try container.encodeIfPresent(dateOfBirth, forKey: .dateOfBirth)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(idNumber, forKey: .idNumber)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        emailAddress = try container.decodeIfPresent(String.self, forKey: .emailAddress)
        phoneNumber = try container.decodeIfPresent(String.self, forKey: .phoneNumber)
        dateOfBirth = try container.decodeIfPresent(Date.self, forKey: .dateOfBirth)
        name = try container.decodeIfPresent(IdentityVerificationRequestUserName.self, forKey: .name)
        address = try container.decodeIfPresent(UserAddress.self, forKey: .address)
        idNumber = try container.decodeIfPresent(UserIDNumber.self, forKey: .idNumber)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("email_address")
        nonAdditionalPropertyKeys.insert("phone_number")
        nonAdditionalPropertyKeys.insert("date_of_birth")
        nonAdditionalPropertyKeys.insert("name")
        nonAdditionalPropertyKeys.insert("address")
        nonAdditionalPropertyKeys.insert("id_number")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

