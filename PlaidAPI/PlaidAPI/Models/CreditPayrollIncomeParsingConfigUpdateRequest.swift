//
// CreditPayrollIncomeParsingConfigUpdateRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** CreditPayrollIncomeParsingConfigUpdateRequest defines the request schema for &#x60;/credit/payroll_income/documents/update&#x60;. */
public struct CreditPayrollIncomeParsingConfigUpdateRequest: Codable, JSONEncodable, Hashable {

    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** The user token associated with the User data is being requested for. */
    public var userToken: String
    /** The `item_id` of the Item associated with this webhook, warning, or error */
    public var itemId: String?
    /** The types of analysis to enable for the document income verification session */
    public var parsingConfig: [IncomeVerificationDocParsingConfig]

    public init(clientId: String? = nil, secret: String? = nil, userToken: String, itemId: String? = nil, parsingConfig: [IncomeVerificationDocParsingConfig]) {
        self.clientId = clientId
        self.secret = secret
        self.userToken = userToken
        self.itemId = itemId
        self.parsingConfig = parsingConfig
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case userToken = "user_token"
        case itemId = "item_id"
        case parsingConfig = "parsing_config"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encode(userToken, forKey: .userToken)
        try container.encodeIfPresent(itemId, forKey: .itemId)
        try container.encode(parsingConfig, forKey: .parsingConfig)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        clientId = try container.decodeIfPresent(String.self, forKey: .clientId)
        secret = try container.decodeIfPresent(String.self, forKey: .secret)
        userToken = try container.decode(String.self, forKey: .userToken)
        itemId = try container.decodeIfPresent(String.self, forKey: .itemId)
        parsingConfig = try container.decode([IncomeVerificationDocParsingConfig].self, forKey: .parsingConfig)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("client_id")
        nonAdditionalPropertyKeys.insert("secret")
        nonAdditionalPropertyKeys.insert("user_token")
        nonAdditionalPropertyKeys.insert("item_id")
        nonAdditionalPropertyKeys.insert("parsing_config")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

