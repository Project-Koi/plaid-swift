//
// ClientProvidedTransaction.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A client-provided transaction for Plaid to enrich. */
public struct ClientProvidedTransaction: Codable, JSONEncodable, Hashable {

    /** A unique ID for the transaction used to help you tie data back to your systems. */
    public var id: String
    /** A unique user id used to group transactions for a given user, as a unique identifier from your application. Personally identifiable information, such as an email address or phone number, should not be used in the client_user_id. */
    public var clientUserId: String?
    /** A unique account id used to group transactions for a given account, as a unique identifier from your application. Personally identifiable information, such as an email address or phone number, should not be used in the client_account_id. */
    public var clientAccountId: String?
    /** The account type associated with the transaction. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). */
    public var accountType: String?
    /** The account subtype associated with the transaction. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). */
    public var accountSubtype: String?
    /** The raw description of the transaction. If you have location data in available an unstructured format, it may be appended to the `description` field. */
    public var description: String
    /** The absolute value of the transaction (>= 0). When testing Enrich, note that `amount` data should be realistic. Unrealistic or inaccurate `amount` data may result in reduced quality output. */
    public var amount: Double
    public var direction: EnrichTransactionDirection
    /** The ISO-4217 currency code of the transaction e.g. USD. */
    public var isoCurrencyCode: String
    public var location: ClientProvidedTransactionLocation?
    /** Merchant category codes (MCCs) are four-digit numbers that describe a merchant's primary business activities. */
    public var mcc: String?
    /** The date the transaction posted, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. */
    public var datePosted: Date?

    public init(id: String, clientUserId: String? = nil, clientAccountId: String? = nil, accountType: String? = nil, accountSubtype: String? = nil, description: String, amount: Double, direction: EnrichTransactionDirection, isoCurrencyCode: String, location: ClientProvidedTransactionLocation? = nil, mcc: String? = nil, datePosted: Date? = nil) {
        self.id = id
        self.clientUserId = clientUserId
        self.clientAccountId = clientAccountId
        self.accountType = accountType
        self.accountSubtype = accountSubtype
        self.description = description
        self.amount = amount
        self.direction = direction
        self.isoCurrencyCode = isoCurrencyCode
        self.location = location
        self.mcc = mcc
        self.datePosted = datePosted
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case clientUserId = "client_user_id"
        case clientAccountId = "client_account_id"
        case accountType = "account_type"
        case accountSubtype = "account_subtype"
        case description
        case amount
        case direction
        case isoCurrencyCode = "iso_currency_code"
        case location
        case mcc
        case datePosted = "date_posted"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(clientUserId, forKey: .clientUserId)
        try container.encodeIfPresent(clientAccountId, forKey: .clientAccountId)
        try container.encodeIfPresent(accountType, forKey: .accountType)
        try container.encodeIfPresent(accountSubtype, forKey: .accountSubtype)
        try container.encode(description, forKey: .description)
        try container.encode(amount, forKey: .amount)
        try container.encode(direction, forKey: .direction)
        try container.encode(isoCurrencyCode, forKey: .isoCurrencyCode)
        try container.encodeIfPresent(location, forKey: .location)
        try container.encodeIfPresent(mcc, forKey: .mcc)
        try container.encodeIfPresent(datePosted, forKey: .datePosted)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decode(String.self, forKey: .id)
        clientUserId = try container.decodeIfPresent(String.self, forKey: .clientUserId)
        clientAccountId = try container.decodeIfPresent(String.self, forKey: .clientAccountId)
        accountType = try container.decodeIfPresent(String.self, forKey: .accountType)
        accountSubtype = try container.decodeIfPresent(String.self, forKey: .accountSubtype)
        description = try container.decode(String.self, forKey: .description)
        amount = try container.decode(Double.self, forKey: .amount)
        direction = try container.decode(EnrichTransactionDirection.self, forKey: .direction)
        isoCurrencyCode = try container.decode(String.self, forKey: .isoCurrencyCode)
        location = try container.decodeIfPresent(ClientProvidedTransactionLocation.self, forKey: .location)
        mcc = try container.decodeIfPresent(String.self, forKey: .mcc)
        datePosted = try container.decodeIfPresent(Date.self, forKey: .datePosted)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("id")
        nonAdditionalPropertyKeys.insert("client_user_id")
        nonAdditionalPropertyKeys.insert("client_account_id")
        nonAdditionalPropertyKeys.insert("account_type")
        nonAdditionalPropertyKeys.insert("account_subtype")
        nonAdditionalPropertyKeys.insert("description")
        nonAdditionalPropertyKeys.insert("amount")
        nonAdditionalPropertyKeys.insert("direction")
        nonAdditionalPropertyKeys.insert("iso_currency_code")
        nonAdditionalPropertyKeys.insert("location")
        nonAdditionalPropertyKeys.insert("mcc")
        nonAdditionalPropertyKeys.insert("date_posted")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

