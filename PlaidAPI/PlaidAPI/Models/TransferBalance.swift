//
// TransferBalance.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Information about the balance held with Plaid. */
public struct TransferBalance: Codable, JSONEncodable, Hashable {

    /** The amount of this balance available for use (decimal string with two digits of precision e.g. \"10.00\"). */
    public var available: String
    /** The available balance, plus amount of pending funds that in processing (decimal string with two digits of precision e.g. \"10.00\"). */
    public var current: String?
    public var type: TransferBalanceType

    public init(available: String, current: String? = nil, type: TransferBalanceType) {
        self.available = available
        self.current = current
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case available
        case current
        case type
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(available, forKey: .available)
        try container.encodeIfPresent(current, forKey: .current)
        try container.encode(type, forKey: .type)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        available = try container.decode(String.self, forKey: .available)
        current = try container.decodeIfPresent(String.self, forKey: .current)
        type = try container.decode(TransferBalanceType.self, forKey: .type)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("available")
        nonAdditionalPropertyKeys.insert("current")
        nonAdditionalPropertyKeys.insert("type")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

