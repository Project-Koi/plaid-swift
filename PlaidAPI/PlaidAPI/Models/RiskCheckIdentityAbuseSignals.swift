//
// RiskCheckIdentityAbuseSignals.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Result summary object capturing abuse signals related to &#x60;identity abuse&#x60;, e.g. stolen and synthetic identity fraud. These attributes are only available for US identities and some signals may not be available depending on what information was collected. */
public struct RiskCheckIdentityAbuseSignals: Codable, JSONEncodable, Hashable {

    public var syntheticIdentity: RiskCheckSyntheticIdentity?
    public var stolenIdentity: RiskCheckStolenIdentity?

    public init(syntheticIdentity: RiskCheckSyntheticIdentity?, stolenIdentity: RiskCheckStolenIdentity?) {
        self.syntheticIdentity = syntheticIdentity
        self.stolenIdentity = stolenIdentity
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case syntheticIdentity = "synthetic_identity"
        case stolenIdentity = "stolen_identity"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(syntheticIdentity, forKey: .syntheticIdentity)
        try container.encode(stolenIdentity, forKey: .stolenIdentity)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        syntheticIdentity = try container.decodeIfPresent(RiskCheckSyntheticIdentity.self, forKey: .syntheticIdentity)
        stolenIdentity = try container.decodeIfPresent(RiskCheckStolenIdentity.self, forKey: .stolenIdentity)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("synthetic_identity")
        nonAdditionalPropertyKeys.insert("stolen_identity")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

