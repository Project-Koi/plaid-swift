//
// Wallet.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An object representing the e-wallet */
public struct Wallet: Codable, JSONEncodable, Hashable {

    /** A unique ID identifying the e-wallet */
    public var walletId: String
    public var balance: WalletBalance
    public var numbers: WalletNumbers
    /** The ID of the recipient that corresponds to the e-wallet account numbers */
    public var recipientId: String?
    public var status: WalletStatus

    public init(walletId: String, balance: WalletBalance, numbers: WalletNumbers, recipientId: String? = nil, status: WalletStatus) {
        self.walletId = walletId
        self.balance = balance
        self.numbers = numbers
        self.recipientId = recipientId
        self.status = status
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case walletId = "wallet_id"
        case balance
        case numbers
        case recipientId = "recipient_id"
        case status
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(walletId, forKey: .walletId)
        try container.encode(balance, forKey: .balance)
        try container.encode(numbers, forKey: .numbers)
        try container.encodeIfPresent(recipientId, forKey: .recipientId)
        try container.encode(status, forKey: .status)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        walletId = try container.decode(String.self, forKey: .walletId)
        balance = try container.decode(WalletBalance.self, forKey: .balance)
        numbers = try container.decode(WalletNumbers.self, forKey: .numbers)
        recipientId = try container.decodeIfPresent(String.self, forKey: .recipientId)
        status = try container.decode(WalletStatus.self, forKey: .status)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("wallet_id")
        nonAdditionalPropertyKeys.insert("balance")
        nonAdditionalPropertyKeys.insert("numbers")
        nonAdditionalPropertyKeys.insert("recipient_id")
        nonAdditionalPropertyKeys.insert("status")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

