//
// IncidentUpdate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An update on the health incident */
public struct IncidentUpdate: Codable, JSONEncodable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case investigating = "INVESTIGATING"
        case identified = "IDENTIFIED"
        case scheduled = "SCHEDULED"
        case resolved = "RESOLVED"
        case unknown = "UNKNOWN"
    }
    /** The content of the update. */
    public var description: String?
    /** The status of the incident. */
    public var status: Status?
    /** The date when the update was published, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `\"2020-10-30T15:26:48Z\"`. */
    public var updatedDate: Date?

    public init(description: String? = nil, status: Status? = nil, updatedDate: Date? = nil) {
        self.description = description
        self.status = status
        self.updatedDate = updatedDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case description
        case status
        case updatedDate = "updated_date"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(updatedDate, forKey: .updatedDate)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        description = try container.decodeIfPresent(String.self, forKey: .description)
        status = try container.decodeIfPresent(Status.self, forKey: .status)
        updatedDate = try container.decodeIfPresent(Date.self, forKey: .updatedDate)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("description")
        nonAdditionalPropertyKeys.insert("status")
        nonAdditionalPropertyKeys.insert("updated_date")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

