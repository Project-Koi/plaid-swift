//
// CraLoanPaymentHistory.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Contains the payment information for a loan payment period. */
public struct CraLoanPaymentHistory: Codable, JSONEncodable, Hashable {

    /** The index to identify the loan's payment period, starting from 1. For example:   1 means the period between the loan's opening date and the 1st payment due date.   2 means the period between the loan's 1st payment due date and 2nd payment due date. */
    public var period: Int
    /** The payment due date or end date of the payment period. The date should be in ISO 8601 format (YYYY-MM-DD). */
    public var dueDate: Date
    /** The number of days the loan was delinquent at the end of the pay period. If specified, should be greater of equal to 0. */
    public var daysPastDue: Int
    /** The amount past due or the charge-off amount of the loan at the end of the payment period. */
    public var amountPastDue: Double?
    /** The balance remaining on the loan at the end of the payment period. */
    public var balanceRemaining: Double?

    public init(period: Int, dueDate: Date, daysPastDue: Int, amountPastDue: Double? = nil, balanceRemaining: Double? = nil) {
        self.period = period
        self.dueDate = dueDate
        self.daysPastDue = daysPastDue
        self.amountPastDue = amountPastDue
        self.balanceRemaining = balanceRemaining
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case period
        case dueDate = "due_date"
        case daysPastDue = "days_past_due"
        case amountPastDue = "amount_past_due"
        case balanceRemaining = "balance_remaining"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(period, forKey: .period)
        try container.encode(dueDate, forKey: .dueDate)
        try container.encode(daysPastDue, forKey: .daysPastDue)
        try container.encodeIfPresent(amountPastDue, forKey: .amountPastDue)
        try container.encodeIfPresent(balanceRemaining, forKey: .balanceRemaining)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        period = try container.decode(Int.self, forKey: .period)
        dueDate = try container.decode(Date.self, forKey: .dueDate)
        daysPastDue = try container.decode(Int.self, forKey: .daysPastDue)
        amountPastDue = try container.decodeIfPresent(Double.self, forKey: .amountPastDue)
        balanceRemaining = try container.decodeIfPresent(Double.self, forKey: .balanceRemaining)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("period")
        nonAdditionalPropertyKeys.insert("due_date")
        nonAdditionalPropertyKeys.insert("days_past_due")
        nonAdditionalPropertyKeys.insert("amount_past_due")
        nonAdditionalPropertyKeys.insert("balance_remaining")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

