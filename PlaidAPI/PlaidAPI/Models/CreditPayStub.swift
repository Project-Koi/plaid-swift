//
// CreditPayStub.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An object representing an end user&#39;s pay stub. */
public struct CreditPayStub: Codable, JSONEncodable, Hashable {

    public var deductions: CreditPayStubDeductions
    /** An identifier of the document referenced by the document metadata. */
    public var documentId: String?
    public var documentMetadata: CreditDocumentMetadata
    public var earnings: CreditPayStubEarnings
    public var employee: CreditPayStubEmployee
    public var employer: CreditPayStubEmployer
    public var netPay: CreditPayStubNetPay
    public var payPeriodDetails: PayStubPayPeriodDetails

    public init(deductions: CreditPayStubDeductions, documentId: String?, documentMetadata: CreditDocumentMetadata, earnings: CreditPayStubEarnings, employee: CreditPayStubEmployee, employer: CreditPayStubEmployer, netPay: CreditPayStubNetPay, payPeriodDetails: PayStubPayPeriodDetails) {
        self.deductions = deductions
        self.documentId = documentId
        self.documentMetadata = documentMetadata
        self.earnings = earnings
        self.employee = employee
        self.employer = employer
        self.netPay = netPay
        self.payPeriodDetails = payPeriodDetails
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case deductions
        case documentId = "document_id"
        case documentMetadata = "document_metadata"
        case earnings
        case employee
        case employer
        case netPay = "net_pay"
        case payPeriodDetails = "pay_period_details"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(deductions, forKey: .deductions)
        try container.encode(documentId, forKey: .documentId)
        try container.encode(documentMetadata, forKey: .documentMetadata)
        try container.encode(earnings, forKey: .earnings)
        try container.encode(employee, forKey: .employee)
        try container.encode(employer, forKey: .employer)
        try container.encode(netPay, forKey: .netPay)
        try container.encode(payPeriodDetails, forKey: .payPeriodDetails)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        deductions = try container.decode(CreditPayStubDeductions.self, forKey: .deductions)
        documentId = try container.decodeIfPresent(String.self, forKey: .documentId)
        documentMetadata = try container.decode(CreditDocumentMetadata.self, forKey: .documentMetadata)
        earnings = try container.decode(CreditPayStubEarnings.self, forKey: .earnings)
        employee = try container.decode(CreditPayStubEmployee.self, forKey: .employee)
        employer = try container.decode(CreditPayStubEmployer.self, forKey: .employer)
        netPay = try container.decode(CreditPayStubNetPay.self, forKey: .netPay)
        payPeriodDetails = try container.decode(PayStubPayPeriodDetails.self, forKey: .payPeriodDetails)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("deductions")
        nonAdditionalPropertyKeys.insert("document_id")
        nonAdditionalPropertyKeys.insert("document_metadata")
        nonAdditionalPropertyKeys.insert("earnings")
        nonAdditionalPropertyKeys.insert("employee")
        nonAdditionalPropertyKeys.insert("employer")
        nonAdditionalPropertyKeys.insert("net_pay")
        nonAdditionalPropertyKeys.insert("pay_period_details")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

