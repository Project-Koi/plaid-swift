//
// StandaloneInvestmentTransactionType.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Valid values for investment transaction types and subtypes. Note that transactions representing inflow of cash will appear as negative amounts, outflow of cash will appear as positive amounts. */
public struct StandaloneInvestmentTransactionType: Codable, JSONEncodable, Hashable {

    /** Buying an investment */
    public var buy: String
    /** Selling an investment */
    public var sell: String
    /** A cancellation of a pending transaction */
    public var cancel: String
    /** Activity that modifies a cash position */
    public var cash: String
    /** Fees on the account, e.g. commission, bookkeeping, options-related. */
    public var fee: String
    /** Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer */
    public var transfer: String

    public init(buy: String, sell: String, cancel: String, cash: String, fee: String, transfer: String) {
        self.buy = buy
        self.sell = sell
        self.cancel = cancel
        self.cash = cash
        self.fee = fee
        self.transfer = transfer
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case buy
        case sell
        case cancel
        case cash
        case fee
        case transfer
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(buy, forKey: .buy)
        try container.encode(sell, forKey: .sell)
        try container.encode(cancel, forKey: .cancel)
        try container.encode(cash, forKey: .cash)
        try container.encode(fee, forKey: .fee)
        try container.encode(transfer, forKey: .transfer)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        buy = try container.decode(String.self, forKey: .buy)
        sell = try container.decode(String.self, forKey: .sell)
        cancel = try container.decode(String.self, forKey: .cancel)
        cash = try container.decode(String.self, forKey: .cash)
        fee = try container.decode(String.self, forKey: .fee)
        transfer = try container.decode(String.self, forKey: .transfer)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("buy")
        nonAdditionalPropertyKeys.insert("sell")
        nonAdditionalPropertyKeys.insert("cancel")
        nonAdditionalPropertyKeys.insert("cash")
        nonAdditionalPropertyKeys.insert("fee")
        nonAdditionalPropertyKeys.insert("transfer")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

