//
// W2StateAndLocalWages.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** W2 state and local wages */
public struct W2StateAndLocalWages: Codable, JSONEncodable, Hashable {

    /** State associated with the wage. */
    public var state: String?
    /** State identification number of the employer. */
    public var employerStateIdNumber: String?
    /** Wages and tips from the specified state. */
    public var stateWagesTips: String?
    /** Income tax from the specified state. */
    public var stateIncomeTax: String?
    /** Wages and tips from the locality. */
    public var localWagesTips: String?
    /** Income tax from the locality. */
    public var localIncomeTax: String?
    /** Name of the locality. */
    public var localityName: String?

    public init(state: String? = nil, employerStateIdNumber: String? = nil, stateWagesTips: String? = nil, stateIncomeTax: String? = nil, localWagesTips: String? = nil, localIncomeTax: String? = nil, localityName: String? = nil) {
        self.state = state
        self.employerStateIdNumber = employerStateIdNumber
        self.stateWagesTips = stateWagesTips
        self.stateIncomeTax = stateIncomeTax
        self.localWagesTips = localWagesTips
        self.localIncomeTax = localIncomeTax
        self.localityName = localityName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case state
        case employerStateIdNumber = "employer_state_id_number"
        case stateWagesTips = "state_wages_tips"
        case stateIncomeTax = "state_income_tax"
        case localWagesTips = "local_wages_tips"
        case localIncomeTax = "local_income_tax"
        case localityName = "locality_name"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(employerStateIdNumber, forKey: .employerStateIdNumber)
        try container.encodeIfPresent(stateWagesTips, forKey: .stateWagesTips)
        try container.encodeIfPresent(stateIncomeTax, forKey: .stateIncomeTax)
        try container.encodeIfPresent(localWagesTips, forKey: .localWagesTips)
        try container.encodeIfPresent(localIncomeTax, forKey: .localIncomeTax)
        try container.encodeIfPresent(localityName, forKey: .localityName)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        state = try container.decodeIfPresent(String.self, forKey: .state)
        employerStateIdNumber = try container.decodeIfPresent(String.self, forKey: .employerStateIdNumber)
        stateWagesTips = try container.decodeIfPresent(String.self, forKey: .stateWagesTips)
        stateIncomeTax = try container.decodeIfPresent(String.self, forKey: .stateIncomeTax)
        localWagesTips = try container.decodeIfPresent(String.self, forKey: .localWagesTips)
        localIncomeTax = try container.decodeIfPresent(String.self, forKey: .localIncomeTax)
        localityName = try container.decodeIfPresent(String.self, forKey: .localityName)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("state")
        nonAdditionalPropertyKeys.insert("employer_state_id_number")
        nonAdditionalPropertyKeys.insert("state_wages_tips")
        nonAdditionalPropertyKeys.insert("state_income_tax")
        nonAdditionalPropertyKeys.insert("local_wages_tips")
        nonAdditionalPropertyKeys.insert("local_income_tax")
        nonAdditionalPropertyKeys.insert("locality_name")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

