//
// LinkTokenGetResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** LinkTokenGetResponse defines the response schema for &#x60;/link/token/get&#x60; */
public struct LinkTokenGetResponse: Codable, JSONEncodable, Hashable {

    /** A `link_token`, which can be supplied to Link in order to initialize it and receive a `public_token`, which can be exchanged for an `access_token`. */
    public var linkToken: String
    /** The creation timestamp for the `link_token`, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. */
    public var createdAt: Date?
    /** The expiration timestamp for the `link_token`, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. */
    public var expiration: Date?
    /** Information about Link sessions created using this `link_token`. This field will only be present if your client is enabled for Backend Handoff. Session data will be provided for up to six hours after the session has ended. */
    public var linkSessions: [LinkTokenGetSessionsResponse]?
    public var metadata: LinkTokenGetMetadataResponse
    /** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
    public var requestId: String

    public init(linkToken: String, createdAt: Date?, expiration: Date?, linkSessions: [LinkTokenGetSessionsResponse]? = nil, metadata: LinkTokenGetMetadataResponse, requestId: String) {
        self.linkToken = linkToken
        self.createdAt = createdAt
        self.expiration = expiration
        self.linkSessions = linkSessions
        self.metadata = metadata
        self.requestId = requestId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case linkToken = "link_token"
        case createdAt = "created_at"
        case expiration
        case linkSessions = "link_sessions"
        case metadata
        case requestId = "request_id"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(linkToken, forKey: .linkToken)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(expiration, forKey: .expiration)
        try container.encodeIfPresent(linkSessions, forKey: .linkSessions)
        try container.encode(metadata, forKey: .metadata)
        try container.encode(requestId, forKey: .requestId)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        linkToken = try container.decode(String.self, forKey: .linkToken)
        createdAt = try container.decodeIfPresent(Date.self, forKey: .createdAt)
        expiration = try container.decodeIfPresent(Date.self, forKey: .expiration)
        linkSessions = try container.decodeIfPresent([LinkTokenGetSessionsResponse].self, forKey: .linkSessions)
        metadata = try container.decode(LinkTokenGetMetadataResponse.self, forKey: .metadata)
        requestId = try container.decode(String.self, forKey: .requestId)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("link_token")
        nonAdditionalPropertyKeys.insert("created_at")
        nonAdditionalPropertyKeys.insert("expiration")
        nonAdditionalPropertyKeys.insert("link_sessions")
        nonAdditionalPropertyKeys.insert("metadata")
        nonAdditionalPropertyKeys.insert("request_id")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

