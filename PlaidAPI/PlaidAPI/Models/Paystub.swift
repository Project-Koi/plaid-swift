//
// Paystub.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An object representing data extracted from the end user&#39;s paystub. */
public struct Paystub: Codable, JSONEncodable, Hashable {

    public var deductions: Deductions
    /** An identifier of the document referenced by the document metadata. */
    public var docId: String
    public var earnings: Earnings
    public var employee: Employee
    public var employer: PaystubEmployer
    @available(*, deprecated, message: "This property is deprecated.")
    public var employmentDetails: EmploymentDetails?
    public var netPay: NetPay
    public var payPeriodDetails: PayPeriodDetails
    @available(*, deprecated, message: "This property is deprecated.")
    public var paystubDetails: PaystubDetails?
    @available(*, deprecated, message: "This property is deprecated.")
    public var incomeBreakdown: [IncomeBreakdown]?
    @available(*, deprecated, message: "This property is deprecated.")
    public var ytdEarnings: PaystubYTDDetails?

    public init(deductions: Deductions, docId: String, earnings: Earnings, employee: Employee, employer: PaystubEmployer, employmentDetails: EmploymentDetails? = nil, netPay: NetPay, payPeriodDetails: PayPeriodDetails, paystubDetails: PaystubDetails? = nil, incomeBreakdown: [IncomeBreakdown]? = nil, ytdEarnings: PaystubYTDDetails? = nil) {
        self.deductions = deductions
        self.docId = docId
        self.earnings = earnings
        self.employee = employee
        self.employer = employer
        self.employmentDetails = employmentDetails
        self.netPay = netPay
        self.payPeriodDetails = payPeriodDetails
        self.paystubDetails = paystubDetails
        self.incomeBreakdown = incomeBreakdown
        self.ytdEarnings = ytdEarnings
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case deductions
        case docId = "doc_id"
        case earnings
        case employee
        case employer
        case employmentDetails = "employment_details"
        case netPay = "net_pay"
        case payPeriodDetails = "pay_period_details"
        case paystubDetails = "paystub_details"
        case incomeBreakdown = "income_breakdown"
        case ytdEarnings = "ytd_earnings"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(deductions, forKey: .deductions)
        try container.encode(docId, forKey: .docId)
        try container.encode(earnings, forKey: .earnings)
        try container.encode(employee, forKey: .employee)
        try container.encode(employer, forKey: .employer)
        try container.encodeIfPresent(employmentDetails, forKey: .employmentDetails)
        try container.encode(netPay, forKey: .netPay)
        try container.encode(payPeriodDetails, forKey: .payPeriodDetails)
        try container.encodeIfPresent(paystubDetails, forKey: .paystubDetails)
        try container.encodeIfPresent(incomeBreakdown, forKey: .incomeBreakdown)
        try container.encodeIfPresent(ytdEarnings, forKey: .ytdEarnings)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        deductions = try container.decode(Deductions.self, forKey: .deductions)
        docId = try container.decode(String.self, forKey: .docId)
        earnings = try container.decode(Earnings.self, forKey: .earnings)
        employee = try container.decode(Employee.self, forKey: .employee)
        employer = try container.decode(PaystubEmployer.self, forKey: .employer)
        employmentDetails = try container.decodeIfPresent(EmploymentDetails.self, forKey: .employmentDetails)
        netPay = try container.decode(NetPay.self, forKey: .netPay)
        payPeriodDetails = try container.decode(PayPeriodDetails.self, forKey: .payPeriodDetails)
        paystubDetails = try container.decodeIfPresent(PaystubDetails.self, forKey: .paystubDetails)
        incomeBreakdown = try container.decodeIfPresent([IncomeBreakdown].self, forKey: .incomeBreakdown)
        ytdEarnings = try container.decodeIfPresent(PaystubYTDDetails.self, forKey: .ytdEarnings)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("deductions")
        nonAdditionalPropertyKeys.insert("doc_id")
        nonAdditionalPropertyKeys.insert("earnings")
        nonAdditionalPropertyKeys.insert("employee")
        nonAdditionalPropertyKeys.insert("employer")
        nonAdditionalPropertyKeys.insert("employment_details")
        nonAdditionalPropertyKeys.insert("net_pay")
        nonAdditionalPropertyKeys.insert("pay_period_details")
        nonAdditionalPropertyKeys.insert("paystub_details")
        nonAdditionalPropertyKeys.insert("income_breakdown")
        nonAdditionalPropertyKeys.insert("ytd_earnings")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

