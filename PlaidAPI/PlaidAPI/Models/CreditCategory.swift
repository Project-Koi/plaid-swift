//
// CreditCategory.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Information describing the intent of the transaction. Most relevant for credit use cases, but not limited to such use cases.  See the [&#x60;taxonomy csv file&#x60;](https://plaid.com/documents/credit-category-taxonomy.csv) for a full list of credit categories. */
public struct CreditCategory: Codable, JSONEncodable, Hashable {

    /** A high level category that communicates the broad category of the transaction. */
    public var primary: String
    /** A granular category conveying the transaction's intent. This field can also be used as a unique identifier for the category. */
    public var detailed: String

    public init(primary: String, detailed: String) {
        self.primary = primary
        self.detailed = detailed
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case primary
        case detailed
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(primary, forKey: .primary)
        try container.encode(detailed, forKey: .detailed)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        primary = try container.decode(String.self, forKey: .primary)
        detailed = try container.decode(String.self, forKey: .detailed)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("primary")
        nonAdditionalPropertyKeys.insert("detailed")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

