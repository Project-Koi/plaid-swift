//
// FDXParty.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** FDX Participant - an entity or person that is a part of a FDX API transaction */
public struct FDXParty: Codable, JSONEncodable, Hashable {

    /** Human recognizable common name */
    public var name: String
    public var type: FDXPartyType
    /** URI for party, where an end user could learn more about the company or application involved in the data sharing chain */
    public var homeUri: String?
    /** URI for a logo asset to be displayed to the end user */
    public var logoUri: String?
    public var registry: FDXPartyRegistry?
    /** Registered name of party */
    public var registeredEntityName: String?
    /** Registered id of party */
    public var registeredEntityId: String?

    public init(name: String, type: FDXPartyType, homeUri: String? = nil, logoUri: String? = nil, registry: FDXPartyRegistry? = nil, registeredEntityName: String? = nil, registeredEntityId: String? = nil) {
        self.name = name
        self.type = type
        self.homeUri = homeUri
        self.logoUri = logoUri
        self.registry = registry
        self.registeredEntityName = registeredEntityName
        self.registeredEntityId = registeredEntityId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case type
        case homeUri
        case logoUri
        case registry
        case registeredEntityName
        case registeredEntityId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(homeUri, forKey: .homeUri)
        try container.encodeIfPresent(logoUri, forKey: .logoUri)
        try container.encodeIfPresent(registry, forKey: .registry)
        try container.encodeIfPresent(registeredEntityName, forKey: .registeredEntityName)
        try container.encodeIfPresent(registeredEntityId, forKey: .registeredEntityId)
    }
}

