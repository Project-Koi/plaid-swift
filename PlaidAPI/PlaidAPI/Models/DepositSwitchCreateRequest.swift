//
// DepositSwitchCreateRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** DepositSwitchCreateRequest defines the request schema for &#x60;/deposit_switch/create&#x60; */
public struct DepositSwitchCreateRequest: Codable, JSONEncodable, Hashable {

    public enum CountryCode: String, Codable, CaseIterable {
        case us = "US"
        case ca = "CA"
    }
    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** Access token for the target Item, typically provided in the Import Item response.  */
    public var targetAccessToken: String
    /** Plaid Account ID that specifies the target bank account. This account will become the recipient for a user's direct deposit. */
    public var targetAccountId: String
    /** ISO-3166-1 alpha-2 country code standard. */
    public var countryCode: CountryCode?
    public var options: DepositSwitchCreateRequestOptions?

    public init(clientId: String? = nil, secret: String? = nil, targetAccessToken: String, targetAccountId: String, countryCode: CountryCode? = nil, options: DepositSwitchCreateRequestOptions? = nil) {
        self.clientId = clientId
        self.secret = secret
        self.targetAccessToken = targetAccessToken
        self.targetAccountId = targetAccountId
        self.countryCode = countryCode
        self.options = options
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case targetAccessToken = "target_access_token"
        case targetAccountId = "target_account_id"
        case countryCode = "country_code"
        case options
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encode(targetAccessToken, forKey: .targetAccessToken)
        try container.encode(targetAccountId, forKey: .targetAccountId)
        try container.encodeIfPresent(countryCode, forKey: .countryCode)
        try container.encodeIfPresent(options, forKey: .options)
    }
}

