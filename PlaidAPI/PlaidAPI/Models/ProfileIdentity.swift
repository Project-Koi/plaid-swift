//
// ProfileIdentity.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** ProfileIdentity defines the identity data permissioned by the end user during the authorization flow. */
public struct ProfileIdentity: Codable, JSONEncodable, Hashable {

    public var name: ProfileIdentityName?
    public var address: ProfileIdentityAddress?
    /** The user's phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format */
    public var phoneNumber: String?
    /** The user's email address. */
    public var email: String?
    /** The user's date of birth. */
    public var dateOfBirth: String?
    /** The user's social security number. */
    public var ssn: String?
    /** The last 4 digits of the user's social security number. */
    public var ssnLast4: String?

    public init(name: ProfileIdentityName? = nil, address: ProfileIdentityAddress? = nil, phoneNumber: String? = nil, email: String? = nil, dateOfBirth: String? = nil, ssn: String? = nil, ssnLast4: String? = nil) {
        self.name = name
        self.address = address
        self.phoneNumber = phoneNumber
        self.email = email
        self.dateOfBirth = dateOfBirth
        self.ssn = ssn
        self.ssnLast4 = ssnLast4
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case address
        case phoneNumber = "phone_number"
        case email
        case dateOfBirth = "date_of_birth"
        case ssn
        case ssnLast4 = "ssn_last_4"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(phoneNumber, forKey: .phoneNumber)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(dateOfBirth, forKey: .dateOfBirth)
        try container.encodeIfPresent(ssn, forKey: .ssn)
        try container.encodeIfPresent(ssnLast4, forKey: .ssnLast4)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        name = try container.decodeIfPresent(ProfileIdentityName.self, forKey: .name)
        address = try container.decodeIfPresent(ProfileIdentityAddress.self, forKey: .address)
        phoneNumber = try container.decodeIfPresent(String.self, forKey: .phoneNumber)
        email = try container.decodeIfPresent(String.self, forKey: .email)
        dateOfBirth = try container.decodeIfPresent(String.self, forKey: .dateOfBirth)
        ssn = try container.decodeIfPresent(String.self, forKey: .ssn)
        ssnLast4 = try container.decodeIfPresent(String.self, forKey: .ssnLast4)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("name")
        nonAdditionalPropertyKeys.insert("address")
        nonAdditionalPropertyKeys.insert("phone_number")
        nonAdditionalPropertyKeys.insert("email")
        nonAdditionalPropertyKeys.insert("date_of_birth")
        nonAdditionalPropertyKeys.insert("ssn")
        nonAdditionalPropertyKeys.insert("ssn_last_4")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

