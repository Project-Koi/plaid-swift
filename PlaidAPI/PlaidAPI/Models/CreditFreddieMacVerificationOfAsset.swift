//
// CreditFreddieMacVerificationOfAsset.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
public struct CreditFreddieMacVerificationOfAsset: Codable, JSONEncodable, Hashable {

    public var REPORTING_INFORMATION: CreditFreddieMacReportingInformation
    public var SERVICE_PRODUCT_FULFILLMENT: ServiceProductFulfillment
    public var VERIFICATION_OF_ASSET_RESPONSE: CreditFreddieMacVerificationOfAssetResponse

    public init(REPORTING_INFORMATION: CreditFreddieMacReportingInformation, SERVICE_PRODUCT_FULFILLMENT: ServiceProductFulfillment, VERIFICATION_OF_ASSET_RESPONSE: CreditFreddieMacVerificationOfAssetResponse) {
        self.REPORTING_INFORMATION = REPORTING_INFORMATION
        self.SERVICE_PRODUCT_FULFILLMENT = SERVICE_PRODUCT_FULFILLMENT
        self.VERIFICATION_OF_ASSET_RESPONSE = VERIFICATION_OF_ASSET_RESPONSE
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case REPORTING_INFORMATION
        case SERVICE_PRODUCT_FULFILLMENT
        case VERIFICATION_OF_ASSET_RESPONSE
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(REPORTING_INFORMATION, forKey: .REPORTING_INFORMATION)
        try container.encode(SERVICE_PRODUCT_FULFILLMENT, forKey: .SERVICE_PRODUCT_FULFILLMENT)
        try container.encode(VERIFICATION_OF_ASSET_RESPONSE, forKey: .VERIFICATION_OF_ASSET_RESPONSE)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        REPORTING_INFORMATION = try container.decode(CreditFreddieMacReportingInformation.self, forKey: .REPORTING_INFORMATION)
        SERVICE_PRODUCT_FULFILLMENT = try container.decode(ServiceProductFulfillment.self, forKey: .SERVICE_PRODUCT_FULFILLMENT)
        VERIFICATION_OF_ASSET_RESPONSE = try container.decode(CreditFreddieMacVerificationOfAssetResponse.self, forKey: .VERIFICATION_OF_ASSET_RESPONSE)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("REPORTING_INFORMATION")
        nonAdditionalPropertyKeys.insert("SERVICE_PRODUCT_FULFILLMENT")
        nonAdditionalPropertyKeys.insert("VERIFICATION_OF_ASSET_RESPONSE")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

