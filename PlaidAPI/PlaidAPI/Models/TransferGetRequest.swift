//
// TransferGetRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Defines the request schema for &#x60;/transfer/get&#x60; */
public struct TransferGetRequest: Codable, JSONEncodable, Hashable {

    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** Plaidâ€™s unique identifier for a transfer. */
    public var transferId: String
    /** The Plaid client ID of the transfer originator. Should only be present if `client_id` is a third-party sender (TPS). */
    @available(*, deprecated, message: "This property is deprecated.")
    public var originatorClientId: String?

    public init(clientId: String? = nil, secret: String? = nil, transferId: String, originatorClientId: String? = nil) {
        self.clientId = clientId
        self.secret = secret
        self.transferId = transferId
        self.originatorClientId = originatorClientId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case transferId = "transfer_id"
        case originatorClientId = "originator_client_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encode(transferId, forKey: .transferId)
        try container.encodeIfPresent(originatorClientId, forKey: .originatorClientId)
    }
}

