//
// KYCCheckDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Additional information for the &#x60;kyc_check&#x60; step. This field will be &#x60;null&#x60; unless &#x60;steps.kyc_check&#x60; has reached a terminal state of either &#x60;success&#x60; or &#x60;failed&#x60;. */
public struct KYCCheckDetails: Codable, JSONEncodable, Hashable {

    /** The outcome status for the associated Identity Verification attempt's `kyc_check` step. This field will always have the same value as `steps.kyc_check`. */
    public var status: String
    public var address: KYCCheckAddressSummary
    public var name: KYCCheckNameSummary
    public var dateOfBirth: KYCCheckDateOfBirthSummary
    public var idNumber: KYCCheckIDNumberSummary
    public var phoneNumber: KYCCheckPhoneSummary

    public init(status: String, address: KYCCheckAddressSummary, name: KYCCheckNameSummary, dateOfBirth: KYCCheckDateOfBirthSummary, idNumber: KYCCheckIDNumberSummary, phoneNumber: KYCCheckPhoneSummary) {
        self.status = status
        self.address = address
        self.name = name
        self.dateOfBirth = dateOfBirth
        self.idNumber = idNumber
        self.phoneNumber = phoneNumber
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case status
        case address
        case name
        case dateOfBirth = "date_of_birth"
        case idNumber = "id_number"
        case phoneNumber = "phone_number"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(status, forKey: .status)
        try container.encode(address, forKey: .address)
        try container.encode(name, forKey: .name)
        try container.encode(dateOfBirth, forKey: .dateOfBirth)
        try container.encode(idNumber, forKey: .idNumber)
        try container.encode(phoneNumber, forKey: .phoneNumber)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        status = try container.decode(String.self, forKey: .status)
        address = try container.decode(KYCCheckAddressSummary.self, forKey: .address)
        name = try container.decode(KYCCheckNameSummary.self, forKey: .name)
        dateOfBirth = try container.decode(KYCCheckDateOfBirthSummary.self, forKey: .dateOfBirth)
        idNumber = try container.decode(KYCCheckIDNumberSummary.self, forKey: .idNumber)
        phoneNumber = try container.decode(KYCCheckPhoneSummary.self, forKey: .phoneNumber)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("status")
        nonAdditionalPropertyKeys.insert("address")
        nonAdditionalPropertyKeys.insert("name")
        nonAdditionalPropertyKeys.insert("date_of_birth")
        nonAdditionalPropertyKeys.insert("id_number")
        nonAdditionalPropertyKeys.insert("phone_number")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

