//
// CreditPayrollIncomePrecheckRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Defines the request schema for &#x60;/credit/payroll_income/precheck&#x60;. */
public struct CreditPayrollIncomePrecheckRequest: Codable, JSONEncodable, Hashable {

    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** The user token associated with the User data is being requested for. */
    public var userToken: String?
    /** An array of access tokens corresponding to Items belonging to the user whose eligibility is being checked. Note that if the Items specified here are not already initialized with `transactions`, providing them in this field will cause these Items to be initialized with (and billed for) the Transactions product. */
    public var accessTokens: [String]?
    public var employer: IncomeVerificationPrecheckEmployer?
    public var usMilitaryInfo: IncomeVerificationPrecheckMilitaryInfo?
    public var payrollInstitution: IncomeVerificationPrecheckPayrollInstitution?

    public init(clientId: String? = nil, secret: String? = nil, userToken: String? = nil, accessTokens: [String]? = nil, employer: IncomeVerificationPrecheckEmployer? = nil, usMilitaryInfo: IncomeVerificationPrecheckMilitaryInfo? = nil, payrollInstitution: IncomeVerificationPrecheckPayrollInstitution? = nil) {
        self.clientId = clientId
        self.secret = secret
        self.userToken = userToken
        self.accessTokens = accessTokens
        self.employer = employer
        self.usMilitaryInfo = usMilitaryInfo
        self.payrollInstitution = payrollInstitution
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case userToken = "user_token"
        case accessTokens = "access_tokens"
        case employer
        case usMilitaryInfo = "us_military_info"
        case payrollInstitution = "payroll_institution"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encodeIfPresent(userToken, forKey: .userToken)
        try container.encodeIfPresent(accessTokens, forKey: .accessTokens)
        try container.encodeIfPresent(employer, forKey: .employer)
        try container.encodeIfPresent(usMilitaryInfo, forKey: .usMilitaryInfo)
        try container.encodeIfPresent(payrollInstitution, forKey: .payrollInstitution)
    }
}

