//
// TransferAuthorizationProposedTransfer.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Details regarding the proposed transfer. */
public struct TransferAuthorizationProposedTransfer: Codable, JSONEncodable, Hashable {

    public var achClass: ACHClass?
    /** The Plaid `account_id` for the account that will be debited or credited. */
    public var accountId: String?
    /** The id of the associated funding account, available in the Plaid Dashboard. If present, this indicates which of your business checking accounts will be credited or debited. */
    public var fundingAccountId: String?
    public var type: TransferType
    public var user: TransferUserInResponse
    /** The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\"). When calling `/transfer/authorization/create`, specify the maximum amount to authorize. When calling `/transfer/create`, specify the exact amount of the transfer, up to a maximum of the amount authorized. If this field is left blank when calling `/transfer/create`, the maximum amount authorized in the `authorization_id` will be sent. */
    public var amount: String
    /** The network or rails used for the transfer. */
    public var network: String
    public var wireDetails: TransferWireDetails?
    /** Plaid's unique identifier for the origination account that was used for this transfer. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var originationAccountId: String
    /** The currency of the transfer amount. The default value is \"USD\". */
    public var isoCurrencyCode: String
    /** The Plaid client ID that is the originator of this transfer. Only present if created on behalf of another client as a [Platform customer](https://plaid.com/docs/transfer/application/#originators-vs-platforms). */
    public var originatorClientId: String?
    @available(*, deprecated, message: "This property is deprecated.")
    public var creditFundsSource: TransferCreditFundsSource?

    public init(achClass: ACHClass? = nil, accountId: String? = nil, fundingAccountId: String?, type: TransferType, user: TransferUserInResponse, amount: String, network: String, wireDetails: TransferWireDetails? = nil, originationAccountId: String, isoCurrencyCode: String, originatorClientId: String?, creditFundsSource: TransferCreditFundsSource?) {
        self.achClass = achClass
        self.accountId = accountId
        self.fundingAccountId = fundingAccountId
        self.type = type
        self.user = user
        self.amount = amount
        self.network = network
        self.wireDetails = wireDetails
        self.originationAccountId = originationAccountId
        self.isoCurrencyCode = isoCurrencyCode
        self.originatorClientId = originatorClientId
        self.creditFundsSource = creditFundsSource
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case achClass = "ach_class"
        case accountId = "account_id"
        case fundingAccountId = "funding_account_id"
        case type
        case user
        case amount
        case network
        case wireDetails = "wire_details"
        case originationAccountId = "origination_account_id"
        case isoCurrencyCode = "iso_currency_code"
        case originatorClientId = "originator_client_id"
        case creditFundsSource = "credit_funds_source"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(achClass, forKey: .achClass)
        try container.encodeIfPresent(accountId, forKey: .accountId)
        try container.encode(fundingAccountId, forKey: .fundingAccountId)
        try container.encode(type, forKey: .type)
        try container.encode(user, forKey: .user)
        try container.encode(amount, forKey: .amount)
        try container.encode(network, forKey: .network)
        try container.encodeIfPresent(wireDetails, forKey: .wireDetails)
        try container.encode(originationAccountId, forKey: .originationAccountId)
        try container.encode(isoCurrencyCode, forKey: .isoCurrencyCode)
        try container.encode(originatorClientId, forKey: .originatorClientId)
        try container.encode(creditFundsSource, forKey: .creditFundsSource)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        achClass = try container.decodeIfPresent(ACHClass.self, forKey: .achClass)
        accountId = try container.decodeIfPresent(String.self, forKey: .accountId)
        fundingAccountId = try container.decodeIfPresent(String.self, forKey: .fundingAccountId)
        type = try container.decode(TransferType.self, forKey: .type)
        user = try container.decode(TransferUserInResponse.self, forKey: .user)
        amount = try container.decode(String.self, forKey: .amount)
        network = try container.decode(String.self, forKey: .network)
        wireDetails = try container.decodeIfPresent(TransferWireDetails.self, forKey: .wireDetails)
        originationAccountId = try container.decode(String.self, forKey: .originationAccountId)
        isoCurrencyCode = try container.decode(String.self, forKey: .isoCurrencyCode)
        originatorClientId = try container.decodeIfPresent(String.self, forKey: .originatorClientId)
        creditFundsSource = try container.decodeIfPresent(TransferCreditFundsSource.self, forKey: .creditFundsSource)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("ach_class")
        nonAdditionalPropertyKeys.insert("account_id")
        nonAdditionalPropertyKeys.insert("funding_account_id")
        nonAdditionalPropertyKeys.insert("type")
        nonAdditionalPropertyKeys.insert("user")
        nonAdditionalPropertyKeys.insert("amount")
        nonAdditionalPropertyKeys.insert("network")
        nonAdditionalPropertyKeys.insert("wire_details")
        nonAdditionalPropertyKeys.insert("origination_account_id")
        nonAdditionalPropertyKeys.insert("iso_currency_code")
        nonAdditionalPropertyKeys.insert("originator_client_id")
        nonAdditionalPropertyKeys.insert("credit_funds_source")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

