//
// CraLoanRegisterApplication.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Contains loan application data to register. */
public struct CraLoanRegisterApplication: Codable, JSONEncodable, Hashable {

    /** A unique identifier for the loan application.  Personally identifiable information, such as an email address or phone number, should not be used in the `application_id`. */
    public var applicationId: String?
    /** The date the user applied for the loan. The date should be in ISO 8601 format (YYYY-MM-DD). */
    public var applicationDate: Date?

    public init(applicationId: String? = nil, applicationDate: Date? = nil) {
        self.applicationId = applicationId
        self.applicationDate = applicationDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case applicationId = "application_id"
        case applicationDate = "application_date"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(applicationId, forKey: .applicationId)
        try container.encodeIfPresent(applicationDate, forKey: .applicationDate)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        applicationId = try container.decodeIfPresent(String.self, forKey: .applicationId)
        applicationDate = try container.decodeIfPresent(Date.self, forKey: .applicationDate)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("application_id")
        nonAdditionalPropertyKeys.insert("application_date")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

