//
// Location.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A representation of where a transaction took place */
public struct Location: Codable, JSONEncodable, Hashable {

    /** The street address where the transaction occurred. */
    public var address: String?
    /** The city where the transaction occurred. */
    public var city: String?
    /** The region or state where the transaction occurred. In API versions 2018-05-22 and earlier, this field is called `state`. */
    public var region: String?
    /** The postal code where the transaction occurred. In API versions 2018-05-22 and earlier, this field is called `zip`. */
    public var postalCode: String?
    /** The ISO 3166-1 alpha-2 country code where the transaction occurred. */
    public var country: String?
    /** The latitude where the transaction occurred. */
    public var lat: Double?
    /** The longitude where the transaction occurred. */
    public var lon: Double?
    /** The merchant defined store number where the transaction occurred. */
    public var storeNumber: String?

    public init(address: String?, city: String?, region: String?, postalCode: String?, country: String?, lat: Double?, lon: Double?, storeNumber: String?) {
        self.address = address
        self.city = city
        self.region = region
        self.postalCode = postalCode
        self.country = country
        self.lat = lat
        self.lon = lon
        self.storeNumber = storeNumber
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case address
        case city
        case region
        case postalCode = "postal_code"
        case country
        case lat
        case lon
        case storeNumber = "store_number"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(address, forKey: .address)
        try container.encode(city, forKey: .city)
        try container.encode(region, forKey: .region)
        try container.encode(postalCode, forKey: .postalCode)
        try container.encode(country, forKey: .country)
        try container.encode(lat, forKey: .lat)
        try container.encode(lon, forKey: .lon)
        try container.encode(storeNumber, forKey: .storeNumber)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        address = try container.decodeIfPresent(String.self, forKey: .address)
        city = try container.decodeIfPresent(String.self, forKey: .city)
        region = try container.decodeIfPresent(String.self, forKey: .region)
        postalCode = try container.decodeIfPresent(String.self, forKey: .postalCode)
        country = try container.decodeIfPresent(String.self, forKey: .country)
        lat = try container.decodeIfPresent(Double.self, forKey: .lat)
        lon = try container.decodeIfPresent(Double.self, forKey: .lon)
        storeNumber = try container.decodeIfPresent(String.self, forKey: .storeNumber)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("address")
        nonAdditionalPropertyKeys.insert("city")
        nonAdditionalPropertyKeys.insert("region")
        nonAdditionalPropertyKeys.insert("postal_code")
        nonAdditionalPropertyKeys.insert("country")
        nonAdditionalPropertyKeys.insert("lat")
        nonAdditionalPropertyKeys.insert("lon")
        nonAdditionalPropertyKeys.insert("store_number")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

