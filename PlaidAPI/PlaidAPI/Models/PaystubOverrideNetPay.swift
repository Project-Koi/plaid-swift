//
// PaystubOverrideNetPay.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An object representing information about the net pay amount on the paystub. */
public struct PaystubOverrideNetPay: Codable, JSONEncodable, Hashable {

    /** Description of the net pay */
    public var description: String?
    /** The ISO-4217 currency code of the net pay. */
    public var currency: String?
    /** The year-to-date amount of the net pay */
    public var ytdAmount: Double?

    public init(description: String? = nil, currency: String? = nil, ytdAmount: Double? = nil) {
        self.description = description
        self.currency = currency
        self.ytdAmount = ytdAmount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case description
        case currency
        case ytdAmount = "ytd_amount"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(ytdAmount, forKey: .ytdAmount)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        description = try container.decodeIfPresent(String.self, forKey: .description)
        currency = try container.decodeIfPresent(String.self, forKey: .currency)
        ytdAmount = try container.decodeIfPresent(Double.self, forKey: .ytdAmount)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("description")
        nonAdditionalPropertyKeys.insert("currency")
        nonAdditionalPropertyKeys.insert("ytd_amount")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

