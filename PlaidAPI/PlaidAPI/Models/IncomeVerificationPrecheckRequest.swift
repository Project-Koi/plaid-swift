//
// IncomeVerificationPrecheckRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** IncomeVerificationPrecheckRequest defines the request schema for &#x60;/income/verification/precheck&#x60; */
public struct IncomeVerificationPrecheckRequest: Codable, JSONEncodable, Hashable {

    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    public var user: IncomeVerificationPrecheckUser?
    public var employer: IncomeVerificationPrecheckEmployer?
    public var payrollInstitution: IncomeVerificationPrecheckPayrollInstitution?
    /** The access token associated with the Item data is being requested for. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var transactionsAccessToken: String?
    /** An array of access tokens corresponding to Items belonging to the user whose eligibility is being checked. Note that if the Items specified here are not already initialized with `transactions`, providing them in this field will cause these Items to be initialized with (and billed for) the Transactions product. */
    public var transactionsAccessTokens: [String]?
    public var usMilitaryInfo: IncomeVerificationPrecheckMilitaryInfo?

    public init(clientId: String? = nil, secret: String? = nil, user: IncomeVerificationPrecheckUser? = nil, employer: IncomeVerificationPrecheckEmployer? = nil, payrollInstitution: IncomeVerificationPrecheckPayrollInstitution? = nil, transactionsAccessToken: String? = nil, transactionsAccessTokens: [String]? = nil, usMilitaryInfo: IncomeVerificationPrecheckMilitaryInfo? = nil) {
        self.clientId = clientId
        self.secret = secret
        self.user = user
        self.employer = employer
        self.payrollInstitution = payrollInstitution
        self.transactionsAccessToken = transactionsAccessToken
        self.transactionsAccessTokens = transactionsAccessTokens
        self.usMilitaryInfo = usMilitaryInfo
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case user
        case employer
        case payrollInstitution = "payroll_institution"
        case transactionsAccessToken = "transactions_access_token"
        case transactionsAccessTokens = "transactions_access_tokens"
        case usMilitaryInfo = "us_military_info"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encodeIfPresent(employer, forKey: .employer)
        try container.encodeIfPresent(payrollInstitution, forKey: .payrollInstitution)
        try container.encodeIfPresent(transactionsAccessToken, forKey: .transactionsAccessToken)
        try container.encodeIfPresent(transactionsAccessTokens, forKey: .transactionsAccessTokens)
        try container.encodeIfPresent(usMilitaryInfo, forKey: .usMilitaryInfo)
    }
}

