//
// Meta.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Allows specifying the metadata of the test account */
public struct Meta: Codable, JSONEncodable, Hashable {

    static let maskRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^$|^[A-Za-z0-9]{2,4}$/")
    /** The account's name */
    public var name: String
    /** The account's official name */
    public var officialName: String
    /** The account's limit */
    public var limit: Double
    /** The account's mask. Should be an empty string or a string of 2-4 alphanumeric characters. This allows you to model a mask which does not match the account number (such as with a virtual account number). */
    public var mask: String

    public init(name: String, officialName: String, limit: Double, mask: String) {
        self.name = name
        self.officialName = officialName
        self.limit = limit
        self.mask = mask
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case officialName = "official_name"
        case limit
        case mask
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(officialName, forKey: .officialName)
        try container.encode(limit, forKey: .limit)
        try container.encode(mask, forKey: .mask)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        name = try container.decode(String.self, forKey: .name)
        officialName = try container.decode(String.self, forKey: .officialName)
        limit = try container.decode(Double.self, forKey: .limit)
        mask = try container.decode(String.self, forKey: .mask)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("name")
        nonAdditionalPropertyKeys.insert("official_name")
        nonAdditionalPropertyKeys.insert("limit")
        nonAdditionalPropertyKeys.insert("mask")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

