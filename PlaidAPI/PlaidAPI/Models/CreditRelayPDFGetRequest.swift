//
// CreditRelayPDFGetRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** CreditRelayPDFGetRequest defines the request schema for &#x60;/credit/relay/pdf/get&#x60; */
public struct CreditRelayPDFGetRequest: Codable, JSONEncodable, Hashable {

    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** The `relay_token` granting access to the report you would like to get. */
    public var relayToken: String
    public var reportType: ReportType

    public init(clientId: String? = nil, secret: String? = nil, relayToken: String, reportType: ReportType) {
        self.clientId = clientId
        self.secret = secret
        self.relayToken = relayToken
        self.reportType = reportType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case relayToken = "relay_token"
        case reportType = "report_type"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encode(relayToken, forKey: .relayToken)
        try container.encode(reportType, forKey: .reportType)
    }
}

