//
// BankTransferBalance.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Information about the balance of a bank transfer */
public struct BankTransferBalance: Codable, JSONEncodable, Hashable {

    /** The total available balance - the sum of all successful debit transfer amounts minus all credit transfer amounts. */
    public var available: String
    /** The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance. */
    public var transactable: String

    public init(available: String, transactable: String) {
        self.available = available
        self.transactable = transactable
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case available
        case transactable
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(available, forKey: .available)
        try container.encode(transactable, forKey: .transactable)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        available = try container.decode(String.self, forKey: .available)
        transactable = try container.decode(String.self, forKey: .transactable)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("available")
        nonAdditionalPropertyKeys.insert("transactable")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

