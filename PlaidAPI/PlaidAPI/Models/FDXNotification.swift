//
// FDXNotification.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Provides the base fields of a notification. Clients will read the &#x60;type&#x60; property to determine the expected notification payload */
public struct FDXNotification: Codable, JSONEncodable, Hashable {

    /** Id of notification */
    public var notificationId: String
    public var type: FDXNotificationType
    /** ISO 8601 date-time in format 'YYYY-MM-DDThh:mm:ss.nnn[Z|[+|-]hh:mm]' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) */
    public var sentOn: Date
    public var category: FDXNotificationCategory
    public var severity: FDXNotificationSeverity?
    public var priority: FDXNotificationPriority?
    public var publisher: FDXParty?
    public var subscriber: FDXParty?
    public var notificationPayload: FDXNotificationPayload
    public var url: FDXHateoasLink?

    public init(notificationId: String, type: FDXNotificationType, sentOn: Date, category: FDXNotificationCategory, severity: FDXNotificationSeverity? = nil, priority: FDXNotificationPriority? = nil, publisher: FDXParty? = nil, subscriber: FDXParty? = nil, notificationPayload: FDXNotificationPayload, url: FDXHateoasLink? = nil) {
        self.notificationId = notificationId
        self.type = type
        self.sentOn = sentOn
        self.category = category
        self.severity = severity
        self.priority = priority
        self.publisher = publisher
        self.subscriber = subscriber
        self.notificationPayload = notificationPayload
        self.url = url
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case notificationId
        case type
        case sentOn
        case category
        case severity
        case priority
        case publisher
        case subscriber
        case notificationPayload
        case url
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(notificationId, forKey: .notificationId)
        try container.encode(type, forKey: .type)
        try container.encode(sentOn, forKey: .sentOn)
        try container.encode(category, forKey: .category)
        try container.encodeIfPresent(severity, forKey: .severity)
        try container.encodeIfPresent(priority, forKey: .priority)
        try container.encodeIfPresent(publisher, forKey: .publisher)
        try container.encodeIfPresent(subscriber, forKey: .subscriber)
        try container.encode(notificationPayload, forKey: .notificationPayload)
        try container.encodeIfPresent(url, forKey: .url)
    }
}

