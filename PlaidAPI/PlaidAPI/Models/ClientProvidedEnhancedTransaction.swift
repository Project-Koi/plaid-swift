//
// ClientProvidedEnhancedTransaction.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A client-provided transaction that Plaid has enhanced. */
public struct ClientProvidedEnhancedTransaction: Codable, JSONEncodable, Hashable {

    /** Unique transaction identifier to tie transactions back to clients' systems. */
    public var id: String
    /** The raw description of the transaction. */
    public var description: String
    /** The value of the transaction, denominated in the account's currency, as stated in `iso_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative. */
    public var amount: Double
    /** The ISO-4217 currency code of the transaction. */
    public var isoCurrencyCode: String
    public var enhancements: Enhancements

    public init(id: String, description: String, amount: Double, isoCurrencyCode: String, enhancements: Enhancements) {
        self.id = id
        self.description = description
        self.amount = amount
        self.isoCurrencyCode = isoCurrencyCode
        self.enhancements = enhancements
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case description
        case amount
        case isoCurrencyCode = "iso_currency_code"
        case enhancements
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(description, forKey: .description)
        try container.encode(amount, forKey: .amount)
        try container.encode(isoCurrencyCode, forKey: .isoCurrencyCode)
        try container.encode(enhancements, forKey: .enhancements)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decode(String.self, forKey: .id)
        description = try container.decode(String.self, forKey: .description)
        amount = try container.decode(Double.self, forKey: .amount)
        isoCurrencyCode = try container.decode(String.self, forKey: .isoCurrencyCode)
        enhancements = try container.decode(Enhancements.self, forKey: .enhancements)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("id")
        nonAdditionalPropertyKeys.insert("description")
        nonAdditionalPropertyKeys.insert("amount")
        nonAdditionalPropertyKeys.insert("iso_currency_code")
        nonAdditionalPropertyKeys.insert("enhancements")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

