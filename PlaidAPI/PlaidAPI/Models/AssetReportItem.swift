//
// AssetReportItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A representation of an Item within an Asset Report. */
public struct AssetReportItem: Codable, JSONEncodable, Hashable {

    /** The `item_id` of the Item associated with this webhook, warning, or error */
    public var itemId: String
    /** The full financial institution name associated with the Item. */
    public var institutionName: String
    /** The id of the financial institution associated with the Item. */
    public var institutionId: String
    /** The date and time when this Itemâ€™s data was last retrieved from the financial institution, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. */
    public var dateLastUpdated: Date
    /** Data about each of the accounts open on the Item. */
    public var accounts: [AccountAssets]

    public init(itemId: String, institutionName: String, institutionId: String, dateLastUpdated: Date, accounts: [AccountAssets]) {
        self.itemId = itemId
        self.institutionName = institutionName
        self.institutionId = institutionId
        self.dateLastUpdated = dateLastUpdated
        self.accounts = accounts
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case itemId = "item_id"
        case institutionName = "institution_name"
        case institutionId = "institution_id"
        case dateLastUpdated = "date_last_updated"
        case accounts
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(itemId, forKey: .itemId)
        try container.encode(institutionName, forKey: .institutionName)
        try container.encode(institutionId, forKey: .institutionId)
        try container.encode(dateLastUpdated, forKey: .dateLastUpdated)
        try container.encode(accounts, forKey: .accounts)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        itemId = try container.decode(String.self, forKey: .itemId)
        institutionName = try container.decode(String.self, forKey: .institutionName)
        institutionId = try container.decode(String.self, forKey: .institutionId)
        dateLastUpdated = try container.decode(Date.self, forKey: .dateLastUpdated)
        accounts = try container.decode([AccountAssets].self, forKey: .accounts)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("item_id")
        nonAdditionalPropertyKeys.insert("institution_name")
        nonAdditionalPropertyKeys.insert("institution_id")
        nonAdditionalPropertyKeys.insert("date_last_updated")
        nonAdditionalPropertyKeys.insert("accounts")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

