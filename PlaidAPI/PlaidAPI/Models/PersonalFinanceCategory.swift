//
// PersonalFinanceCategory.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Information describing the intent of the transaction. Most relevant for personal finance use cases, but not limited to such use cases.  See the [&#x60;taxonomy CSV file&#x60;](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories. If you are migrating to personal finance categories from the legacy categories, also refer to the [&#x60;migration guide&#x60;](https://plaid.com/docs/transactions/pfc-migration/). */
public struct PersonalFinanceCategory: Codable, JSONEncodable, Hashable {

    /** A high level category that communicates the broad category of the transaction. */
    public var primary: String
    /** A granular category conveying the transaction's intent. This field can also be used as a unique identifier for the category. */
    public var detailed: String
    /** A description of how confident we are that the provided categories accurately describe the transaction intent.  `VERY_HIGH`: We are more than 98% confident that this category reflects the intent of the transaction. `HIGH`: We are more than 90% confident that this category reflects the intent of the transaction. `MEDIUM`: We are moderately confident that this category reflects the intent of the transaction. `LOW`: This category may reflect the intent, but there may be other categories that are more accurate. `UNKNOWN`: We donâ€™t know the confidence level for this category. */
    public var confidenceLevel: String?

    public init(primary: String, detailed: String, confidenceLevel: String? = nil) {
        self.primary = primary
        self.detailed = detailed
        self.confidenceLevel = confidenceLevel
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case primary
        case detailed
        case confidenceLevel = "confidence_level"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(primary, forKey: .primary)
        try container.encode(detailed, forKey: .detailed)
        try container.encodeIfPresent(confidenceLevel, forKey: .confidenceLevel)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        primary = try container.decode(String.self, forKey: .primary)
        detailed = try container.decode(String.self, forKey: .detailed)
        confidenceLevel = try container.decodeIfPresent(String.self, forKey: .confidenceLevel)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("primary")
        nonAdditionalPropertyKeys.insert("detailed")
        nonAdditionalPropertyKeys.insert("confidence_level")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

