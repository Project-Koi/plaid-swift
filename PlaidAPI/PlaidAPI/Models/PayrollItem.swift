//
// PayrollItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An object containing information about the payroll item. */
public struct PayrollItem: Codable, JSONEncodable, Hashable {

    /** The `item_id` of the Item associated with this webhook, warning, or error */
    public var itemId: String
    /** The unique identifier of the institution associated with the Item. */
    public var institutionId: String
    /** The name of the institution associated with the Item. */
    public var institutionName: String
    public var accounts: [PayrollIncomeAccountData]
    public var payrollIncome: [PayrollIncomeObject]
    public var status: PayrollItemStatus?
    /** Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDTHH:mm:ssZ) indicating the last time that the Item was updated. */
    public var updatedAt: Date?

    public init(itemId: String, institutionId: String, institutionName: String, accounts: [PayrollIncomeAccountData], payrollIncome: [PayrollIncomeObject], status: PayrollItemStatus?, updatedAt: Date?) {
        self.itemId = itemId
        self.institutionId = institutionId
        self.institutionName = institutionName
        self.accounts = accounts
        self.payrollIncome = payrollIncome
        self.status = status
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case itemId = "item_id"
        case institutionId = "institution_id"
        case institutionName = "institution_name"
        case accounts
        case payrollIncome = "payroll_income"
        case status
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(itemId, forKey: .itemId)
        try container.encode(institutionId, forKey: .institutionId)
        try container.encode(institutionName, forKey: .institutionName)
        try container.encode(accounts, forKey: .accounts)
        try container.encode(payrollIncome, forKey: .payrollIncome)
        try container.encode(status, forKey: .status)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}

