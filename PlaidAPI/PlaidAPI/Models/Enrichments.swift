//
// Enrichments.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A grouping of the Plaid produced transaction enrichment fields. */
public struct Enrichments: Codable, JSONEncodable, Hashable {

    /** The check number of the transaction. This field is only populated for check transactions. */
    public var checkNumber: String?
    /** The counterparties present in the transaction. Counterparties, such as the merchant or the financial institution, are extracted by Plaid from the raw description. */
    public var counterparties: [Counterparty]
    /** A unique, stable, Plaid-generated ID that maps to the primary counterparty. */
    public var entityId: String?
    /** The ID of the legacy category to which this transaction belongs. For a full list of legacy categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).  We recommend using the `personal_finance_category` for transaction categorization to obtain the best results. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var legacyCategoryId: String?
    /** A hierarchical array of the legacy categories to which this transaction belongs. For a full list of legacy categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).  We recommend using the `personal_finance_category` for transaction categorization to obtain the best results. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var legacyCategory: [String]?
    public var location: Location
    /** The URL of a logo associated with this transaction, if available. The logo will always be 100×100 pixel PNG file. */
    public var logoUrl: String?
    /** The name of the primary counterparty, such as the merchant or the financial institution, as extracted by Plaid from the raw description. */
    public var merchantName: String?
    public var paymentChannel: PaymentChannel
    /** The phone number associated with the counterparty in E. 164 format. If there is a location match (i.e. a street address is returned in the location object), the phone number will be location specific. */
    public var phoneNumber: String?
    public var personalFinanceCategory: PersonalFinanceCategory?
    /** The URL of an icon associated with the primary personal finance category. The icon will always be 100×100 pixel PNG file. */
    public var personalFinanceCategoryIconUrl: String
    public var recurrence: Recurrence?
    /** The website associated with this transaction. */
    public var website: String?

    public init(checkNumber: String? = nil, counterparties: [Counterparty], entityId: String? = nil, legacyCategoryId: String? = nil, legacyCategory: [String]? = nil, location: Location, logoUrl: String?, merchantName: String?, paymentChannel: PaymentChannel, phoneNumber: String?, personalFinanceCategory: PersonalFinanceCategory?, personalFinanceCategoryIconUrl: String, recurrence: Recurrence? = nil, website: String?) {
        self.checkNumber = checkNumber
        self.counterparties = counterparties
        self.entityId = entityId
        self.legacyCategoryId = legacyCategoryId
        self.legacyCategory = legacyCategory
        self.location = location
        self.logoUrl = logoUrl
        self.merchantName = merchantName
        self.paymentChannel = paymentChannel
        self.phoneNumber = phoneNumber
        self.personalFinanceCategory = personalFinanceCategory
        self.personalFinanceCategoryIconUrl = personalFinanceCategoryIconUrl
        self.recurrence = recurrence
        self.website = website
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case checkNumber = "check_number"
        case counterparties
        case entityId = "entity_id"
        case legacyCategoryId = "legacy_category_id"
        case legacyCategory = "legacy_category"
        case location
        case logoUrl = "logo_url"
        case merchantName = "merchant_name"
        case paymentChannel = "payment_channel"
        case phoneNumber = "phone_number"
        case personalFinanceCategory = "personal_finance_category"
        case personalFinanceCategoryIconUrl = "personal_finance_category_icon_url"
        case recurrence
        case website
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(checkNumber, forKey: .checkNumber)
        try container.encode(counterparties, forKey: .counterparties)
        try container.encodeIfPresent(entityId, forKey: .entityId)
        try container.encodeIfPresent(legacyCategoryId, forKey: .legacyCategoryId)
        try container.encodeIfPresent(legacyCategory, forKey: .legacyCategory)
        try container.encode(location, forKey: .location)
        try container.encode(logoUrl, forKey: .logoUrl)
        try container.encode(merchantName, forKey: .merchantName)
        try container.encode(paymentChannel, forKey: .paymentChannel)
        try container.encode(phoneNumber, forKey: .phoneNumber)
        try container.encode(personalFinanceCategory, forKey: .personalFinanceCategory)
        try container.encode(personalFinanceCategoryIconUrl, forKey: .personalFinanceCategoryIconUrl)
        try container.encodeIfPresent(recurrence, forKey: .recurrence)
        try container.encode(website, forKey: .website)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        checkNumber = try container.decodeIfPresent(String.self, forKey: .checkNumber)
        counterparties = try container.decode([Counterparty].self, forKey: .counterparties)
        entityId = try container.decodeIfPresent(String.self, forKey: .entityId)
        legacyCategoryId = try container.decodeIfPresent(String.self, forKey: .legacyCategoryId)
        legacyCategory = try container.decodeIfPresent([String].self, forKey: .legacyCategory)
        location = try container.decode(Location.self, forKey: .location)
        logoUrl = try container.decodeIfPresent(String.self, forKey: .logoUrl)
        merchantName = try container.decodeIfPresent(String.self, forKey: .merchantName)
        paymentChannel = try container.decode(PaymentChannel.self, forKey: .paymentChannel)
        phoneNumber = try container.decodeIfPresent(String.self, forKey: .phoneNumber)
        personalFinanceCategory = try container.decodeIfPresent(PersonalFinanceCategory.self, forKey: .personalFinanceCategory)
        personalFinanceCategoryIconUrl = try container.decode(String.self, forKey: .personalFinanceCategoryIconUrl)
        recurrence = try container.decodeIfPresent(Recurrence.self, forKey: .recurrence)
        website = try container.decodeIfPresent(String.self, forKey: .website)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("check_number")
        nonAdditionalPropertyKeys.insert("counterparties")
        nonAdditionalPropertyKeys.insert("entity_id")
        nonAdditionalPropertyKeys.insert("legacy_category_id")
        nonAdditionalPropertyKeys.insert("legacy_category")
        nonAdditionalPropertyKeys.insert("location")
        nonAdditionalPropertyKeys.insert("logo_url")
        nonAdditionalPropertyKeys.insert("merchant_name")
        nonAdditionalPropertyKeys.insert("payment_channel")
        nonAdditionalPropertyKeys.insert("phone_number")
        nonAdditionalPropertyKeys.insert("personal_finance_category")
        nonAdditionalPropertyKeys.insert("personal_finance_category_icon_url")
        nonAdditionalPropertyKeys.insert("recurrence")
        nonAdditionalPropertyKeys.insert("website")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

