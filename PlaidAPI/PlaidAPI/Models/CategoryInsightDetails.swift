//
// CategoryInsightDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Insights object for categories. */
public struct CategoryInsightDetails: Codable, JSONEncodable, Hashable {

    /** Category name. */
    public var name: String
    /** The number of transactions associated with this category. */
    public var transactionCount: Int
    /** Sum of outflow amounts. */
    public var totalOutflows: Double
    /** Sum of inflow amounts. */
    public var totalInflows: Double
    /** The most common counterparties associated with this category sorted by outflow. */
    public var topCounterparties: [String]?

    public init(name: String, transactionCount: Int, totalOutflows: Double, totalInflows: Double, topCounterparties: [String]? = nil) {
        self.name = name
        self.transactionCount = transactionCount
        self.totalOutflows = totalOutflows
        self.totalInflows = totalInflows
        self.topCounterparties = topCounterparties
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case transactionCount = "transaction_count"
        case totalOutflows = "total_outflows"
        case totalInflows = "total_inflows"
        case topCounterparties = "top_counterparties"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(transactionCount, forKey: .transactionCount)
        try container.encode(totalOutflows, forKey: .totalOutflows)
        try container.encode(totalInflows, forKey: .totalInflows)
        try container.encodeIfPresent(topCounterparties, forKey: .topCounterparties)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        name = try container.decode(String.self, forKey: .name)
        transactionCount = try container.decode(Int.self, forKey: .transactionCount)
        totalOutflows = try container.decode(Double.self, forKey: .totalOutflows)
        totalInflows = try container.decode(Double.self, forKey: .totalInflows)
        topCounterparties = try container.decodeIfPresent([String].self, forKey: .topCounterparties)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("name")
        nonAdditionalPropertyKeys.insert("transaction_count")
        nonAdditionalPropertyKeys.insert("total_outflows")
        nonAdditionalPropertyKeys.insert("total_inflows")
        nonAdditionalPropertyKeys.insert("top_counterparties")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

