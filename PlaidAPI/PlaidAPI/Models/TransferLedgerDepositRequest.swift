//
// TransferLedgerDepositRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Defines the request schema for &#x60;/transfer/ledger/deposit&#x60; */
public struct TransferLedgerDepositRequest: Codable, JSONEncodable, Hashable {

    static let descriptionRule = StringRule(minLength: nil, maxLength: 10, pattern: nil)
    static let idempotencyKeyRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** Client ID of the customer that owns the Ledger balance. This is so Plaid knows which of your customers to payout or collect funds. Only applicable for [Platform customers](https://plaid.com/docs/transfer/application/#originators-vs-platforms). Do not include if youâ€™re paying out to yourself. */
    public var originatorClientId: String?
    /** Specify which funding account linked to this Plaid Ledger to use. Customers can find a list of `funding_account_id`s in the Accounts page of your Plaid Dashboard, under the \"Account ID\" column. If this field is left blank, this will default to the default `funding_account_id` specified during onboarding. If an `originator_client_id` is specified, the `funding_account_id` must belong to the specified originator, and if `funding_account_id` is left blank, the originator's default `funding_account_id` will be used. */
    public var fundingAccountId: String?
    /** A positive amount of how much will be deposited into ledger (decimal string with two digits of precision e.g. \"5.50\"). */
    public var amount: String
    /** The description of the deposit that will be passed to the receiving bank (up to 10 characters). Note that banks utilize this field differently, and may or may not show it on the bank statement. */
    public var description: String?
    /** A unique key provided by the client, per unique ledger deposit. Maximum of 50 characters.  The API supports idempotency for safely retrying the request without accidentally performing the same operation twice. For example, if a request to create a ledger deposit fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single deposit is created. */
    public var idempotencyKey: String
    public var network: TransferACHNetwork

    public init(clientId: String? = nil, secret: String? = nil, originatorClientId: String? = nil, fundingAccountId: String? = nil, amount: String, description: String? = nil, idempotencyKey: String, network: TransferACHNetwork) {
        self.clientId = clientId
        self.secret = secret
        self.originatorClientId = originatorClientId
        self.fundingAccountId = fundingAccountId
        self.amount = amount
        self.description = description
        self.idempotencyKey = idempotencyKey
        self.network = network
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case originatorClientId = "originator_client_id"
        case fundingAccountId = "funding_account_id"
        case amount
        case description
        case idempotencyKey = "idempotency_key"
        case network
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encodeIfPresent(originatorClientId, forKey: .originatorClientId)
        try container.encodeIfPresent(fundingAccountId, forKey: .fundingAccountId)
        try container.encode(amount, forKey: .amount)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(idempotencyKey, forKey: .idempotencyKey)
        try container.encode(network, forKey: .network)
    }
}

