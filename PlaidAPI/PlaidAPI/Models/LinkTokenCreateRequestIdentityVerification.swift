//
// LinkTokenCreateRequestIdentityVerification.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Specifies option for initializing Link for use with the Identity Verification product. */
public struct LinkTokenCreateRequestIdentityVerification: Codable, JSONEncodable, Hashable {

    /** ID of the associated Identity Verification template. */
    public var templateId: String
    /** A flag specifying whether the end user has already agreed to a privacy policy specifying that their data will be shared with Plaid for verification purposes.  If `gave_consent` is set to `true`, the `accept_tos` step will be marked as `skipped` and the end user's session will start at the next step requirement. */
    public var consent: Bool?
    /** A flag specifying whether the end user has already agreed to a privacy policy specifying that their data will be shared with Plaid for verification purposes.  If `gave_consent` is set to `true`, the `accept_tos` step will be marked as `skipped` and the end user's session will start at the next step requirement. */
    public var gaveConsent: Bool? = false

    public init(templateId: String, consent: Bool? = nil, gaveConsent: Bool? = false) {
        self.templateId = templateId
        self.consent = consent
        self.gaveConsent = gaveConsent
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case templateId = "template_id"
        case consent
        case gaveConsent = "gave_consent"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(templateId, forKey: .templateId)
        try container.encodeIfPresent(consent, forKey: .consent)
        try container.encodeIfPresent(gaveConsent, forKey: .gaveConsent)
    }
}

