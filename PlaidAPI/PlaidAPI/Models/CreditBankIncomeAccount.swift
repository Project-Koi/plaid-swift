//
// CreditBankIncomeAccount.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The Item&#39;s bank accounts that have the selected data. */
public struct CreditBankIncomeAccount: Codable, JSONEncodable, Hashable {

    /** Plaid's unique identifier for the account. */
    public var accountId: String
    /** The last 2-4 alphanumeric characters of an account's official account number. Note that the mask may be non-unique between an Item's accounts, and it may also not match the mask that the bank displays to the user. */
    public var mask: String?
    /** The name of the bank account. */
    public var name: String
    /** The official name of the bank account. */
    public var officialName: String?
    public var subtype: DepositoryAccountSubtype
    public var type: CreditBankIncomeAccountType
    /** Data returned by the financial institution about the account owner or owners. Identity information is optional, so field may return an empty array. */
    public var owners: [Owner]

    public init(accountId: String, mask: String?, name: String, officialName: String?, subtype: DepositoryAccountSubtype, type: CreditBankIncomeAccountType, owners: [Owner]) {
        self.accountId = accountId
        self.mask = mask
        self.name = name
        self.officialName = officialName
        self.subtype = subtype
        self.type = type
        self.owners = owners
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountId = "account_id"
        case mask
        case name
        case officialName = "official_name"
        case subtype
        case type
        case owners
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(accountId, forKey: .accountId)
        try container.encode(mask, forKey: .mask)
        try container.encode(name, forKey: .name)
        try container.encode(officialName, forKey: .officialName)
        try container.encode(subtype, forKey: .subtype)
        try container.encode(type, forKey: .type)
        try container.encode(owners, forKey: .owners)
    }
}

