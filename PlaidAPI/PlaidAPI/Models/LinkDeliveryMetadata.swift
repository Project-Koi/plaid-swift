//
// LinkDeliveryMetadata.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Information related to the related to the delivery of the link session to users */
public struct LinkDeliveryMetadata: Codable, JSONEncodable, Hashable {

    public var communicationMethod: LinkDeliveryWebhookCommunicationMethod?
    public var deliveryStatus: LinkDeliveryWebhookDeliveryStatus?

    public init(communicationMethod: LinkDeliveryWebhookCommunicationMethod? = nil, deliveryStatus: LinkDeliveryWebhookDeliveryStatus? = nil) {
        self.communicationMethod = communicationMethod
        self.deliveryStatus = deliveryStatus
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case communicationMethod = "communication_method"
        case deliveryStatus = "delivery_status"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(communicationMethod, forKey: .communicationMethod)
        try container.encodeIfPresent(deliveryStatus, forKey: .deliveryStatus)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        communicationMethod = try container.decodeIfPresent(LinkDeliveryWebhookCommunicationMethod.self, forKey: .communicationMethod)
        deliveryStatus = try container.decodeIfPresent(LinkDeliveryWebhookDeliveryStatus.self, forKey: .deliveryStatus)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("communication_method")
        nonAdditionalPropertyKeys.insert("delivery_status")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

