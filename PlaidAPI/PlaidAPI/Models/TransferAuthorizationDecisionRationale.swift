//
// TransferAuthorizationDecisionRationale.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The rationale for Plaid&#39;s decision regarding a proposed transfer. It is always set for &#x60;declined&#x60; decisions, and may or may not be null for &#x60;approved&#x60; decisions. */
public struct TransferAuthorizationDecisionRationale: Codable, JSONEncodable, Hashable {

    public var code: TransferAuthorizationDecisionRationaleCode
    /** A human-readable description of the code associated with a transfer approval or transfer decline. */
    public var description: String

    public init(code: TransferAuthorizationDecisionRationaleCode, description: String) {
        self.code = code
        self.description = description
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case code
        case description
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(code, forKey: .code)
        try container.encode(description, forKey: .description)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        code = try container.decode(TransferAuthorizationDecisionRationaleCode.self, forKey: .code)
        description = try container.decode(String.self, forKey: .description)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("code")
        nonAdditionalPropertyKeys.insert("description")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

