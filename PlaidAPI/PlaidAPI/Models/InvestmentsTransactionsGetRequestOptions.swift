//
// InvestmentsTransactionsGetRequestOptions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An optional object to filter &#x60;/investments/transactions/get&#x60; results. If provided, must be non-&#x60;null&#x60;. */
public struct InvestmentsTransactionsGetRequestOptions: Codable, JSONEncodable, Hashable {

    static let countRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 500, exclusiveMaximum: false, multipleOf: nil)
    static let offsetRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** An array of `account_ids` to retrieve for the Item. */
    public var accountIds: [String]?
    /** The number of transactions to fetch.  */
    public var count: Int? = 100
    /** The number of transactions to skip when fetching transaction history */
    public var offset: Int? = 0
    /** If the Item was not initialized with the investments product via the `products` array when calling `/link/token/create`, and `async_update` is set to true, the initial Investments extraction will happen asynchronously. Plaid will subsequently fire a `HISTORICAL_UPDATE` webhook when the extraction completes. When `false`, Plaid will wait to return a response until extraction completion and no `HISTORICAL_UPDATE` webhook will fire. Note that while the extraction is happening asynchronously, calls to `/investments/transactions/get` and `/investments/refresh` will return `PRODUCT_NOT_READY` errors until the extraction completes. */
    public var asyncUpdate: Bool? = false

    public init(accountIds: [String]? = nil, count: Int? = 100, offset: Int? = 0, asyncUpdate: Bool? = false) {
        self.accountIds = accountIds
        self.count = count
        self.offset = offset
        self.asyncUpdate = asyncUpdate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountIds = "account_ids"
        case count
        case offset
        case asyncUpdate = "async_update"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(accountIds, forKey: .accountIds)
        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(offset, forKey: .offset)
        try container.encodeIfPresent(asyncUpdate, forKey: .asyncUpdate)
    }
}

