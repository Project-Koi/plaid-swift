//
// PaymentInitiationRecipientCreateRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** PaymentInitiationRecipientCreateRequest defines the request schema for &#x60;/payment_initiation/recipient/create&#x60; */
public struct PaymentInitiationRecipientCreateRequest: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let ibanRule = StringRule(minLength: 15, maxLength: 34, pattern: nil)
    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** The name of the recipient. We recommend using strings of length 18 or less and avoid special characters to ensure compatibility with all institutions. */
    public var name: String
    /** The International Bank Account Number (IBAN) for the recipient. If BACS data is not provided, an IBAN is required. */
    public var iban: String?
    public var bacs: RecipientBACSNullable?
    public var address: PaymentInitiationAddress?

    public init(clientId: String? = nil, secret: String? = nil, name: String, iban: String? = nil, bacs: RecipientBACSNullable? = nil, address: PaymentInitiationAddress? = nil) {
        self.clientId = clientId
        self.secret = secret
        self.name = name
        self.iban = iban
        self.bacs = bacs
        self.address = address
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case secret
        case name
        case iban
        case bacs
        case address
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(iban, forKey: .iban)
        try container.encodeIfPresent(bacs, forKey: .bacs)
        try container.encodeIfPresent(address, forKey: .address)
    }
}

