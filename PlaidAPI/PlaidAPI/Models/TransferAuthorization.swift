//
// TransferAuthorization.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Contains the authorization decision for a proposed transfer. */
public struct TransferAuthorization: Codable, JSONEncodable, Hashable {

    /** Plaidâ€™s unique identifier for a transfer authorization. */
    public var id: String
    /** The datetime representing when the authorization was created, in the format `2006-01-02T15:04:05Z`. */
    public var created: Date
    public var decision: TransferAuthorizationDecision
    public var decisionRationale: TransferAuthorizationDecisionRationale?
    public var guaranteeDecision: TransferAuthorizationGuaranteeDecision?
    public var guaranteeDecisionRationale: TransferAuthorizationGuaranteeDecisionRationale?
    public var paymentRisk: TransferAuthorizationPaymentRisk?
    public var proposedTransfer: TransferAuthorizationProposedTransfer

    public init(id: String, created: Date, decision: TransferAuthorizationDecision, decisionRationale: TransferAuthorizationDecisionRationale?, guaranteeDecision: TransferAuthorizationGuaranteeDecision?, guaranteeDecisionRationale: TransferAuthorizationGuaranteeDecisionRationale?, paymentRisk: TransferAuthorizationPaymentRisk?, proposedTransfer: TransferAuthorizationProposedTransfer) {
        self.id = id
        self.created = created
        self.decision = decision
        self.decisionRationale = decisionRationale
        self.guaranteeDecision = guaranteeDecision
        self.guaranteeDecisionRationale = guaranteeDecisionRationale
        self.paymentRisk = paymentRisk
        self.proposedTransfer = proposedTransfer
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case created
        case decision
        case decisionRationale = "decision_rationale"
        case guaranteeDecision = "guarantee_decision"
        case guaranteeDecisionRationale = "guarantee_decision_rationale"
        case paymentRisk = "payment_risk"
        case proposedTransfer = "proposed_transfer"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(created, forKey: .created)
        try container.encode(decision, forKey: .decision)
        try container.encode(decisionRationale, forKey: .decisionRationale)
        try container.encode(guaranteeDecision, forKey: .guaranteeDecision)
        try container.encode(guaranteeDecisionRationale, forKey: .guaranteeDecisionRationale)
        try container.encode(paymentRisk, forKey: .paymentRisk)
        try container.encode(proposedTransfer, forKey: .proposedTransfer)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decode(String.self, forKey: .id)
        created = try container.decode(Date.self, forKey: .created)
        decision = try container.decode(TransferAuthorizationDecision.self, forKey: .decision)
        decisionRationale = try container.decodeIfPresent(TransferAuthorizationDecisionRationale.self, forKey: .decisionRationale)
        guaranteeDecision = try container.decodeIfPresent(TransferAuthorizationGuaranteeDecision.self, forKey: .guaranteeDecision)
        guaranteeDecisionRationale = try container.decodeIfPresent(TransferAuthorizationGuaranteeDecisionRationale.self, forKey: .guaranteeDecisionRationale)
        paymentRisk = try container.decodeIfPresent(TransferAuthorizationPaymentRisk.self, forKey: .paymentRisk)
        proposedTransfer = try container.decode(TransferAuthorizationProposedTransfer.self, forKey: .proposedTransfer)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("id")
        nonAdditionalPropertyKeys.insert("created")
        nonAdditionalPropertyKeys.insert("decision")
        nonAdditionalPropertyKeys.insert("decision_rationale")
        nonAdditionalPropertyKeys.insert("guarantee_decision")
        nonAdditionalPropertyKeys.insert("guarantee_decision_rationale")
        nonAdditionalPropertyKeys.insert("payment_risk")
        nonAdditionalPropertyKeys.insert("proposed_transfer")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

