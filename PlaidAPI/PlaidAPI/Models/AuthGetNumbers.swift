//
// AuthGetNumbers.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An object containing identifying numbers used for making electronic transfers to and from the &#x60;accounts&#x60;. The identifying number type (ACH, EFT, IBAN, or BACS) used will depend on the country of the account. An account may have more than one number type. If a particular identifying number type is not used by any &#x60;accounts&#x60; for which data has been requested, the array for that type will be empty. */
public struct AuthGetNumbers: Codable, JSONEncodable, Hashable {

    /** An array of ACH numbers identifying accounts. */
    public var ach: [NumbersACH]
    /** An array of EFT numbers identifying accounts. */
    public var eft: [NumbersEFT]
    /** An array of IBAN numbers identifying accounts. */
    public var international: [NumbersInternational]
    /** An array of BACS numbers identifying accounts. */
    public var bacs: [NumbersBACS]

    public init(ach: [NumbersACH], eft: [NumbersEFT], international: [NumbersInternational], bacs: [NumbersBACS]) {
        self.ach = ach
        self.eft = eft
        self.international = international
        self.bacs = bacs
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case ach
        case eft
        case international
        case bacs
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(ach, forKey: .ach)
        try container.encode(eft, forKey: .eft)
        try container.encode(international, forKey: .international)
        try container.encode(bacs, forKey: .bacs)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        ach = try container.decode([NumbersACH].self, forKey: .ach)
        eft = try container.decode([NumbersEFT].self, forKey: .eft)
        international = try container.decode([NumbersInternational].self, forKey: .international)
        bacs = try container.decode([NumbersBACS].self, forKey: .bacs)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("ach")
        nonAdditionalPropertyKeys.insert("eft")
        nonAdditionalPropertyKeys.insert("international")
        nonAdditionalPropertyKeys.insert("bacs")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

