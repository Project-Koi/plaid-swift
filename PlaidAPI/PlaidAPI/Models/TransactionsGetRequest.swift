//
// TransactionsGetRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** TransactionsGetRequest defines the request schema for &#x60;/transactions/get&#x60; */
public struct TransactionsGetRequest: Codable, JSONEncodable, Hashable {

    /** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
    public var clientId: String?
    public var options: TransactionsGetRequestOptions?
    /** The access token associated with the Item data is being requested for. */
    public var accessToken: String
    /** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
    public var secret: String?
    /** The earliest date for which data should be returned. Dates should be formatted as YYYY-MM-DD. */
    public var startDate: Date
    /** The latest date for which data should be returned. Dates should be formatted as YYYY-MM-DD. */
    public var endDate: Date

    public init(clientId: String? = nil, options: TransactionsGetRequestOptions? = nil, accessToken: String, secret: String? = nil, startDate: Date, endDate: Date) {
        self.clientId = clientId
        self.options = options
        self.accessToken = accessToken
        self.secret = secret
        self.startDate = startDate
        self.endDate = endDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case options
        case accessToken = "access_token"
        case secret
        case startDate = "start_date"
        case endDate = "end_date"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(options, forKey: .options)
        try container.encode(accessToken, forKey: .accessToken)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encode(startDate, forKey: .startDate)
        try container.encode(endDate, forKey: .endDate)
    }
}

