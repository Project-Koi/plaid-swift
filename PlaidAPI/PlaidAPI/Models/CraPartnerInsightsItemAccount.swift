//
// CraPartnerInsightsItemAccount.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Account data corresponding to the item from which Partner Insights were generated from */
public struct CraPartnerInsightsItemAccount: Codable, JSONEncodable, Hashable {

    /** The last 2-4 alphanumeric characters of an account's official account number. Note that the mask may be non-unique between an Item's accounts, and it may also not match the mask that the bank displays to the user. */
    public var mask: String?
    /** The name of the account */
    public var name: String
    /** The official name of the bank account. */
    public var officialName: String?
    public var subtype: DepositoryAccountSubtype
    public var type: CreditBankIncomeAccountType
    /** Data returned by the financial institution about the account owner or owners. Identity information is optional, so field may return an empty array. */
    public var owners: [Owner]

    public init(mask: String?, name: String, officialName: String?, subtype: DepositoryAccountSubtype, type: CreditBankIncomeAccountType, owners: [Owner]) {
        self.mask = mask
        self.name = name
        self.officialName = officialName
        self.subtype = subtype
        self.type = type
        self.owners = owners
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case mask
        case name
        case officialName = "official_name"
        case subtype
        case type
        case owners
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(mask, forKey: .mask)
        try container.encode(name, forKey: .name)
        try container.encode(officialName, forKey: .officialName)
        try container.encode(subtype, forKey: .subtype)
        try container.encode(type, forKey: .type)
        try container.encode(owners, forKey: .owners)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        mask = try container.decodeIfPresent(String.self, forKey: .mask)
        name = try container.decode(String.self, forKey: .name)
        officialName = try container.decodeIfPresent(String.self, forKey: .officialName)
        subtype = try container.decode(DepositoryAccountSubtype.self, forKey: .subtype)
        type = try container.decode(CreditBankIncomeAccountType.self, forKey: .type)
        owners = try container.decode([Owner].self, forKey: .owners)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("mask")
        nonAdditionalPropertyKeys.insert("name")
        nonAdditionalPropertyKeys.insert("official_name")
        nonAdditionalPropertyKeys.insert("subtype")
        nonAdditionalPropertyKeys.insert("type")
        nonAdditionalPropertyKeys.insert("owners")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

