//
// LinkTokenCreateRequestIncomeVerification.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Specifies options for initializing Link for use with the Income product. This field is required if &#x60;income_verification&#x60; is included in the &#x60;products&#x60; array. */
public struct LinkTokenCreateRequestIncomeVerification: Codable, JSONEncodable, Hashable {

    /** The `income_verification_id` of the verification instance, as provided by `/income/verification/create`. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var incomeVerificationId: String?
    /** The `asset_report_id` of an asset report associated with the user, as provided by `/asset_report/create`. Providing an `asset_report_id` is optional and can be used to verify the user through a streamlined flow. If provided, the bank linking flow will be skipped. */
    public var assetReportId: String?
    /** An array of access tokens corresponding to Items that a user has previously connected with. Data from these institutions will be cross-referenced with document data received during the Document Income flow to help verify that the uploaded documents are accurate. If the `transactions` product was not initialized for these Items during link, it will be initialized after this Link session.  This field should only be used with the `payroll` income source type. */
    public var accessTokens: [String]?
    /** The types of source income data that users will be permitted to share. Options include `bank` and `payroll`. Currently you can only specify one of these options. */
    public var incomeSourceTypes: [IncomeVerificationSourceType]?
    public var bankIncome: LinkTokenCreateRequestIncomeVerificationBankIncome?
    public var payrollIncome: LinkTokenCreateRequestIncomeVerificationPayrollIncome?
    /** A list of user stated income sources */
    public var statedIncomeSources: [LinkTokenCreateRequestUserStatedIncomeSource]?

    public init(incomeVerificationId: String? = nil, assetReportId: String? = nil, accessTokens: [String]? = nil, incomeSourceTypes: [IncomeVerificationSourceType]? = nil, bankIncome: LinkTokenCreateRequestIncomeVerificationBankIncome? = nil, payrollIncome: LinkTokenCreateRequestIncomeVerificationPayrollIncome? = nil, statedIncomeSources: [LinkTokenCreateRequestUserStatedIncomeSource]? = nil) {
        self.incomeVerificationId = incomeVerificationId
        self.assetReportId = assetReportId
        self.accessTokens = accessTokens
        self.incomeSourceTypes = incomeSourceTypes
        self.bankIncome = bankIncome
        self.payrollIncome = payrollIncome
        self.statedIncomeSources = statedIncomeSources
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case incomeVerificationId = "income_verification_id"
        case assetReportId = "asset_report_id"
        case accessTokens = "access_tokens"
        case incomeSourceTypes = "income_source_types"
        case bankIncome = "bank_income"
        case payrollIncome = "payroll_income"
        case statedIncomeSources = "stated_income_sources"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(incomeVerificationId, forKey: .incomeVerificationId)
        try container.encodeIfPresent(assetReportId, forKey: .assetReportId)
        try container.encodeIfPresent(accessTokens, forKey: .accessTokens)
        try container.encodeIfPresent(incomeSourceTypes, forKey: .incomeSourceTypes)
        try container.encodeIfPresent(bankIncome, forKey: .bankIncome)
        try container.encodeIfPresent(payrollIncome, forKey: .payrollIncome)
        try container.encodeIfPresent(statedIncomeSources, forKey: .statedIncomeSources)
    }
}

