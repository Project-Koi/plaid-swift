//
// CreditBankIncomeCause.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An error object and associated &#x60;item_id&#x60; used to identify a specific Item and error when a batch operation operating on multiple Items has encountered an error in one of the Items. */
public struct CreditBankIncomeCause: Codable, JSONEncodable, Hashable {

    public var errorType: CreditBankIncomeErrorType
    /** We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. Error fields will be `null` if no error has occurred. */
    public var errorCode: String
    /** A developer-friendly representation of the error code. This may change over time and is not safe for programmatic use. */
    public var errorMessage: String
    /** A user-friendly representation of the error code. null if the error is not related to user action. This may change over time and is not safe for programmatic use. */
    public var displayMessage: String
    /** The `item_id` of the Item associated with this warning. */
    public var itemId: String

    public init(errorType: CreditBankIncomeErrorType, errorCode: String, errorMessage: String, displayMessage: String, itemId: String) {
        self.errorType = errorType
        self.errorCode = errorCode
        self.errorMessage = errorMessage
        self.displayMessage = displayMessage
        self.itemId = itemId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case errorType = "error_type"
        case errorCode = "error_code"
        case errorMessage = "error_message"
        case displayMessage = "display_message"
        case itemId = "item_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(errorType, forKey: .errorType)
        try container.encode(errorCode, forKey: .errorCode)
        try container.encode(errorMessage, forKey: .errorMessage)
        try container.encode(displayMessage, forKey: .displayMessage)
        try container.encode(itemId, forKey: .itemId)
    }
}

